{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.2d7529.css","path":"main.2d7529.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.d238ee.js","path":"mobile.d238ee.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.885efe.js","path":"slider.885efe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.2d7529.js","path":"main.2d7529.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","path":"fonts/iconfont.b7ae25.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","path":"fonts/iconfont.59e68b.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","path":"fonts/iconfont.ca3627.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","path":"fonts/iconfont.dba24b.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"75f79c7a9f1072300986dc8b56e6cca36b2b7646","modified":1450295104000},{"_id":"source/CNAME","hash":"8df53c08e609c44ce50e952108a97e4fc64d5be1","modified":1450187562000},{"_id":"source/baidu_verify_PyyIitQewd.html","hash":"d2bc82f39215b06b9c9d4e944ccb81daabbf06fe","modified":1468199414000},{"_id":"source/favicon.ico","hash":"859f54b1fdac4aa88249f506042ea9cddf111e9c","modified":1451699610000},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1487733467000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1487733467000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1487733467000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1487733467000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1487733467000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1487733467000},{"_id":"themes/yilia/README.md","hash":"0becd9c18f9d44fc364788a34a4f3ec82ca7940a","modified":1487733467000},{"_id":"themes/yilia/_config.yml","hash":"657076ac4df5c2b8705fb2daa63cac458337ed6e","modified":1488176862000},{"_id":"themes/yilia/package.json","hash":"946b26ae0dff42c590068f0a58ecd326ed059b68","modified":1487733467000},{"_id":"source/.DS_Store","hash":"cd5361c07053aaa2cd275d2a9449ff704f53052f","modified":1488164474000},{"_id":"themes/yilia/webpack.config.js","hash":"c4dca5c60822c90359e48fad373be768ae9fb43d","modified":1487733467000},{"_id":"source/_posts/Android面试宝典（一）.md","hash":"726dbeffb9bb43583694a3f3ffb9bf2e217dbc13","modified":1477896796000},{"_id":"source/_posts/Android自定义控件之旅（一）滑动开关.md","hash":"5229c633e64d1a959e4f6f620757f41cdcda3684","modified":1467423442000},{"_id":"source/_posts/RxJava探究（一）RxJava初体验.md","hash":"a7b658867e9e1387a9dfa1a6d8b523b1d61aa13c","modified":1487736659000},{"_id":"source/_posts/RxJava探究（三）-RxJava操作符之Transforming-Observables.md","hash":"b901ecc7aef21716fc09bff397c070a901d200e8","modified":1487736707000},{"_id":"source/_posts/RxJava探索（二-RxJava操作符之Creating-Observables.md","hash":"e1b0138ad00319597a7adbf73c40b8e32973fa23","modified":1487736689000},{"_id":"source/_posts/搭建hexo博客.md","hash":"79e65f8df0c561809e1ee962716b1b26a0f9b952","modified":1450503532000},{"_id":"source/_posts/搭建hexo博客（三）使用七牛存储图片.md","hash":"9b2df75b90809eb9bd454c94d77c4152db204097","modified":1467429788000},{"_id":"source/_posts/搭建hexo博客（二）准备工作.md","hash":"0d416b86fe004890bcd4e5bbfaf4f6c9b666b628","modified":1450615092000},{"_id":"source/_posts/深入理解-scrollTo-、scrollBy-、getScrollX.md","hash":"9c4652a773fdc01f4fc926345d29787520786b64","modified":1450922078000},{"_id":"source/about/index.md","hash":"75bfb649c47ddc9c9c555985ebf1d55b1225ad0a","modified":1450292630000},{"_id":"source/categories/index.md","hash":"3a1f64a90678b49028f17bad0d236394761f7bf1","modified":1450408196000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1468199174000},{"_id":"source/tags/index.md","hash":"68e22b5a16f7c39f32177779d97675e3ec5720a7","modified":1450408064000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1487733467000},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1487733467000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1487733452000},{"_id":"themes/yilia/.git/index","hash":"75e0236e55e5e2eef55f4761113d0a94990f631a","modified":1487733467000},{"_id":"themes/yilia/.git/packed-refs","hash":"ce0fffa24e8426ff1d3cdd215fc2af90b9c41a37","modified":1487733467000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1487733467000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1487733467000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1487733467000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1487733467000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1487733467000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1487733467000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1487733467000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1487733467000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1487733467000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1487733467000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1487733467000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1487733467000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1487733467000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1487733467000},{"_id":"themes/yilia/source/main.2d7529.css","hash":"2eef112e365f9b00664302ba98b517662c75d411","modified":1487733467000},{"_id":"themes/yilia/source/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1487733467000},{"_id":"themes/yilia/source/slider.885efe.js","hash":"1f1a6548c6016cc132bf65a1701cc8421a1f8414","modified":1487733467000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1487733467000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1487733467000},{"_id":"themes/yilia/source/main.2d7529.js","hash":"988c141a741441812bcf4c408ef530d7a01522f3","modified":1487733467000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1487733452000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1487733452000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1487733452000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1487733452000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1487733452000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1487733452000},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1487733452000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1487733452000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1487733452000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1487733452000},{"_id":"themes/yilia/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1487733452000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"711219b8baa6bf373e880b154c02e85bd33bb099","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"143710485f734c5a997e0b1c26192bbba2982bcc","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"aadab85a35042afdcbce768a32bb9121b0ad1831","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"db8c42ab7e339c240b7044896a3987555ea9b5b8","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2387d91cf94b0b36e8a36841992a5fce63ebd069","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"8c295469bd1602e9d3bbf2fee81ff84cacb1d701","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"f5e98b6013c968afb867626ed6617cd1cedc3d3a","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1487733467000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1487733467000},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1487733467000},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1487733467000},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1487733467000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1487733467000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1487733467000},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1487733467000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1487733467000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1487733467000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1487733467000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"b750499d5120f963b683d0c96ac3f345c714e448","modified":1487733467000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1487733467000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"ce24ab7049be634c17a163e2db39f1f0b1f7c119","modified":1487733467000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1487733467000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"b68772aa2b47d0ed89ce95d4e9d3d27931fe885c","modified":1487733467000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1487733467000},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"5e3feefbbba70d8da0ec2c75db41762dd4762a81","modified":1487733467000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"d9c1a22a561dc6072833a2f049b3639c0007283d","modified":1487733467000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1487733467000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1487733467000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1487733467000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1487733467000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0ce6345a86c44e3fea5a4aa439614541112538f3","modified":1487733467000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"40c055e8360973a75db7c13f3280a4f465f9e5e3","modified":1487733467000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1487733467000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"12abb65289eed5391d657b963a20f96a473b1cbd","modified":1487733467000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1487733467000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1487733467000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1487733467000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1487733467000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a14f37a57ce7a720a36196f6469d8be955284f8c","modified":1487733467000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1487733467000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1487733467000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"61917c928d09783a3bc8a91503a59ab3a8696e90","modified":1487733467000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1487733467000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1487733467000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1487733467000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1487733467000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"17be4f27eb8951835c29dafd0f6ba1b18e47cc6b","modified":1487733467000},{"_id":"themes/yilia/source-src/js/main.js","hash":"d665f4cf30450984591bc8ad2348a1baf720d04b","modified":1487733467000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1487733467000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1487733467000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1487733467000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1487733467000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1487733467000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1487733467000},{"_id":"themes/yilia/.git/objects/pack/pack-00cb1b394438441bdb4dd3ae1952fa02d3b96034.idx","hash":"e1b8c892d9cb8f8445f88570b13ab5a1e7bd0940","modified":1487733467000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"16c9033891e94fe5e58ea0af0d925519a76eb2c1","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1487733467000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1487733467000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1487733467000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1487733467000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1487733467000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1487733467000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1487733467000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1487733467000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1487733467000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1487733467000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1487733467000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1487733467000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1487733467000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1487733467000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"711219b8baa6bf373e880b154c02e85bd33bb099","modified":1487733467000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1487733467000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"711219b8baa6bf373e880b154c02e85bd33bb099","modified":1487733467000},{"_id":"themes/yilia/.git/objects/pack/pack-00cb1b394438441bdb4dd3ae1952fa02d3b96034.pack","hash":"710b6974229ca82c99c6a2ecf93184316fd6af3a","modified":1487733467000},{"_id":"public/baidu_verify_PyyIitQewd.html","hash":"3bb5ff390d0df3b602c8309fbf19e75168a3c0b7","modified":1487734338184},{"_id":"public/404.html","hash":"5b5d4fbb42dc13299888ee7312eecf1738bc3315","modified":1488176902798},{"_id":"public/about/index.html","hash":"ca0f119d9eb8abe2c48eb9becc7e61681333beb4","modified":1488176902798},{"_id":"public/categories/index.html","hash":"581ce244880054991650eec1241b325d16f77289","modified":1487734338395},{"_id":"public/tags/index.html","hash":"2c7edb64efc055c64f7a297e197ea1c3e5694525","modified":1487734338395},{"_id":"public/2016/07/03/RxJava探究（三）-RxJava操作符之Transforming-Observables/index.html","hash":"d28d956b931b1d3455a328f2f10ea4c40c609af2","modified":1488176902798},{"_id":"public/2016/07/02/RxJava探索（二-RxJava操作符之Creating-Observables/index.html","hash":"00ac503876e2c44c49c865a0777b03674337f5a9","modified":1488176902798},{"_id":"public/2016/05/02/RxJava探究（一）RxJava初体验/index.html","hash":"151abd3d75171af3afe2058e9af7a8375b1dd70f","modified":1488176902799},{"_id":"public/2016/01/09/搭建hexo博客（三）使用七牛存储图片/index.html","hash":"32443d92ea2ddddbbca671c69fb5e3309b99707e","modified":1488176902799},{"_id":"public/2015/12/28/Android自定义控件之旅（一）滑动开关/index.html","hash":"f89541169e2f5bb8c0c2c1cb7af46efa569f93b4","modified":1488176902799},{"_id":"public/2015/12/24/深入理解-scrollTo-、scrollBy-、getScrollX/index.html","hash":"1c7f6e3c342fd4ff9ec951f35d27ddcb838982f4","modified":1488176902799},{"_id":"public/2015/12/20/搭建hexo博客（二）准备工作/index.html","hash":"5b74817ed33434697f1d7bc8d9e434234c6f199d","modified":1488176902799},{"_id":"public/2015/12/17/搭建hexo博客/index.html","hash":"ebab8bdddeff570fd09182e8ae884a1a85ab2ad6","modified":1488176902799},{"_id":"public/archives/index.html","hash":"cff92098303f2046290563fe3beb71ec09a639e4","modified":1488176902799},{"_id":"public/archives/2015/index.html","hash":"9cdc2b35b387c65485bcb7553013658eb5817608","modified":1487734338396},{"_id":"public/archives/2015/12/index.html","hash":"9128bf03786cff35de1c438b0e60fd471194601b","modified":1487734338396},{"_id":"public/archives/2016/index.html","hash":"d33b641e339bad904ffb154dd61196a288ae8052","modified":1488176902799},{"_id":"public/archives/2016/01/index.html","hash":"be95f8c9f4ae3e6810cf4a32a9cf92f4e9e0485a","modified":1487734338396},{"_id":"public/archives/2016/05/index.html","hash":"ec9c3617600cb0c48128d1c1fbc8614e284b6271","modified":1487734338396},{"_id":"public/archives/2016/07/index.html","hash":"f1b2ebc1670d53a9107996c832ca4e0ef707d4c0","modified":1487734338396},{"_id":"public/categories/RxJava探究/index.html","hash":"2012360efd7c036b530f0747ed8ebdd4a1ba89de","modified":1487734338396},{"_id":"public/categories/Android开发/index.html","hash":"e20418704cfc3688790fcb6a7759f26240a7737f","modified":1487734338396},{"_id":"public/categories/hexo搭建个人博客/index.html","hash":"e0c9d68a66720c2e9a79d701ad00c4f39915c760","modified":1487734338396},{"_id":"public/categories/hexo搭建个人博客/个人随感/index.html","hash":"e32be30db045a6bc31a44c2066f6e558ebfed1de","modified":1487734338396},{"_id":"public/index.html","hash":"bbe62fce8487864a67f21d3dfab23ed217767d37","modified":1488176902799},{"_id":"public/tags/RxJava/index.html","hash":"d3865792c840a1ffeefa15512463e8b757841e22","modified":1487734338396},{"_id":"public/tags/Android自定义控件/index.html","hash":"ae9417807aac13875ea3bdd1a693c1e704790044","modified":1487734338397},{"_id":"public/tags/Rxjava/index.html","hash":"c6d3affb1d6f0b13fc3ea974c877eff822eed26b","modified":1487734338397},{"_id":"public/tags/hexo/index.html","hash":"5525beba4551e7c8f54892c660aa80fcf865b077","modified":1487734338397},{"_id":"public/tags/android/index.html","hash":"2b36bf9aae08a0024b77bc0f4200fafb25b7fb0a","modified":1487734338397},{"_id":"public/2016/10/31/Android面试宝典（一）/index.html","hash":"d21a92c3ab96cea8d11ec9aaf67d3488990d461e","modified":1487736296802},{"_id":"public/archives/2016/10/index.html","hash":"6b052eb1fae0716b80ecc236f01e68c24a636f70","modified":1487734338400},{"_id":"public/categories/Android面试/index.html","hash":"87c8efe7561e9d4f00de5f0824dec6c7b70cd325","modified":1487734338401},{"_id":"public/tags/Android面试/index.html","hash":"45b0628bd15326c595d898f742aa83f62d902cdb","modified":1487734338402},{"_id":"public/CNAME","hash":"8df53c08e609c44ce50e952108a97e4fc64d5be1","modified":1487734338405},{"_id":"public/favicon.ico","hash":"859f54b1fdac4aa88249f506042ea9cddf111e9c","modified":1487734338405},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1487734338406},{"_id":"public/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1487734338406},{"_id":"public/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1487734338406},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1487734338406},{"_id":"public/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1487734338406},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1487734338406},{"_id":"public/fonts/iconfont.dba24b.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1487734338406},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1487734338406},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1487734338406},{"_id":"public/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1487734338414},{"_id":"public/slider.885efe.js","hash":"1f1a6548c6016cc132bf65a1701cc8421a1f8414","modified":1487734338414},{"_id":"public/main.2d7529.css","hash":"2eef112e365f9b00664302ba98b517662c75d411","modified":1487734338414},{"_id":"public/main.2d7529.js","hash":"988c141a741441812bcf4c408ef530d7a01522f3","modified":1487734338414},{"_id":"public/content.json","hash":"7a40caa0de6274db2eae6ed7da9b8bd6443cd3f7","modified":1488176902553},{"_id":"themes/yilia/.DS_Store","hash":"18b40c0a074fb756ef76fd437c21c2205a08a585","modified":1487736542000}],"Category":[{"name":"Android面试","_id":"cizgem1ra0006klc1t622elvj"},{"name":"RxJava探究","_id":"cizgem1rh000bklc17d7mp4w3"},{"name":"Android开发","_id":"cizgem1rp000nklc1dp71aj12"},{"name":"hexo搭建个人博客","_id":"cizgem1rs000vklc1k2s72o6h"},{"name":"个人随感","parent":"cizgem1rs000vklc1k2s72o6h","_id":"cizgem1rx001aklc1c1gd1dvj"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"your site url \" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"your site url \" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>\n","date":"2017-02-21T09:50:55.000Z","updated":"2015-12-16T19:45:04.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cizgem1q30000klc1vnzvz2g6","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"your site url \" homepagename=\"回到我的主页\"></script>\n\n</body>\n</html>\n","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"your site url \" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>\n"},{"layout":"false","_content":"PyyIitQewd\n","source":"baidu_verify_PyyIitQewd.html","raw":"layout: false\n---\nPyyIitQewd\n","date":"2017-02-21T09:50:55.000Z","updated":"2016-07-11T01:10:14.000Z","path":"baidu_verify_PyyIitQewd.html","title":"","comments":1,"_id":"cizgem1q40001klc1wlt5jx78","content":"PyyIitQewd\n","excerpt":"","more":"PyyIitQewd\n"},{"title":"about","date":"2015-12-16T19:03:50.000Z","_content":"","source":"about/index.md","raw":"title: about\ndate: 2015-12-17 03:03:50\n---\n","updated":"2015-12-16T19:03:50.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cizgem1r80003klc12fu3dyib","content":"","excerpt":"","more":""},{"title":"categories","date":"2015-12-16T19:07:24.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"title: categories\ndate: 2015-12-17 03:07:24\ntype: \"categories\"\ncomments: false\n---\n","updated":"2015-12-18T03:09:56.000Z","path":"categories/index.html","layout":"page","_id":"cizgem1ra0005klc1idi4w1if","content":"","excerpt":"","more":""},{"title":"tags","date":"2015-12-16T19:07:53.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2015-12-17 03:07:53\ntype: \"tags\"\ncomments: false\n---\n","updated":"2015-12-18T03:07:44.000Z","path":"tags/index.html","layout":"page","_id":"cizgem1sa001fklc1fzpsd6t7","content":"","excerpt":"","more":""}],"Post":[{"title":"RxJava探究（一）RxJava初体验","date":"2016-05-02T14:15:47.000Z","_content":"\n## RxJava是什么\n最近Android社区中，RxJava可算是非常火，以至于你不会RxJava就不好意思说你是一个Android开发工程师，本着学习的态度，来体验一下RxJava。\n\nRxJava是一种响应式编程，基于观察者模式（于观察者模式稍稍有差别）在处理异步回调时有着得天独厚的优势，在处理复杂的列表过滤、变化、转换等时，RxJava为我们提供了全新的思想。\n\n\n## 如何使用RxJava\n\n### Gradle中引入\n\n```java\ncompile 'io.reactivex:rxjava:1.1.0' \n```\n\t\n### 创建被观察者、事件源Observable\n\n```Java\n   //被观察者，事件源\n   Observable<String> myObservable = Observable.create(new Observable.OnSubscribe<String>() {\n            @Override\n            public void call(Subscriber<? super String> subscriber) {\n                subscriber.onNext(\"Hello world!\");\n                subscriber.onCompleted();\n            }\n        });\n```\n定义Observable对象myObservable,只是传达一个“Hello world!”字符串就OK了，下面我们创建Subscriber来处理myObservable发出的\"Hello world!\"\n### 创建订阅者、观察者对象Subscriber\n\n\n<!--more-->\n```Java\n//订阅者\nSubscriber<String> mySubscriber = new Subscriber<String>() {\n            @Override\n            public void onCompleted() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(String s) {\n                System.out.println(s);\n            }\n        };\n\n```\n定义Subscriber对象mySubscriber，打印myObservable对象发出的字符串\"Hellow world!\"\n### 关联观察者和被观察者，即就是让被观察者订阅观察者对象\n通过subscribe方法建立观察者和被观察者之间的联系\n\n```Java\nmyObservable.subscribe(mySubscriber);\n```\n\n关联后程序就会打印\"Hellow world!\"\n\n### 简化代码\n\nRxJava中提供多种创建Observale对象的方法，上面我们的Observale对象仅仅是发出了一个字符串就结束了，那么我们可以用Observable.just()方法。\nObservable.just(): Returns an Observable that emits a single item and then completes. 返回发出单一事件就结束的Observale对象。\n\n```Java\nObservable<String> myObservable = Observable.just(\"Hello world!\");\n```\n\n上面的例子中Subscriber对象只关心onNext()方法，所以可以用Action1类来处理\n\n```java\n   //如果只需要在onNext处理,可以用Action1\n        Action1<String> onNextAction = new Action1<String>() {\n            @Override\n            public void call(String s) {\n                System.out.println(s);\n            }\n        };\n```\nsubscribe方法有一个重载版本，接受三个Action1类型的参数，分别对应OnNext，OnComplete， OnError函数。\n\n```java\n  myObservable.subscribe(onNextAction, onErrorAction, onCompleteAction);\n```\n\n我们只关心onNext,所以上面的代码可以简写为\n```java\n       //just用来创建只发出一个事件就结束的Observable对象\n        Observable<String> myObservable = Observable.just(\"Hello world!\");\n        //如果只需要在onNext处理,可以用Action1\n        Action1<String> onNextAction = new Action1<String>() {\n            @Override\n            public void call(String s) {\n                System.out.println(s);\n            }\n        };\n        myObservable.subscribe(onNextAction);\n```\n\n最终的代码可以是\n```java\n      //上面可以简写为\n        Observable.just(\"Hello world!\")\n                .subscribe(new Action1<String>() {\n                    @Override\n                    public void call(String s) {\n                        System.out.println(s);\n                    }\n                });\n```\n\n\n\n\n    \n","source":"_posts/RxJava探究（一）RxJava初体验.md","raw":"title: RxJava探究（一）RxJava初体验\ndate: 2016-05-02 22:15:47\ncategories: RxJava探究\ntags: RxJava\n\n---\n\n## RxJava是什么\n最近Android社区中，RxJava可算是非常火，以至于你不会RxJava就不好意思说你是一个Android开发工程师，本着学习的态度，来体验一下RxJava。\n\nRxJava是一种响应式编程，基于观察者模式（于观察者模式稍稍有差别）在处理异步回调时有着得天独厚的优势，在处理复杂的列表过滤、变化、转换等时，RxJava为我们提供了全新的思想。\n\n\n## 如何使用RxJava\n\n### Gradle中引入\n\n```java\ncompile 'io.reactivex:rxjava:1.1.0' \n```\n\t\n### 创建被观察者、事件源Observable\n\n```Java\n   //被观察者，事件源\n   Observable<String> myObservable = Observable.create(new Observable.OnSubscribe<String>() {\n            @Override\n            public void call(Subscriber<? super String> subscriber) {\n                subscriber.onNext(\"Hello world!\");\n                subscriber.onCompleted();\n            }\n        });\n```\n定义Observable对象myObservable,只是传达一个“Hello world!”字符串就OK了，下面我们创建Subscriber来处理myObservable发出的\"Hello world!\"\n### 创建订阅者、观察者对象Subscriber\n\n\n<!--more-->\n```Java\n//订阅者\nSubscriber<String> mySubscriber = new Subscriber<String>() {\n            @Override\n            public void onCompleted() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(String s) {\n                System.out.println(s);\n            }\n        };\n\n```\n定义Subscriber对象mySubscriber，打印myObservable对象发出的字符串\"Hellow world!\"\n### 关联观察者和被观察者，即就是让被观察者订阅观察者对象\n通过subscribe方法建立观察者和被观察者之间的联系\n\n```Java\nmyObservable.subscribe(mySubscriber);\n```\n\n关联后程序就会打印\"Hellow world!\"\n\n### 简化代码\n\nRxJava中提供多种创建Observale对象的方法，上面我们的Observale对象仅仅是发出了一个字符串就结束了，那么我们可以用Observable.just()方法。\nObservable.just(): Returns an Observable that emits a single item and then completes. 返回发出单一事件就结束的Observale对象。\n\n```Java\nObservable<String> myObservable = Observable.just(\"Hello world!\");\n```\n\n上面的例子中Subscriber对象只关心onNext()方法，所以可以用Action1类来处理\n\n```java\n   //如果只需要在onNext处理,可以用Action1\n        Action1<String> onNextAction = new Action1<String>() {\n            @Override\n            public void call(String s) {\n                System.out.println(s);\n            }\n        };\n```\nsubscribe方法有一个重载版本，接受三个Action1类型的参数，分别对应OnNext，OnComplete， OnError函数。\n\n```java\n  myObservable.subscribe(onNextAction, onErrorAction, onCompleteAction);\n```\n\n我们只关心onNext,所以上面的代码可以简写为\n```java\n       //just用来创建只发出一个事件就结束的Observable对象\n        Observable<String> myObservable = Observable.just(\"Hello world!\");\n        //如果只需要在onNext处理,可以用Action1\n        Action1<String> onNextAction = new Action1<String>() {\n            @Override\n            public void call(String s) {\n                System.out.println(s);\n            }\n        };\n        myObservable.subscribe(onNextAction);\n```\n\n最终的代码可以是\n```java\n      //上面可以简写为\n        Observable.just(\"Hello world!\")\n                .subscribe(new Action1<String>() {\n                    @Override\n                    public void call(String s) {\n                        System.out.println(s);\n                    }\n                });\n```\n\n\n\n\n    \n","slug":"RxJava探究（一）RxJava初体验","published":1,"updated":"2017-02-22T04:10:59.000Z","_id":"cizgem1r80004klc1kdfv1oou","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"RxJava是什么\"><a href=\"#RxJava是什么\" class=\"headerlink\" title=\"RxJava是什么\"></a>RxJava是什么</h2><p>最近Android社区中，RxJava可算是非常火，以至于你不会RxJava就不好意思说你是一个Android开发工程师，本着学习的态度，来体验一下RxJava。</p>\n<p>RxJava是一种响应式编程，基于观察者模式（于观察者模式稍稍有差别）在处理异步回调时有着得天独厚的优势，在处理复杂的列表过滤、变化、转换等时，RxJava为我们提供了全新的思想。</p>\n<h2 id=\"如何使用RxJava\"><a href=\"#如何使用RxJava\" class=\"headerlink\" title=\"如何使用RxJava\"></a>如何使用RxJava</h2><h3 id=\"Gradle中引入\"><a href=\"#Gradle中引入\" class=\"headerlink\" title=\"Gradle中引入\"></a>Gradle中引入</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'io.reactivex:rxjava:1.1.0'</span></div></pre></td></tr></table></figure>\n<h3 id=\"创建被观察者、事件源Observable\"><a href=\"#创建被观察者、事件源Observable\" class=\"headerlink\" title=\"创建被观察者、事件源Observable\"></a>创建被观察者、事件源Observable</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//被观察者，事件源</span></div><div class=\"line\">Observable&lt;String&gt; myObservable = Observable.create(<span class=\"keyword\">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class=\"line\">         <span class=\"meta\">@Override</span></div><div class=\"line\">         <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class=\"line\">             subscriber.onNext(<span class=\"string\">\"Hello world!\"</span>);</div><div class=\"line\">             subscriber.onCompleted();</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;);</div></pre></td></tr></table></figure>\n<p>定义Observable对象myObservable,只是传达一个“Hello world!”字符串就OK了，下面我们创建Subscriber来处理myObservable发出的”Hello world!”</p>\n<h3 id=\"创建订阅者、观察者对象Subscriber\"><a href=\"#创建订阅者、观察者对象Subscriber\" class=\"headerlink\" title=\"创建订阅者、观察者对象Subscriber\"></a>创建订阅者、观察者对象Subscriber</h3><a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//订阅者</span></div><div class=\"line\">Subscriber&lt;String&gt; mySubscriber = <span class=\"keyword\">new</span> Subscriber&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">                System.out.println(s);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div></pre></td></tr></table></figure>\n<p>定义Subscriber对象mySubscriber，打印myObservable对象发出的字符串”Hellow world!”</p>\n<h3 id=\"关联观察者和被观察者，即就是让被观察者订阅观察者对象\"><a href=\"#关联观察者和被观察者，即就是让被观察者订阅观察者对象\" class=\"headerlink\" title=\"关联观察者和被观察者，即就是让被观察者订阅观察者对象\"></a>关联观察者和被观察者，即就是让被观察者订阅观察者对象</h3><p>通过subscribe方法建立观察者和被观察者之间的联系</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">myObservable.subscribe(mySubscriber);</div></pre></td></tr></table></figure>\n<p>关联后程序就会打印”Hellow world!”</p>\n<h3 id=\"简化代码\"><a href=\"#简化代码\" class=\"headerlink\" title=\"简化代码\"></a>简化代码</h3><p>RxJava中提供多种创建Observale对象的方法，上面我们的Observale对象仅仅是发出了一个字符串就结束了，那么我们可以用Observable.just()方法。<br>Observable.just(): Returns an Observable that emits a single item and then completes. 返回发出单一事件就结束的Observale对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable&lt;String&gt; myObservable = Observable.just(<span class=\"string\">\"Hello world!\"</span>);</div></pre></td></tr></table></figure>\n<p>上面的例子中Subscriber对象只关心onNext()方法，所以可以用Action1类来处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//如果只需要在onNext处理,可以用Action1</span></div><div class=\"line\">     Action1&lt;String&gt; onNextAction = <span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">         <span class=\"meta\">@Override</span></div><div class=\"line\">         <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">             System.out.println(s);</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;;</div></pre></td></tr></table></figure>\n<p>subscribe方法有一个重载版本，接受三个Action1类型的参数，分别对应OnNext，OnComplete， OnError函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">myObservable.subscribe(onNextAction, onErrorAction, onCompleteAction);</div></pre></td></tr></table></figure>\n<p>我们只关心onNext,所以上面的代码可以简写为<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//just用来创建只发出一个事件就结束的Observable对象</span></div><div class=\"line\"> Observable&lt;String&gt; myObservable = Observable.just(<span class=\"string\">\"Hello world!\"</span>);</div><div class=\"line\"> <span class=\"comment\">//如果只需要在onNext处理,可以用Action1</span></div><div class=\"line\"> Action1&lt;String&gt; onNextAction = <span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">     <span class=\"meta\">@Override</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">         System.out.println(s);</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> myObservable.subscribe(onNextAction);</div></pre></td></tr></table></figure></p>\n<p>最终的代码可以是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//上面可以简写为</span></div><div class=\"line\">  Observable.just(<span class=\"string\">\"Hello world!\"</span>)</div><div class=\"line\">          .subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">              <span class=\"meta\">@Override</span></div><div class=\"line\">              <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">                  System.out.println(s);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;);</div></pre></td></tr></table></figure></p>\n","excerpt":"<h2 id=\"RxJava是什么\"><a href=\"#RxJava是什么\" class=\"headerlink\" title=\"RxJava是什么\"></a>RxJava是什么</h2><p>最近Android社区中，RxJava可算是非常火，以至于你不会RxJava就不好意思说你是一个Android开发工程师，本着学习的态度，来体验一下RxJava。</p>\n<p>RxJava是一种响应式编程，基于观察者模式（于观察者模式稍稍有差别）在处理异步回调时有着得天独厚的优势，在处理复杂的列表过滤、变化、转换等时，RxJava为我们提供了全新的思想。</p>\n<h2 id=\"如何使用RxJava\"><a href=\"#如何使用RxJava\" class=\"headerlink\" title=\"如何使用RxJava\"></a>如何使用RxJava</h2><h3 id=\"Gradle中引入\"><a href=\"#Gradle中引入\" class=\"headerlink\" title=\"Gradle中引入\"></a>Gradle中引入</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'io.reactivex:rxjava:1.1.0'</span></div></pre></td></tr></table></figure>\n<h3 id=\"创建被观察者、事件源Observable\"><a href=\"#创建被观察者、事件源Observable\" class=\"headerlink\" title=\"创建被观察者、事件源Observable\"></a>创建被观察者、事件源Observable</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//被观察者，事件源</span></div><div class=\"line\">Observable&lt;String&gt; myObservable = Observable.create(<span class=\"keyword\">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class=\"line\">         <span class=\"meta\">@Override</span></div><div class=\"line\">         <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class=\"line\">             subscriber.onNext(<span class=\"string\">\"Hello world!\"</span>);</div><div class=\"line\">             subscriber.onCompleted();</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;);</div></pre></td></tr></table></figure>\n<p>定义Observable对象myObservable,只是传达一个“Hello world!”字符串就OK了，下面我们创建Subscriber来处理myObservable发出的”Hello world!”</p>\n<h3 id=\"创建订阅者、观察者对象Subscriber\"><a href=\"#创建订阅者、观察者对象Subscriber\" class=\"headerlink\" title=\"创建订阅者、观察者对象Subscriber\"></a>创建订阅者、观察者对象Subscriber</h3>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//订阅者</span></div><div class=\"line\">Subscriber&lt;String&gt; mySubscriber = <span class=\"keyword\">new</span> Subscriber&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">                System.out.println(s);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div></pre></td></tr></table></figure>\n<p>定义Subscriber对象mySubscriber，打印myObservable对象发出的字符串”Hellow world!”</p>\n<h3 id=\"关联观察者和被观察者，即就是让被观察者订阅观察者对象\"><a href=\"#关联观察者和被观察者，即就是让被观察者订阅观察者对象\" class=\"headerlink\" title=\"关联观察者和被观察者，即就是让被观察者订阅观察者对象\"></a>关联观察者和被观察者，即就是让被观察者订阅观察者对象</h3><p>通过subscribe方法建立观察者和被观察者之间的联系</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">myObservable.subscribe(mySubscriber);</div></pre></td></tr></table></figure>\n<p>关联后程序就会打印”Hellow world!”</p>\n<h3 id=\"简化代码\"><a href=\"#简化代码\" class=\"headerlink\" title=\"简化代码\"></a>简化代码</h3><p>RxJava中提供多种创建Observale对象的方法，上面我们的Observale对象仅仅是发出了一个字符串就结束了，那么我们可以用Observable.just()方法。<br>Observable.just(): Returns an Observable that emits a single item and then completes. 返回发出单一事件就结束的Observale对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable&lt;String&gt; myObservable = Observable.just(<span class=\"string\">\"Hello world!\"</span>);</div></pre></td></tr></table></figure>\n<p>上面的例子中Subscriber对象只关心onNext()方法，所以可以用Action1类来处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//如果只需要在onNext处理,可以用Action1</span></div><div class=\"line\">     Action1&lt;String&gt; onNextAction = <span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">         <span class=\"meta\">@Override</span></div><div class=\"line\">         <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">             System.out.println(s);</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;;</div></pre></td></tr></table></figure>\n<p>subscribe方法有一个重载版本，接受三个Action1类型的参数，分别对应OnNext，OnComplete， OnError函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">myObservable.subscribe(onNextAction, onErrorAction, onCompleteAction);</div></pre></td></tr></table></figure>\n<p>我们只关心onNext,所以上面的代码可以简写为<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//just用来创建只发出一个事件就结束的Observable对象</span></div><div class=\"line\"> Observable&lt;String&gt; myObservable = Observable.just(<span class=\"string\">\"Hello world!\"</span>);</div><div class=\"line\"> <span class=\"comment\">//如果只需要在onNext处理,可以用Action1</span></div><div class=\"line\"> Action1&lt;String&gt; onNextAction = <span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">     <span class=\"meta\">@Override</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">         System.out.println(s);</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> myObservable.subscribe(onNextAction);</div></pre></td></tr></table></figure></p>\n<p>最终的代码可以是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//上面可以简写为</span></div><div class=\"line\">  Observable.just(<span class=\"string\">\"Hello world!\"</span>)</div><div class=\"line\">          .subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">              <span class=\"meta\">@Override</span></div><div class=\"line\">              <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">                  System.out.println(s);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;);</div></pre></td></tr></table></figure></p>"},{"title":"RxJava探究（三） RxJava操作符之Transforming Observables","date":"2016-07-03T02:54:50.000Z","_content":"\nTransform类操作符，可以转换由一个Observable对象发出的对象。\n\n## Buffer\n顾名思义缓存的意思\n\n### Observable<List<T>> buffer(int count, int skip)\n每隔skip长度后，发出size为conut的Observable\n\n![](http://reactivex.io/documentation/operators/images/buffer4.png)\n\n```java\n Observable.just(1, 2, 3, 4, 5, 6, 7, 8, 9).buffer(2,4)\n .subscribe(new Action1<List<Integer>>() {\n            @Override\n            public void call(List<Integer> i) {\n                System.out.println(\"buffer \" + i);\n            }\n        });\n```\n\n每隔4个数，输出一个长度为2的集合，输出为：\n```\nbuffer [1, 2]\nbuffer [5, 6]\nbuffer [9]\n```\n<!--more-->\n### Observable<List<T>> buffer(long timespan, TimeUnit unit)\n\n周期性的订阅\n```java\nObservable.create(new Observable.OnSubscribe<String>() {  \n           @Override  \n           public void call(Subscriber<? super String> subscriber) {  \n               if (subscriber.isUnsubscribed()) return;  \n               while (true) {  \n                   subscriber.onNext(\"消息\" + SystemClock.elapsedRealtime());  \n                   SystemClock.sleep(2000);//每隔2s发送消息  \n               }  \n  \n           }  \n       }).subscribeOn(Schedulers.io()).  \n               buffer(3, TimeUnit.SECONDS).//每隔3秒 取出消息  \n               subscribe(new Observer<List<String>>() {  \n           @Override  \n           public void onCompleted() {  \n               LogUtils.d(\"-----------------onCompleted:\");  \n           }  \n  \n           @Override  \n           public void onError(Throwable e) {  \n               LogUtils.d(\"----------------->onError:\");  \n           }  \n  \n           @Override  \n           public void onNext(List<String> strings) {  \n               LogUtils.d(\"----------------->onNext:\" + strings);  \n           }  \n       });  \n```\n\n程序输出如下：\n\n```\nonNext:[消息370507667, 消息370509668]\nonNext:[消息370511668]\nonNext:[消息370513669, 消息370515669]\nonNext:[消息370529168, 消息370531172]\nonNext:[消息370533184]\nonNext:[消息370535184, 消息370537184]\nonNext:[消息370539184]\nonNext:[消息370541185, 消息370543204]\nonNext:[消息370545204]\nonNext:[消息370547204, 消息370549204]\nonNext:[消息370551204]\n\n```\n\n","source":"_posts/RxJava探究（三）-RxJava操作符之Transforming-Observables.md","raw":"title: RxJava探究（三） RxJava操作符之Transforming Observables\ndate: 2016-07-03 10:54:50\ncategories: RxJava探究\ntags: RxJava\n---\n\nTransform类操作符，可以转换由一个Observable对象发出的对象。\n\n## Buffer\n顾名思义缓存的意思\n\n### Observable<List<T>> buffer(int count, int skip)\n每隔skip长度后，发出size为conut的Observable\n\n![](http://reactivex.io/documentation/operators/images/buffer4.png)\n\n```java\n Observable.just(1, 2, 3, 4, 5, 6, 7, 8, 9).buffer(2,4)\n .subscribe(new Action1<List<Integer>>() {\n            @Override\n            public void call(List<Integer> i) {\n                System.out.println(\"buffer \" + i);\n            }\n        });\n```\n\n每隔4个数，输出一个长度为2的集合，输出为：\n```\nbuffer [1, 2]\nbuffer [5, 6]\nbuffer [9]\n```\n<!--more-->\n### Observable<List<T>> buffer(long timespan, TimeUnit unit)\n\n周期性的订阅\n```java\nObservable.create(new Observable.OnSubscribe<String>() {  \n           @Override  \n           public void call(Subscriber<? super String> subscriber) {  \n               if (subscriber.isUnsubscribed()) return;  \n               while (true) {  \n                   subscriber.onNext(\"消息\" + SystemClock.elapsedRealtime());  \n                   SystemClock.sleep(2000);//每隔2s发送消息  \n               }  \n  \n           }  \n       }).subscribeOn(Schedulers.io()).  \n               buffer(3, TimeUnit.SECONDS).//每隔3秒 取出消息  \n               subscribe(new Observer<List<String>>() {  \n           @Override  \n           public void onCompleted() {  \n               LogUtils.d(\"-----------------onCompleted:\");  \n           }  \n  \n           @Override  \n           public void onError(Throwable e) {  \n               LogUtils.d(\"----------------->onError:\");  \n           }  \n  \n           @Override  \n           public void onNext(List<String> strings) {  \n               LogUtils.d(\"----------------->onNext:\" + strings);  \n           }  \n       });  \n```\n\n程序输出如下：\n\n```\nonNext:[消息370507667, 消息370509668]\nonNext:[消息370511668]\nonNext:[消息370513669, 消息370515669]\nonNext:[消息370529168, 消息370531172]\nonNext:[消息370533184]\nonNext:[消息370535184, 消息370537184]\nonNext:[消息370539184]\nonNext:[消息370541185, 消息370543204]\nonNext:[消息370545204]\nonNext:[消息370547204, 消息370549204]\nonNext:[消息370551204]\n\n```\n\n","slug":"RxJava探究（三）-RxJava操作符之Transforming-Observables","published":1,"updated":"2017-02-22T04:11:47.000Z","_id":"cizgem1rc0008klc1hj72pfi7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Transform类操作符，可以转换由一个Observable对象发出的对象。</p>\n<h2 id=\"Buffer\"><a href=\"#Buffer\" class=\"headerlink\" title=\"Buffer\"></a>Buffer</h2><p>顾名思义缓存的意思</p>\n<h3 id=\"Observable\"><a href=\"#Observable\" class=\"headerlink\" title=\"Observable\"></a>Observable<list<t>&gt; buffer(int count, int skip)</list<t></h3><p>每隔skip长度后，发出size为conut的Observable</p>\n<p><img src=\"http://reactivex.io/documentation/operators/images/buffer4.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>).buffer(<span class=\"number\">2</span>,<span class=\"number\">4</span>)</div><div class=\"line\">.subscribe(<span class=\"keyword\">new</span> Action1&lt;List&lt;Integer&gt;&gt;() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(List&lt;Integer&gt; i)</span> </span>&#123;</div><div class=\"line\">               System.out.println(<span class=\"string\">\"buffer \"</span> + i);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n<p>每隔4个数，输出一个长度为2的集合，输出为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">buffer [1, 2]</div><div class=\"line\">buffer [5, 6]</div><div class=\"line\">buffer [9]</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"Observable-1\"><a href=\"#Observable-1\" class=\"headerlink\" title=\"Observable\"></a>Observable<list<t>&gt; buffer(long timespan, TimeUnit unit)</list<t></h3><p>周期性的订阅<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.create(<span class=\"keyword\">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;  </div><div class=\"line\">           <span class=\"meta\">@Override</span>  </div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> String&gt; subscriber)</span> </span>&#123;  </div><div class=\"line\">               <span class=\"keyword\">if</span> (subscriber.isUnsubscribed()) <span class=\"keyword\">return</span>;  </div><div class=\"line\">               <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;  </div><div class=\"line\">                   subscriber.onNext(<span class=\"string\">\"消息\"</span> + SystemClock.elapsedRealtime());  </div><div class=\"line\">                   SystemClock.sleep(<span class=\"number\">2000</span>);<span class=\"comment\">//每隔2s发送消息  </span></div><div class=\"line\">               &#125;  </div><div class=\"line\">  </div><div class=\"line\">           &#125;  </div><div class=\"line\">       &#125;).subscribeOn(Schedulers.io()).  </div><div class=\"line\">               buffer(<span class=\"number\">3</span>, TimeUnit.SECONDS).<span class=\"comment\">//每隔3秒 取出消息  </span></div><div class=\"line\">               subscribe(<span class=\"keyword\">new</span> Observer&lt;List&lt;String&gt;&gt;() &#123;  </div><div class=\"line\">           <span class=\"meta\">@Override</span>  </div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">               LogUtils.d(<span class=\"string\">\"-----------------onCompleted:\"</span>);  </div><div class=\"line\">           &#125;  </div><div class=\"line\">  </div><div class=\"line\">           <span class=\"meta\">@Override</span>  </div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;  </div><div class=\"line\">               LogUtils.d(<span class=\"string\">\"-----------------&gt;onError:\"</span>);  </div><div class=\"line\">           &#125;  </div><div class=\"line\">  </div><div class=\"line\">           <span class=\"meta\">@Override</span>  </div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(List&lt;String&gt; strings)</span> </span>&#123;  </div><div class=\"line\">               LogUtils.d(<span class=\"string\">\"-----------------&gt;onNext:\"</span> + strings);  </div><div class=\"line\">           &#125;  </div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure></p>\n<p>程序输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">onNext:[消息370507667, 消息370509668]</div><div class=\"line\">onNext:[消息370511668]</div><div class=\"line\">onNext:[消息370513669, 消息370515669]</div><div class=\"line\">onNext:[消息370529168, 消息370531172]</div><div class=\"line\">onNext:[消息370533184]</div><div class=\"line\">onNext:[消息370535184, 消息370537184]</div><div class=\"line\">onNext:[消息370539184]</div><div class=\"line\">onNext:[消息370541185, 消息370543204]</div><div class=\"line\">onNext:[消息370545204]</div><div class=\"line\">onNext:[消息370547204, 消息370549204]</div><div class=\"line\">onNext:[消息370551204]</div></pre></td></tr></table></figure>\n","excerpt":"<p>Transform类操作符，可以转换由一个Observable对象发出的对象。</p>\n<h2 id=\"Buffer\"><a href=\"#Buffer\" class=\"headerlink\" title=\"Buffer\"></a>Buffer</h2><p>顾名思义缓存的意思</p>\n<h3 id=\"Observable\"><a href=\"#Observable\" class=\"headerlink\" title=\"Observable\"></a>Observable<List<T>&gt; buffer(int count, int skip)</h3><p>每隔skip长度后，发出size为conut的Observable</p>\n<p><img src=\"http://reactivex.io/documentation/operators/images/buffer4.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>).buffer(<span class=\"number\">2</span>,<span class=\"number\">4</span>)</div><div class=\"line\">.subscribe(<span class=\"keyword\">new</span> Action1&lt;List&lt;Integer&gt;&gt;() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(List&lt;Integer&gt; i)</span> </span>&#123;</div><div class=\"line\">               System.out.println(<span class=\"string\">\"buffer \"</span> + i);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n<p>每隔4个数，输出一个长度为2的集合，输出为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">buffer [1, 2]</div><div class=\"line\">buffer [5, 6]</div><div class=\"line\">buffer [9]</div></pre></td></tr></table></figure></p>","more":"<h3 id=\"Observable-1\"><a href=\"#Observable-1\" class=\"headerlink\" title=\"Observable\"></a>Observable<List<T>&gt; buffer(long timespan, TimeUnit unit)</h3><p>周期性的订阅<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.create(<span class=\"keyword\">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;  </div><div class=\"line\">           <span class=\"meta\">@Override</span>  </div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> String&gt; subscriber)</span> </span>&#123;  </div><div class=\"line\">               <span class=\"keyword\">if</span> (subscriber.isUnsubscribed()) <span class=\"keyword\">return</span>;  </div><div class=\"line\">               <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;  </div><div class=\"line\">                   subscriber.onNext(<span class=\"string\">\"消息\"</span> + SystemClock.elapsedRealtime());  </div><div class=\"line\">                   SystemClock.sleep(<span class=\"number\">2000</span>);<span class=\"comment\">//每隔2s发送消息  </span></div><div class=\"line\">               &#125;  </div><div class=\"line\">  </div><div class=\"line\">           &#125;  </div><div class=\"line\">       &#125;).subscribeOn(Schedulers.io()).  </div><div class=\"line\">               buffer(<span class=\"number\">3</span>, TimeUnit.SECONDS).<span class=\"comment\">//每隔3秒 取出消息  </span></div><div class=\"line\">               subscribe(<span class=\"keyword\">new</span> Observer&lt;List&lt;String&gt;&gt;() &#123;  </div><div class=\"line\">           <span class=\"meta\">@Override</span>  </div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">               LogUtils.d(<span class=\"string\">\"-----------------onCompleted:\"</span>);  </div><div class=\"line\">           &#125;  </div><div class=\"line\">  </div><div class=\"line\">           <span class=\"meta\">@Override</span>  </div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;  </div><div class=\"line\">               LogUtils.d(<span class=\"string\">\"-----------------&gt;onError:\"</span>);  </div><div class=\"line\">           &#125;  </div><div class=\"line\">  </div><div class=\"line\">           <span class=\"meta\">@Override</span>  </div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(List&lt;String&gt; strings)</span> </span>&#123;  </div><div class=\"line\">               LogUtils.d(<span class=\"string\">\"-----------------&gt;onNext:\"</span> + strings);  </div><div class=\"line\">           &#125;  </div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure></p>\n<p>程序输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">onNext:[消息370507667, 消息370509668]</div><div class=\"line\">onNext:[消息370511668]</div><div class=\"line\">onNext:[消息370513669, 消息370515669]</div><div class=\"line\">onNext:[消息370529168, 消息370531172]</div><div class=\"line\">onNext:[消息370533184]</div><div class=\"line\">onNext:[消息370535184, 消息370537184]</div><div class=\"line\">onNext:[消息370539184]</div><div class=\"line\">onNext:[消息370541185, 消息370543204]</div><div class=\"line\">onNext:[消息370545204]</div><div class=\"line\">onNext:[消息370547204, 消息370549204]</div><div class=\"line\">onNext:[消息370551204]</div></pre></td></tr></table></figure>"},{"title":"Android自定义控件之旅（一）滑动开关","date":"2015-12-28T01:33:42.000Z","_content":"\n\n\n我们的开关可以单击，可以滑动,效果如下图 \n\n![这里写图片描述](http://img.blog.csdn.net/20150407233434779)\n\n 我们写自定义控件时，一般分为下面几步：\n \n   1. 自定义View属性。\n   2. 在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值。\n   3. 重写onMeasure()方法。有时也可以不用重写。\n   4. 重写onDraw()方法。\n\n\n## 一、自定义View属性##\n1、在values下创建attrs.xml资源文件\n\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <resources>\n    <attr name=\"btnBackground\" format=\"reference\" />\n    <attr name=\"btnSwitch\" format=\"reference\" />\n    <attr name=\"switchState\" format=\"boolean\" />\n    <declare-styleable name=\"CustomSwitchButton\">\n        <attr name=\"btnBackground\" />\n        <attr name=\"btnSwitch\" />\n        <attr name=\"switchState\" />\n    </declare-styleable>\n    </resources>\n\n**format**指定了该属性的取值类型，有string,color,demension,integer,enum,reference,float,boolean,fraction,flag;\n**declare-styleable** 就是我们要自定义控件的属性,name取值必须是自定义控件的类名\n    \n<!--more-->\n## 二、在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值\n### 1、在布局文件中指定自定义属性的取值\n在layout下创建main_activity.xml\n\n\t<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:switchBtn=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <com.zhy.customswitchbutton.CustomSwitchButton\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_centerInParent=\"true\"\n        switchBtn:btnBackground=\"@mipmap/switch_background\"\n        switchBtn:btnSwitch=\"@mipmap/switch_button\"\n        switchBtn:switchState=\"true\" />\n    </RelativeLayout>\n\n其中**xmlns:switchBtn=\"http://schemas.android.com/apk/res-auto\"**指定命名空间\n命名空间的格式为\nAndroid Stutio中 **xmlns:前缀=\"http://schemas.android.com/apk/res/res-auto\"**\neclipse中 **xmlns:前缀=\"http://schemas.android.com/apk/res/app包名\"**\n为自定义属性赋值\n\n    switchBtn:btnBackground=\"@mipmap/switch_background\"\n    switchBtn:btnSwitch=\"@mipmap/switch_button\"\n    switchBtn:switchState=\"true\" />\n### 2、在View的构造方法中获取自定义属性的取值\n    public class CustomSwitchButton extends View {\n    private Bitmap btnBackground;\n    private Bitmap btnSwitch;\n    private boolean switchState;\n\n    /**\n     * 画笔对象\n     */\n    private Paint paint;\n\n    /**\n     * 滑动的距离\n     */\n    private float offset;\n    /**\n     * 是否发生拖动\n     */\n    private boolean isDrag = false;\n\n\n    /**\n     * 代码中new出来的，执行此构造方法\n     * @param context\n     */\n    public CustomSwitchButton(Context context) {\n        this(context, null);\n    }\n    /**\n     * xml中使用时，系统会调用此构造方法\n     * @param context\n     * @param attrs\n     */\n    public CustomSwitchButton(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n     /**\n     * xml中使用时，系统会调用此构造方法\n     * @param context\n     * @param attrs\n     */\n    public CustomSwitchButton(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        initView(context, attrs);\n    }\n\n    private void initView(Context context, AttributeSet attrs) {\n\n        paint = new Paint();\n        paint.setAntiAlias(true);//设置坑锯齿\n\n\t\t /**\n         * 获取各个属性的值 \n         */\n        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.CustomSwitchButton);\n        btnBackground = BitmapFactory.decodeResource(getResources(),\n                ta.getResourceId(R.styleable.CustomSwitchButton_btnBackground, 0));\n        btnSwitch = BitmapFactory.decodeResource(getResources(),\n                ta.getResourceId(R.styleable.CustomSwitchButton_btnSwitch, 0));\n        switchState = ta.getBoolean(R.styleable.CustomSwitchButton_switchState, false);\n    }\n    }\n\n## 三、重写onMeasure()方法,有时也可以不用重写\n\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension(btnBackground.getWidth(), btnBackground.getHeight());\n    }\n\n我们的开关很简单，宽高值就是背景图片的大小\n\n##  四、重写onDraw()方法\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        /**\n         * 绘制背景\n         *Bitmap bitmap 要绘制的图像\n         *float left 左边距\n         *float top  上边距\n         *Paint paint 画笔对象\n         */\n        canvas.drawBitmap(btnBackground, 0, 0, paint);\n        /**\n         * 绘制开关\n         */\n        canvas.drawBitmap(btnSwitch, offset, 0, paint);\n    }\n\n其中 **offset** 指的是距离左边的偏移距离，是动态变化的\n\n单击事件，\n\n    @Override\n    public void onClick(View v) {\n\t\t//拖动时，防止和onTouch冲突\n        if (!isDrag) {\n            switchState = !switchState;\n            changeState();\n        }\n\n    }\n\n    private void changeState() {\n        offset = switchState ? btnBackground.getWidth() - btnSwitch.getWidth() : 0;\n        //重绘制界面\n        invalidate();\n    }\n\n拖动事件\n\n\t/**\n     * down 事件时的X坐标\n     */\n    private float firstX;\n    /**\n     * up 事件时上次的X坐标\n     */\n    private float lastX;\n\n    /**\n     * 重写onTouchEvent实现滑动效果\n     *\n     * @param event\n     * @return\n     */\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        super.onTouchEvent(event);\n        float curX = event.getX();\n        switch (event.getAction()) {\n\n            case MotionEvent.ACTION_DOWN:\n                isDrag = false;\n                firstX = lastX = curX;\n                break;\n            case MotionEvent.ACTION_MOVE:\n                //判定是否进行了滑动\n                if (Math.abs(lastX - firstX) > 5) {\n                    isDrag = true;\n                }\n                float dis = curX - lastX;\n                offset += dis;\n                lastX = curX;\n                break;\n            case MotionEvent.ACTION_UP:\n                //未滑完时，判定最终的开关状态\n                if (isDrag) {\n                    //能滑动的最大距离\n                    float maxDis = btnBackground.getWidth() - btnSwitch.getWidth();\n                    switchState = offset > maxDis / 2 ? true : false;\n                    changeState();\n                }\n                break;\n        }\n\n        refreshView();\n        return true;\n    }\n\n    /**\n     * 刷新界面\n     */\n    private void refreshView() {\n        //判断是否已经超出边界\n        float maxDis = btnBackground.getWidth() - btnSwitch.getWidth();\n        offset = offset < 0 ? 0 : offset;\n        offset = offset > maxDis ? maxDis : offset;\n        invalidate();\n    }\n\n\n[**下载源码**](https://github.com/zhy060307/CustomSwitchButton)\n   \n\n\n\n","source":"_posts/Android自定义控件之旅（一）滑动开关.md","raw":"title: Android自定义控件之旅（一）滑动开关\ndate: 2015-12-28 09:33:42\ncategories: Android开发\ntags: Android自定义控件\n---\n\n\n\n我们的开关可以单击，可以滑动,效果如下图 \n\n![这里写图片描述](http://img.blog.csdn.net/20150407233434779)\n\n 我们写自定义控件时，一般分为下面几步：\n \n   1. 自定义View属性。\n   2. 在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值。\n   3. 重写onMeasure()方法。有时也可以不用重写。\n   4. 重写onDraw()方法。\n\n\n## 一、自定义View属性##\n1、在values下创建attrs.xml资源文件\n\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <resources>\n    <attr name=\"btnBackground\" format=\"reference\" />\n    <attr name=\"btnSwitch\" format=\"reference\" />\n    <attr name=\"switchState\" format=\"boolean\" />\n    <declare-styleable name=\"CustomSwitchButton\">\n        <attr name=\"btnBackground\" />\n        <attr name=\"btnSwitch\" />\n        <attr name=\"switchState\" />\n    </declare-styleable>\n    </resources>\n\n**format**指定了该属性的取值类型，有string,color,demension,integer,enum,reference,float,boolean,fraction,flag;\n**declare-styleable** 就是我们要自定义控件的属性,name取值必须是自定义控件的类名\n    \n<!--more-->\n## 二、在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值\n### 1、在布局文件中指定自定义属性的取值\n在layout下创建main_activity.xml\n\n\t<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:switchBtn=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <com.zhy.customswitchbutton.CustomSwitchButton\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_centerInParent=\"true\"\n        switchBtn:btnBackground=\"@mipmap/switch_background\"\n        switchBtn:btnSwitch=\"@mipmap/switch_button\"\n        switchBtn:switchState=\"true\" />\n    </RelativeLayout>\n\n其中**xmlns:switchBtn=\"http://schemas.android.com/apk/res-auto\"**指定命名空间\n命名空间的格式为\nAndroid Stutio中 **xmlns:前缀=\"http://schemas.android.com/apk/res/res-auto\"**\neclipse中 **xmlns:前缀=\"http://schemas.android.com/apk/res/app包名\"**\n为自定义属性赋值\n\n    switchBtn:btnBackground=\"@mipmap/switch_background\"\n    switchBtn:btnSwitch=\"@mipmap/switch_button\"\n    switchBtn:switchState=\"true\" />\n### 2、在View的构造方法中获取自定义属性的取值\n    public class CustomSwitchButton extends View {\n    private Bitmap btnBackground;\n    private Bitmap btnSwitch;\n    private boolean switchState;\n\n    /**\n     * 画笔对象\n     */\n    private Paint paint;\n\n    /**\n     * 滑动的距离\n     */\n    private float offset;\n    /**\n     * 是否发生拖动\n     */\n    private boolean isDrag = false;\n\n\n    /**\n     * 代码中new出来的，执行此构造方法\n     * @param context\n     */\n    public CustomSwitchButton(Context context) {\n        this(context, null);\n    }\n    /**\n     * xml中使用时，系统会调用此构造方法\n     * @param context\n     * @param attrs\n     */\n    public CustomSwitchButton(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n     /**\n     * xml中使用时，系统会调用此构造方法\n     * @param context\n     * @param attrs\n     */\n    public CustomSwitchButton(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        initView(context, attrs);\n    }\n\n    private void initView(Context context, AttributeSet attrs) {\n\n        paint = new Paint();\n        paint.setAntiAlias(true);//设置坑锯齿\n\n\t\t /**\n         * 获取各个属性的值 \n         */\n        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.CustomSwitchButton);\n        btnBackground = BitmapFactory.decodeResource(getResources(),\n                ta.getResourceId(R.styleable.CustomSwitchButton_btnBackground, 0));\n        btnSwitch = BitmapFactory.decodeResource(getResources(),\n                ta.getResourceId(R.styleable.CustomSwitchButton_btnSwitch, 0));\n        switchState = ta.getBoolean(R.styleable.CustomSwitchButton_switchState, false);\n    }\n    }\n\n## 三、重写onMeasure()方法,有时也可以不用重写\n\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension(btnBackground.getWidth(), btnBackground.getHeight());\n    }\n\n我们的开关很简单，宽高值就是背景图片的大小\n\n##  四、重写onDraw()方法\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        /**\n         * 绘制背景\n         *Bitmap bitmap 要绘制的图像\n         *float left 左边距\n         *float top  上边距\n         *Paint paint 画笔对象\n         */\n        canvas.drawBitmap(btnBackground, 0, 0, paint);\n        /**\n         * 绘制开关\n         */\n        canvas.drawBitmap(btnSwitch, offset, 0, paint);\n    }\n\n其中 **offset** 指的是距离左边的偏移距离，是动态变化的\n\n单击事件，\n\n    @Override\n    public void onClick(View v) {\n\t\t//拖动时，防止和onTouch冲突\n        if (!isDrag) {\n            switchState = !switchState;\n            changeState();\n        }\n\n    }\n\n    private void changeState() {\n        offset = switchState ? btnBackground.getWidth() - btnSwitch.getWidth() : 0;\n        //重绘制界面\n        invalidate();\n    }\n\n拖动事件\n\n\t/**\n     * down 事件时的X坐标\n     */\n    private float firstX;\n    /**\n     * up 事件时上次的X坐标\n     */\n    private float lastX;\n\n    /**\n     * 重写onTouchEvent实现滑动效果\n     *\n     * @param event\n     * @return\n     */\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        super.onTouchEvent(event);\n        float curX = event.getX();\n        switch (event.getAction()) {\n\n            case MotionEvent.ACTION_DOWN:\n                isDrag = false;\n                firstX = lastX = curX;\n                break;\n            case MotionEvent.ACTION_MOVE:\n                //判定是否进行了滑动\n                if (Math.abs(lastX - firstX) > 5) {\n                    isDrag = true;\n                }\n                float dis = curX - lastX;\n                offset += dis;\n                lastX = curX;\n                break;\n            case MotionEvent.ACTION_UP:\n                //未滑完时，判定最终的开关状态\n                if (isDrag) {\n                    //能滑动的最大距离\n                    float maxDis = btnBackground.getWidth() - btnSwitch.getWidth();\n                    switchState = offset > maxDis / 2 ? true : false;\n                    changeState();\n                }\n                break;\n        }\n\n        refreshView();\n        return true;\n    }\n\n    /**\n     * 刷新界面\n     */\n    private void refreshView() {\n        //判断是否已经超出边界\n        float maxDis = btnBackground.getWidth() - btnSwitch.getWidth();\n        offset = offset < 0 ? 0 : offset;\n        offset = offset > maxDis ? maxDis : offset;\n        invalidate();\n    }\n\n\n[**下载源码**](https://github.com/zhy060307/CustomSwitchButton)\n   \n\n\n\n","slug":"Android自定义控件之旅（一）滑动开关","published":1,"updated":"2016-07-02T01:37:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgem1rg0009klc16z3cba3r","content":"<p>我们的开关可以单击，可以滑动,效果如下图 </p>\n<p><img src=\"http://img.blog.csdn.net/20150407233434779\" alt=\"这里写图片描述\"></p>\n<p> 我们写自定义控件时，一般分为下面几步：</p>\n<ol>\n<li>自定义View属性。</li>\n<li>在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值。</li>\n<li>重写onMeasure()方法。有时也可以不用重写。</li>\n<li>重写onDraw()方法。</li>\n</ol>\n<h2 id=\"一、自定义View属性\"><a href=\"#一、自定义View属性\" class=\"headerlink\" title=\"一、自定义View属性\"></a>一、自定义View属性</h2><p>1、在values下创建attrs.xml资源文件</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;resources&gt;\n&lt;attr name=&quot;btnBackground&quot; format=&quot;reference&quot; /&gt;\n&lt;attr name=&quot;btnSwitch&quot; format=&quot;reference&quot; /&gt;\n&lt;attr name=&quot;switchState&quot; format=&quot;boolean&quot; /&gt;\n&lt;declare-styleable name=&quot;CustomSwitchButton&quot;&gt;\n    &lt;attr name=&quot;btnBackground&quot; /&gt;\n    &lt;attr name=&quot;btnSwitch&quot; /&gt;\n    &lt;attr name=&quot;switchState&quot; /&gt;\n&lt;/declare-styleable&gt;\n&lt;/resources&gt;\n</code></pre><p><strong>format</strong>指定了该属性的取值类型，有string,color,demension,integer,enum,reference,float,boolean,fraction,flag;<br><strong>declare-styleable</strong> 就是我们要自定义控件的属性,name取值必须是自定义控件的类名</p>\n<a id=\"more\"></a>\n<h2 id=\"二、在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值\"><a href=\"#二、在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值\" class=\"headerlink\" title=\"二、在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值\"></a>二、在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值</h2><h3 id=\"1、在布局文件中指定自定义属性的取值\"><a href=\"#1、在布局文件中指定自定义属性的取值\" class=\"headerlink\" title=\"1、在布局文件中指定自定义属性的取值\"></a>1、在布局文件中指定自定义属性的取值</h3><p>在layout下创建main_activity.xml</p>\n<pre><code>&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\nxmlns:tools=&quot;http://schemas.android.com/tools&quot;\nxmlns:switchBtn=&quot;http://schemas.android.com/apk/res-auto&quot;\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;match_parent&quot;&gt;\n\n&lt;com.zhy.customswitchbutton.CustomSwitchButton\n    android:layout_width=&quot;wrap_content&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    android:layout_centerInParent=&quot;true&quot;\n    switchBtn:btnBackground=&quot;@mipmap/switch_background&quot;\n    switchBtn:btnSwitch=&quot;@mipmap/switch_button&quot;\n    switchBtn:switchState=&quot;true&quot; /&gt;\n&lt;/RelativeLayout&gt;\n</code></pre><p>其中<strong>xmlns:switchBtn=”<a href=\"http://schemas.android.com/apk/res-auto\" target=\"_blank\" rel=\"external\">http://schemas.android.com/apk/res-auto</a>“</strong>指定命名空间<br>命名空间的格式为<br>Android Stutio中 <strong>xmlns:前缀=”<a href=\"http://schemas.android.com/apk/res/res-auto\" target=\"_blank\" rel=\"external\">http://schemas.android.com/apk/res/res-auto</a>“</strong><br>eclipse中 <strong>xmlns:前缀=”<a href=\"http://schemas.android.com/apk/res/app包名\" target=\"_blank\" rel=\"external\">http://schemas.android.com/apk/res/app包名</a>“</strong><br>为自定义属性赋值</p>\n<pre><code>switchBtn:btnBackground=&quot;@mipmap/switch_background&quot;\nswitchBtn:btnSwitch=&quot;@mipmap/switch_button&quot;\nswitchBtn:switchState=&quot;true&quot; /&gt;\n</code></pre><h3 id=\"2、在View的构造方法中获取自定义属性的取值\"><a href=\"#2、在View的构造方法中获取自定义属性的取值\" class=\"headerlink\" title=\"2、在View的构造方法中获取自定义属性的取值\"></a>2、在View的构造方法中获取自定义属性的取值</h3><pre><code>public class CustomSwitchButton extends View {\nprivate Bitmap btnBackground;\nprivate Bitmap btnSwitch;\nprivate boolean switchState;\n\n/**\n * 画笔对象\n */\nprivate Paint paint;\n\n/**\n * 滑动的距离\n */\nprivate float offset;\n/**\n * 是否发生拖动\n */\nprivate boolean isDrag = false;\n\n\n/**\n * 代码中new出来的，执行此构造方法\n * @param context\n */\npublic CustomSwitchButton(Context context) {\n    this(context, null);\n}\n/**\n * xml中使用时，系统会调用此构造方法\n * @param context\n * @param attrs\n */\npublic CustomSwitchButton(Context context, AttributeSet attrs) {\n    this(context, attrs, 0);\n}\n\n /**\n * xml中使用时，系统会调用此构造方法\n * @param context\n * @param attrs\n */\npublic CustomSwitchButton(Context context, AttributeSet attrs, int defStyleAttr) {\n    super(context, attrs, defStyleAttr);\n    initView(context, attrs);\n}\n\nprivate void initView(Context context, AttributeSet attrs) {\n\n    paint = new Paint();\n    paint.setAntiAlias(true);//设置坑锯齿\n\n     /**\n     * 获取各个属性的值 \n     */\n    TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.CustomSwitchButton);\n    btnBackground = BitmapFactory.decodeResource(getResources(),\n            ta.getResourceId(R.styleable.CustomSwitchButton_btnBackground, 0));\n    btnSwitch = BitmapFactory.decodeResource(getResources(),\n            ta.getResourceId(R.styleable.CustomSwitchButton_btnSwitch, 0));\n    switchState = ta.getBoolean(R.styleable.CustomSwitchButton_switchState, false);\n}\n}\n</code></pre><h2 id=\"三、重写onMeasure-方法-有时也可以不用重写\"><a href=\"#三、重写onMeasure-方法-有时也可以不用重写\" class=\"headerlink\" title=\"三、重写onMeasure()方法,有时也可以不用重写\"></a>三、重写onMeasure()方法,有时也可以不用重写</h2><pre><code>@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n    setMeasuredDimension(btnBackground.getWidth(), btnBackground.getHeight());\n}\n</code></pre><p>我们的开关很简单，宽高值就是背景图片的大小</p>\n<h2 id=\"四、重写onDraw-方法\"><a href=\"#四、重写onDraw-方法\" class=\"headerlink\" title=\"四、重写onDraw()方法\"></a>四、重写onDraw()方法</h2><pre><code>@Override\nprotected void onDraw(Canvas canvas) {\n    /**\n     * 绘制背景\n     *Bitmap bitmap 要绘制的图像\n     *float left 左边距\n     *float top  上边距\n     *Paint paint 画笔对象\n     */\n    canvas.drawBitmap(btnBackground, 0, 0, paint);\n    /**\n     * 绘制开关\n     */\n    canvas.drawBitmap(btnSwitch, offset, 0, paint);\n}\n</code></pre><p>其中 <strong>offset</strong> 指的是距离左边的偏移距离，是动态变化的</p>\n<p>单击事件，</p>\n<pre><code>@Override\npublic void onClick(View v) {\n    //拖动时，防止和onTouch冲突\n    if (!isDrag) {\n        switchState = !switchState;\n        changeState();\n    }\n\n}\n\nprivate void changeState() {\n    offset = switchState ? btnBackground.getWidth() - btnSwitch.getWidth() : 0;\n    //重绘制界面\n    invalidate();\n}\n</code></pre><p>拖动事件</p>\n<pre><code>/**\n * down 事件时的X坐标\n */\nprivate float firstX;\n/**\n * up 事件时上次的X坐标\n */\nprivate float lastX;\n\n/**\n * 重写onTouchEvent实现滑动效果\n *\n * @param event\n * @return\n */\n@Override\npublic boolean onTouchEvent(MotionEvent event) {\n    super.onTouchEvent(event);\n    float curX = event.getX();\n    switch (event.getAction()) {\n\n        case MotionEvent.ACTION_DOWN:\n            isDrag = false;\n            firstX = lastX = curX;\n            break;\n        case MotionEvent.ACTION_MOVE:\n            //判定是否进行了滑动\n            if (Math.abs(lastX - firstX) &gt; 5) {\n                isDrag = true;\n            }\n            float dis = curX - lastX;\n            offset += dis;\n            lastX = curX;\n            break;\n        case MotionEvent.ACTION_UP:\n            //未滑完时，判定最终的开关状态\n            if (isDrag) {\n                //能滑动的最大距离\n                float maxDis = btnBackground.getWidth() - btnSwitch.getWidth();\n                switchState = offset &gt; maxDis / 2 ? true : false;\n                changeState();\n            }\n            break;\n    }\n\n    refreshView();\n    return true;\n}\n\n/**\n * 刷新界面\n */\nprivate void refreshView() {\n    //判断是否已经超出边界\n    float maxDis = btnBackground.getWidth() - btnSwitch.getWidth();\n    offset = offset &lt; 0 ? 0 : offset;\n    offset = offset &gt; maxDis ? maxDis : offset;\n    invalidate();\n}\n</code></pre><p><a href=\"https://github.com/zhy060307/CustomSwitchButton\" target=\"_blank\" rel=\"external\"><strong>下载源码</strong></a></p>\n","excerpt":"<p>我们的开关可以单击，可以滑动,效果如下图 </p>\n<p><img src=\"http://img.blog.csdn.net/20150407233434779\" alt=\"这里写图片描述\"></p>\n<p> 我们写自定义控件时，一般分为下面几步：</p>\n<ol>\n<li>自定义View属性。</li>\n<li>在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值。</li>\n<li>重写onMeasure()方法。有时也可以不用重写。</li>\n<li>重写onDraw()方法。</li>\n</ol>\n<h2 id=\"一、自定义View属性\"><a href=\"#一、自定义View属性\" class=\"headerlink\" title=\"一、自定义View属性\"></a>一、自定义View属性</h2><p>1、在values下创建attrs.xml资源文件</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;resources&gt;\n&lt;attr name=&quot;btnBackground&quot; format=&quot;reference&quot; /&gt;\n&lt;attr name=&quot;btnSwitch&quot; format=&quot;reference&quot; /&gt;\n&lt;attr name=&quot;switchState&quot; format=&quot;boolean&quot; /&gt;\n&lt;declare-styleable name=&quot;CustomSwitchButton&quot;&gt;\n    &lt;attr name=&quot;btnBackground&quot; /&gt;\n    &lt;attr name=&quot;btnSwitch&quot; /&gt;\n    &lt;attr name=&quot;switchState&quot; /&gt;\n&lt;/declare-styleable&gt;\n&lt;/resources&gt;\n</code></pre><p><strong>format</strong>指定了该属性的取值类型，有string,color,demension,integer,enum,reference,float,boolean,fraction,flag;<br><strong>declare-styleable</strong> 就是我们要自定义控件的属性,name取值必须是自定义控件的类名</p>","more":"<h2 id=\"二、在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值\"><a href=\"#二、在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值\" class=\"headerlink\" title=\"二、在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值\"></a>二、在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值</h2><h3 id=\"1、在布局文件中指定自定义属性的取值\"><a href=\"#1、在布局文件中指定自定义属性的取值\" class=\"headerlink\" title=\"1、在布局文件中指定自定义属性的取值\"></a>1、在布局文件中指定自定义属性的取值</h3><p>在layout下创建main_activity.xml</p>\n<pre><code>&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\nxmlns:tools=&quot;http://schemas.android.com/tools&quot;\nxmlns:switchBtn=&quot;http://schemas.android.com/apk/res-auto&quot;\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;match_parent&quot;&gt;\n\n&lt;com.zhy.customswitchbutton.CustomSwitchButton\n    android:layout_width=&quot;wrap_content&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    android:layout_centerInParent=&quot;true&quot;\n    switchBtn:btnBackground=&quot;@mipmap/switch_background&quot;\n    switchBtn:btnSwitch=&quot;@mipmap/switch_button&quot;\n    switchBtn:switchState=&quot;true&quot; /&gt;\n&lt;/RelativeLayout&gt;\n</code></pre><p>其中<strong>xmlns:switchBtn=”<a href=\"http://schemas.android.com/apk/res-auto\">http://schemas.android.com/apk/res-auto</a>“</strong>指定命名空间<br>命名空间的格式为<br>Android Stutio中 <strong>xmlns:前缀=”<a href=\"http://schemas.android.com/apk/res/res-auto\">http://schemas.android.com/apk/res/res-auto</a>“</strong><br>eclipse中 <strong>xmlns:前缀=”<a href=\"http://schemas.android.com/apk/res/app包名\">http://schemas.android.com/apk/res/app包名</a>“</strong><br>为自定义属性赋值</p>\n<pre><code>switchBtn:btnBackground=&quot;@mipmap/switch_background&quot;\nswitchBtn:btnSwitch=&quot;@mipmap/switch_button&quot;\nswitchBtn:switchState=&quot;true&quot; /&gt;\n</code></pre><h3 id=\"2、在View的构造方法中获取自定义属性的取值\"><a href=\"#2、在View的构造方法中获取自定义属性的取值\" class=\"headerlink\" title=\"2、在View的构造方法中获取自定义属性的取值\"></a>2、在View的构造方法中获取自定义属性的取值</h3><pre><code>public class CustomSwitchButton extends View {\nprivate Bitmap btnBackground;\nprivate Bitmap btnSwitch;\nprivate boolean switchState;\n\n/**\n * 画笔对象\n */\nprivate Paint paint;\n\n/**\n * 滑动的距离\n */\nprivate float offset;\n/**\n * 是否发生拖动\n */\nprivate boolean isDrag = false;\n\n\n/**\n * 代码中new出来的，执行此构造方法\n * @param context\n */\npublic CustomSwitchButton(Context context) {\n    this(context, null);\n}\n/**\n * xml中使用时，系统会调用此构造方法\n * @param context\n * @param attrs\n */\npublic CustomSwitchButton(Context context, AttributeSet attrs) {\n    this(context, attrs, 0);\n}\n\n /**\n * xml中使用时，系统会调用此构造方法\n * @param context\n * @param attrs\n */\npublic CustomSwitchButton(Context context, AttributeSet attrs, int defStyleAttr) {\n    super(context, attrs, defStyleAttr);\n    initView(context, attrs);\n}\n\nprivate void initView(Context context, AttributeSet attrs) {\n\n    paint = new Paint();\n    paint.setAntiAlias(true);//设置坑锯齿\n\n     /**\n     * 获取各个属性的值 \n     */\n    TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.CustomSwitchButton);\n    btnBackground = BitmapFactory.decodeResource(getResources(),\n            ta.getResourceId(R.styleable.CustomSwitchButton_btnBackground, 0));\n    btnSwitch = BitmapFactory.decodeResource(getResources(),\n            ta.getResourceId(R.styleable.CustomSwitchButton_btnSwitch, 0));\n    switchState = ta.getBoolean(R.styleable.CustomSwitchButton_switchState, false);\n}\n}\n</code></pre><h2 id=\"三、重写onMeasure-方法-有时也可以不用重写\"><a href=\"#三、重写onMeasure-方法-有时也可以不用重写\" class=\"headerlink\" title=\"三、重写onMeasure()方法,有时也可以不用重写\"></a>三、重写onMeasure()方法,有时也可以不用重写</h2><pre><code>@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n    setMeasuredDimension(btnBackground.getWidth(), btnBackground.getHeight());\n}\n</code></pre><p>我们的开关很简单，宽高值就是背景图片的大小</p>\n<h2 id=\"四、重写onDraw-方法\"><a href=\"#四、重写onDraw-方法\" class=\"headerlink\" title=\"四、重写onDraw()方法\"></a>四、重写onDraw()方法</h2><pre><code>@Override\nprotected void onDraw(Canvas canvas) {\n    /**\n     * 绘制背景\n     *Bitmap bitmap 要绘制的图像\n     *float left 左边距\n     *float top  上边距\n     *Paint paint 画笔对象\n     */\n    canvas.drawBitmap(btnBackground, 0, 0, paint);\n    /**\n     * 绘制开关\n     */\n    canvas.drawBitmap(btnSwitch, offset, 0, paint);\n}\n</code></pre><p>其中 <strong>offset</strong> 指的是距离左边的偏移距离，是动态变化的</p>\n<p>单击事件，</p>\n<pre><code>@Override\npublic void onClick(View v) {\n    //拖动时，防止和onTouch冲突\n    if (!isDrag) {\n        switchState = !switchState;\n        changeState();\n    }\n\n}\n\nprivate void changeState() {\n    offset = switchState ? btnBackground.getWidth() - btnSwitch.getWidth() : 0;\n    //重绘制界面\n    invalidate();\n}\n</code></pre><p>拖动事件</p>\n<pre><code>/**\n * down 事件时的X坐标\n */\nprivate float firstX;\n/**\n * up 事件时上次的X坐标\n */\nprivate float lastX;\n\n/**\n * 重写onTouchEvent实现滑动效果\n *\n * @param event\n * @return\n */\n@Override\npublic boolean onTouchEvent(MotionEvent event) {\n    super.onTouchEvent(event);\n    float curX = event.getX();\n    switch (event.getAction()) {\n\n        case MotionEvent.ACTION_DOWN:\n            isDrag = false;\n            firstX = lastX = curX;\n            break;\n        case MotionEvent.ACTION_MOVE:\n            //判定是否进行了滑动\n            if (Math.abs(lastX - firstX) &gt; 5) {\n                isDrag = true;\n            }\n            float dis = curX - lastX;\n            offset += dis;\n            lastX = curX;\n            break;\n        case MotionEvent.ACTION_UP:\n            //未滑完时，判定最终的开关状态\n            if (isDrag) {\n                //能滑动的最大距离\n                float maxDis = btnBackground.getWidth() - btnSwitch.getWidth();\n                switchState = offset &gt; maxDis / 2 ? true : false;\n                changeState();\n            }\n            break;\n    }\n\n    refreshView();\n    return true;\n}\n\n/**\n * 刷新界面\n */\nprivate void refreshView() {\n    //判断是否已经超出边界\n    float maxDis = btnBackground.getWidth() - btnSwitch.getWidth();\n    offset = offset &lt; 0 ? 0 : offset;\n    offset = offset &gt; maxDis ? maxDis : offset;\n    invalidate();\n}\n</code></pre><p><a href=\"https://github.com/zhy060307/CustomSwitchButton\"><strong>下载源码</strong></a></p>"},{"title":"RxJava探究（二） RxJava操作符之Creating Observables","date":"2016-07-02T04:44:59.000Z","_content":"\nRxJava的强大之处就是他提供非常丰富的操作符，超过上百种，这些操作符给我们解决问题带来很多方便。本文主要讲解创建Observale对象一类的操作符，参照官方文档 <http://reactivex.io/documentation/operators.html#creating>。\n\n### Create\nObservable.create()方法用于创建一个Observale对象，该方法接收一个Observer观察者对象。\n\n![](http://reactivex.io/documentation/operators/images/create.c.png)\n\n```java\n\tObservable.create(new Observable.OnSubscribe<Integer>() {\n            @Override\n            public void call(Subscriber<? super Integer> subscriber) {\n                try {\n                    if (!subscriber.isUnsubscribed()) {\n                        for (int i = 1; i < 5; i++) {\n                            subscriber.onNext(i);\n                        }\n\n                        subscriber.onCompleted();\n                    }\n                } catch (Exception e) {\n\n                    subscriber.onError(e);\n                }\n            }\n        }).subscribe(new Subscriber<Integer>() {\n            @Override\n            public void onCompleted() {\n                System.out.println(\"completed !\");\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                System.out.println(\"onError \" + e.getMessage());\n            }\n\n            @Override\n            public void onNext(Integer item) {\n                System.out.println(\"Next \" + item);\n\n            }\n        });\n```\nsubscrible(subscriber)方法调用后会执行OnSubscribe对象的call(subscriber)方法，从而完成回调。\n打印结果如下：\n\n```java\nNext 1\nNext 2\nNext 3\nNext 4\ncompleted !\n```\n<!--more-->\n### Defer \n观察者订阅时创建被观察者对象，对于每个观察者都会创建一个新的被观察者对象,也就是说在观察者订阅之前不创建这个Observable，为每一个观察者创建一个新的Observable。\n\n![](http://reactivex.io/documentation/operators/images/defer.c.png)\n\n如下代码：\n\n```java\nclass SomeType {\n        private String value;\n\n        public void setValue(String value) {\n            this.value = value;\n        }\n\n        public Observable<String> valueObservable() {\n            return Observable.just(value);\n        }\n\n\n    }\n\n    @Test\n    public void defer_just() {\n\n        SomeType someType = new SomeType();\n        Observable<String> observable1 = someType.valueObservable();\n        someType.setValue(\"Some Value\");\n        observable1.subscribe(new Action1<String>() {\n            @Override\n            public void call(String value) {\n                System.out.println(value);\n            }\n        });\n    }\n```\n程序输出是\"Some Value\" 而不是null\n\n### Just\n\n   将某个对象转化为Observable对象，可以使一个数字、一个字符串、数组、Iterate对象等，是一种非常快捷的创建Observable对象的方法,和Defer比较相似\n   ![](http://reactivex.io/documentation/operators/images/just.c.png)\n   \n代码如下：\n```java\nclass SomeType {\n        private String value;\n\n        public void setValue(String value) {\n            this.value = value;\n        }\n\n        public Observable<String> valueObservableFromJust() {\n            return Observable.just(value);\n        }\n\n        public Observable<String> valueObservableFromDefer() {\n            return Observable.defer(new Func0<Observable<String>>() {\n                @Override\n                public Observable<String> call() {\n                    return Observable.just(value);\n                }\n            });\n        }\n    }\n\n    @Test\n    public void defer_just() {\n\n\n        SomeType someType = new SomeType();\n        Observable<String> observable1 = someType.valueObservableFromJust();\n        Observable<String> observable2 = someType.valueObservableFromDefer();\n        someType.setValue(\"Some Value\");\n        observable1.subscribe(new Action1<String>() {\n            @Override\n            public void call(String value) {\n                System.out.println(value);\n            }\n        });\n\n        observable2.subscribe(new Action1<String>() {\n            @Override\n            public void call(String value) {\n                System.out.println(value);\n            }\n        });\n\n    }\n```\n程序输出如下：\n```java\nnull\nSome Value\n```\n由此可知，just和订阅无关，创建时是什么状态订阅时也是什么状态。\n\n### From\n类似Just,可以把一个Future, Iterable或者Array类型转换为Observable对象。\n\n![](http://reactivex.io/documentation/operators/images/from.c.png)\n\n```java\n\n    @Test\n    public void from() {\n        Observable.from(Arrays.asList(1, 2, 3, 4, 5))\n                .subscribe(new Action1<Integer>() {\n                    @Override\n                    public void call(Integer item) {\n                        System.out.println(item);\n                    }\n                });\n\n\t\t//简化为\n        Observable.just(1, 2, 3, 4, 5).subscribe(new Action1<Integer>() {\n            @Override\n            public void call(Integer item) {\n                System.out.println(item);\n            }\n        });\n\n    }\n```\n输出结果为：\n```java\n1\n2\n3\n4\n5\n1\n2\n3\n4\n5\n```\n\n","source":"_posts/RxJava探索（二-RxJava操作符之Creating-Observables.md","raw":"title: RxJava探究（二） RxJava操作符之Creating Observables\ndate: 2016-07-02 12:44:59\ncategories: RxJava探究\ntags: Rxjava\n---\n\nRxJava的强大之处就是他提供非常丰富的操作符，超过上百种，这些操作符给我们解决问题带来很多方便。本文主要讲解创建Observale对象一类的操作符，参照官方文档 <http://reactivex.io/documentation/operators.html#creating>。\n\n### Create\nObservable.create()方法用于创建一个Observale对象，该方法接收一个Observer观察者对象。\n\n![](http://reactivex.io/documentation/operators/images/create.c.png)\n\n```java\n\tObservable.create(new Observable.OnSubscribe<Integer>() {\n            @Override\n            public void call(Subscriber<? super Integer> subscriber) {\n                try {\n                    if (!subscriber.isUnsubscribed()) {\n                        for (int i = 1; i < 5; i++) {\n                            subscriber.onNext(i);\n                        }\n\n                        subscriber.onCompleted();\n                    }\n                } catch (Exception e) {\n\n                    subscriber.onError(e);\n                }\n            }\n        }).subscribe(new Subscriber<Integer>() {\n            @Override\n            public void onCompleted() {\n                System.out.println(\"completed !\");\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                System.out.println(\"onError \" + e.getMessage());\n            }\n\n            @Override\n            public void onNext(Integer item) {\n                System.out.println(\"Next \" + item);\n\n            }\n        });\n```\nsubscrible(subscriber)方法调用后会执行OnSubscribe对象的call(subscriber)方法，从而完成回调。\n打印结果如下：\n\n```java\nNext 1\nNext 2\nNext 3\nNext 4\ncompleted !\n```\n<!--more-->\n### Defer \n观察者订阅时创建被观察者对象，对于每个观察者都会创建一个新的被观察者对象,也就是说在观察者订阅之前不创建这个Observable，为每一个观察者创建一个新的Observable。\n\n![](http://reactivex.io/documentation/operators/images/defer.c.png)\n\n如下代码：\n\n```java\nclass SomeType {\n        private String value;\n\n        public void setValue(String value) {\n            this.value = value;\n        }\n\n        public Observable<String> valueObservable() {\n            return Observable.just(value);\n        }\n\n\n    }\n\n    @Test\n    public void defer_just() {\n\n        SomeType someType = new SomeType();\n        Observable<String> observable1 = someType.valueObservable();\n        someType.setValue(\"Some Value\");\n        observable1.subscribe(new Action1<String>() {\n            @Override\n            public void call(String value) {\n                System.out.println(value);\n            }\n        });\n    }\n```\n程序输出是\"Some Value\" 而不是null\n\n### Just\n\n   将某个对象转化为Observable对象，可以使一个数字、一个字符串、数组、Iterate对象等，是一种非常快捷的创建Observable对象的方法,和Defer比较相似\n   ![](http://reactivex.io/documentation/operators/images/just.c.png)\n   \n代码如下：\n```java\nclass SomeType {\n        private String value;\n\n        public void setValue(String value) {\n            this.value = value;\n        }\n\n        public Observable<String> valueObservableFromJust() {\n            return Observable.just(value);\n        }\n\n        public Observable<String> valueObservableFromDefer() {\n            return Observable.defer(new Func0<Observable<String>>() {\n                @Override\n                public Observable<String> call() {\n                    return Observable.just(value);\n                }\n            });\n        }\n    }\n\n    @Test\n    public void defer_just() {\n\n\n        SomeType someType = new SomeType();\n        Observable<String> observable1 = someType.valueObservableFromJust();\n        Observable<String> observable2 = someType.valueObservableFromDefer();\n        someType.setValue(\"Some Value\");\n        observable1.subscribe(new Action1<String>() {\n            @Override\n            public void call(String value) {\n                System.out.println(value);\n            }\n        });\n\n        observable2.subscribe(new Action1<String>() {\n            @Override\n            public void call(String value) {\n                System.out.println(value);\n            }\n        });\n\n    }\n```\n程序输出如下：\n```java\nnull\nSome Value\n```\n由此可知，just和订阅无关，创建时是什么状态订阅时也是什么状态。\n\n### From\n类似Just,可以把一个Future, Iterable或者Array类型转换为Observable对象。\n\n![](http://reactivex.io/documentation/operators/images/from.c.png)\n\n```java\n\n    @Test\n    public void from() {\n        Observable.from(Arrays.asList(1, 2, 3, 4, 5))\n                .subscribe(new Action1<Integer>() {\n                    @Override\n                    public void call(Integer item) {\n                        System.out.println(item);\n                    }\n                });\n\n\t\t//简化为\n        Observable.just(1, 2, 3, 4, 5).subscribe(new Action1<Integer>() {\n            @Override\n            public void call(Integer item) {\n                System.out.println(item);\n            }\n        });\n\n    }\n```\n输出结果为：\n```java\n1\n2\n3\n4\n5\n1\n2\n3\n4\n5\n```\n\n","slug":"RxJava探索（二-RxJava操作符之Creating-Observables","published":1,"updated":"2017-02-22T04:11:29.000Z","_id":"cizgem1rh000aklc1j3wgodc8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>RxJava的强大之处就是他提供非常丰富的操作符，超过上百种，这些操作符给我们解决问题带来很多方便。本文主要讲解创建Observale对象一类的操作符，参照官方文档 <a href=\"http://reactivex.io/documentation/operators.html#creating\" target=\"_blank\" rel=\"external\">http://reactivex.io/documentation/operators.html#creating</a>。</p>\n<h3 id=\"Create\"><a href=\"#Create\" class=\"headerlink\" title=\"Create\"></a>Create</h3><p>Observable.create()方法用于创建一个Observale对象，该方法接收一个Observer观察者对象。</p>\n<p><img src=\"http://reactivex.io/documentation/operators/images/create.c.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.create(<span class=\"keyword\">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> Integer&gt; subscriber)</span> </span>&#123;</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (!subscriber.isUnsubscribed()) &#123;</div><div class=\"line\">                       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">                           subscriber.onNext(i);</div><div class=\"line\">                       &#125;</div><div class=\"line\"></div><div class=\"line\">                       subscriber.onCompleted();</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\"></div><div class=\"line\">                   subscriber.onError(e);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;).subscribe(<span class=\"keyword\">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               System.out.println(<span class=\"string\">\"completed !\"</span>);</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">               System.out.println(<span class=\"string\">\"onError \"</span> + e.getMessage());</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(Integer item)</span> </span>&#123;</div><div class=\"line\">               System.out.println(<span class=\"string\">\"Next \"</span> + item);</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n<p>subscrible(subscriber)方法调用后会执行OnSubscribe对象的call(subscriber)方法，从而完成回调。<br>打印结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Next <span class=\"number\">1</span></div><div class=\"line\">Next <span class=\"number\">2</span></div><div class=\"line\">Next <span class=\"number\">3</span></div><div class=\"line\">Next <span class=\"number\">4</span></div><div class=\"line\">completed !</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"Defer\"><a href=\"#Defer\" class=\"headerlink\" title=\"Defer\"></a>Defer</h3><p>观察者订阅时创建被观察者对象，对于每个观察者都会创建一个新的被观察者对象,也就是说在观察者订阅之前不创建这个Observable，为每一个观察者创建一个新的Observable。</p>\n<p><img src=\"http://reactivex.io/documentation/operators/images/defer.c.png\" alt=\"\"></p>\n<p>如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeType</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String value;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;String&gt; <span class=\"title\">valueObservable</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Observable.just(value);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">defer_just</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        SomeType someType = <span class=\"keyword\">new</span> SomeType();</div><div class=\"line\">        Observable&lt;String&gt; observable1 = someType.valueObservable();</div><div class=\"line\">        someType.setValue(<span class=\"string\">\"Some Value\"</span>);</div><div class=\"line\">        observable1.subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">                System.out.println(value);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>程序输出是”Some Value” 而不是null</p>\n<h3 id=\"Just\"><a href=\"#Just\" class=\"headerlink\" title=\"Just\"></a>Just</h3><p>   将某个对象转化为Observable对象，可以使一个数字、一个字符串、数组、Iterate对象等，是一种非常快捷的创建Observable对象的方法,和Defer比较相似<br>   <img src=\"http://reactivex.io/documentation/operators/images/just.c.png\" alt=\"\"></p>\n<p>代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeType</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String value;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;String&gt; <span class=\"title\">valueObservableFromJust</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Observable.just(value);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;String&gt; <span class=\"title\">valueObservableFromDefer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Observable.defer(<span class=\"keyword\">new</span> Func0&lt;Observable&lt;String&gt;&gt;() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;String&gt; <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> Observable.just(value);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">defer_just</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        SomeType someType = <span class=\"keyword\">new</span> SomeType();</div><div class=\"line\">        Observable&lt;String&gt; observable1 = someType.valueObservableFromJust();</div><div class=\"line\">        Observable&lt;String&gt; observable2 = someType.valueObservableFromDefer();</div><div class=\"line\">        someType.setValue(<span class=\"string\">\"Some Value\"</span>);</div><div class=\"line\">        observable1.subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">                System.out.println(value);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        observable2.subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">                System.out.println(value);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>程序输出如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">null</span></div><div class=\"line\">Some Value</div></pre></td></tr></table></figure></p>\n<p>由此可知，just和订阅无关，创建时是什么状态订阅时也是什么状态。</p>\n<h3 id=\"From\"><a href=\"#From\" class=\"headerlink\" title=\"From\"></a>From</h3><p>类似Just,可以把一个Future, Iterable或者Array类型转换为Observable对象。</p>\n<p><img src=\"http://reactivex.io/documentation/operators/images/from.c.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Test</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">from</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      Observable.from(Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>))</div><div class=\"line\">              .subscribe(<span class=\"keyword\">new</span> Action1&lt;Integer&gt;() &#123;</div><div class=\"line\">                  <span class=\"meta\">@Override</span></div><div class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Integer item)</span> </span>&#123;</div><div class=\"line\">                      System.out.println(item);</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//简化为</span></div><div class=\"line\">      Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).subscribe(<span class=\"keyword\">new</span> Action1&lt;Integer&gt;() &#123;</div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Integer item)</span> </span>&#123;</div><div class=\"line\">              System.out.println(item);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>输出结果为：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n","excerpt":"<p>RxJava的强大之处就是他提供非常丰富的操作符，超过上百种，这些操作符给我们解决问题带来很多方便。本文主要讲解创建Observale对象一类的操作符，参照官方文档 <a href=\"http://reactivex.io/documentation/operators.html#creating\">http://reactivex.io/documentation/operators.html#creating</a>。</p>\n<h3 id=\"Create\"><a href=\"#Create\" class=\"headerlink\" title=\"Create\"></a>Create</h3><p>Observable.create()方法用于创建一个Observale对象，该方法接收一个Observer观察者对象。</p>\n<p><img src=\"http://reactivex.io/documentation/operators/images/create.c.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.create(<span class=\"keyword\">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> Integer&gt; subscriber)</span> </span>&#123;</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (!subscriber.isUnsubscribed()) &#123;</div><div class=\"line\">                       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">                           subscriber.onNext(i);</div><div class=\"line\">                       &#125;</div><div class=\"line\"></div><div class=\"line\">                       subscriber.onCompleted();</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\"></div><div class=\"line\">                   subscriber.onError(e);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;).subscribe(<span class=\"keyword\">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               System.out.println(<span class=\"string\">\"completed !\"</span>);</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">               System.out.println(<span class=\"string\">\"onError \"</span> + e.getMessage());</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(Integer item)</span> </span>&#123;</div><div class=\"line\">               System.out.println(<span class=\"string\">\"Next \"</span> + item);</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n<p>subscrible(subscriber)方法调用后会执行OnSubscribe对象的call(subscriber)方法，从而完成回调。<br>打印结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Next <span class=\"number\">1</span></div><div class=\"line\">Next <span class=\"number\">2</span></div><div class=\"line\">Next <span class=\"number\">3</span></div><div class=\"line\">Next <span class=\"number\">4</span></div><div class=\"line\">completed !</div></pre></td></tr></table></figure>","more":"<h3 id=\"Defer\"><a href=\"#Defer\" class=\"headerlink\" title=\"Defer\"></a>Defer</h3><p>观察者订阅时创建被观察者对象，对于每个观察者都会创建一个新的被观察者对象,也就是说在观察者订阅之前不创建这个Observable，为每一个观察者创建一个新的Observable。</p>\n<p><img src=\"http://reactivex.io/documentation/operators/images/defer.c.png\" alt=\"\"></p>\n<p>如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeType</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String value;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;String&gt; <span class=\"title\">valueObservable</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Observable.just(value);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">defer_just</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        SomeType someType = <span class=\"keyword\">new</span> SomeType();</div><div class=\"line\">        Observable&lt;String&gt; observable1 = someType.valueObservable();</div><div class=\"line\">        someType.setValue(<span class=\"string\">\"Some Value\"</span>);</div><div class=\"line\">        observable1.subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">                System.out.println(value);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>程序输出是”Some Value” 而不是null</p>\n<h3 id=\"Just\"><a href=\"#Just\" class=\"headerlink\" title=\"Just\"></a>Just</h3><p>   将某个对象转化为Observable对象，可以使一个数字、一个字符串、数组、Iterate对象等，是一种非常快捷的创建Observable对象的方法,和Defer比较相似<br>   <img src=\"http://reactivex.io/documentation/operators/images/just.c.png\" alt=\"\"></p>\n<p>代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeType</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String value;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;String&gt; <span class=\"title\">valueObservableFromJust</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Observable.just(value);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;String&gt; <span class=\"title\">valueObservableFromDefer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Observable.defer(<span class=\"keyword\">new</span> Func0&lt;Observable&lt;String&gt;&gt;() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;String&gt; <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> Observable.just(value);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">defer_just</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        SomeType someType = <span class=\"keyword\">new</span> SomeType();</div><div class=\"line\">        Observable&lt;String&gt; observable1 = someType.valueObservableFromJust();</div><div class=\"line\">        Observable&lt;String&gt; observable2 = someType.valueObservableFromDefer();</div><div class=\"line\">        someType.setValue(<span class=\"string\">\"Some Value\"</span>);</div><div class=\"line\">        observable1.subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">                System.out.println(value);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        observable2.subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">                System.out.println(value);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>程序输出如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">null</span></div><div class=\"line\">Some Value</div></pre></td></tr></table></figure></p>\n<p>由此可知，just和订阅无关，创建时是什么状态订阅时也是什么状态。</p>\n<h3 id=\"From\"><a href=\"#From\" class=\"headerlink\" title=\"From\"></a>From</h3><p>类似Just,可以把一个Future, Iterable或者Array类型转换为Observable对象。</p>\n<p><img src=\"http://reactivex.io/documentation/operators/images/from.c.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Test</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">from</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      Observable.from(Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>))</div><div class=\"line\">              .subscribe(<span class=\"keyword\">new</span> Action1&lt;Integer&gt;() &#123;</div><div class=\"line\">                  <span class=\"meta\">@Override</span></div><div class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Integer item)</span> </span>&#123;</div><div class=\"line\">                      System.out.println(item);</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//简化为</span></div><div class=\"line\">      Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).subscribe(<span class=\"keyword\">new</span> Action1&lt;Integer&gt;() &#123;</div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Integer item)</span> </span>&#123;</div><div class=\"line\">              System.out.println(item);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>输出结果为：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>"},{"title":"搭建hexo博客（一）写在前面","date":"2015-12-17T14:38:33.000Z","comments":1,"_content":"## 为什么要写博客\n\n大约在10年前吧也就是2006年当时自己刚上大一，博客刚刚兴起，什么QQ空间、新浪博客风靡一时，虽说大学不是学的计算机专业，但自己总觉得自己要用电脑写点什么，毕竟高中时候的作文比赛是没少得奖，自己也就在新浪上开了自己的博客，当时还信誓旦旦的说每周不少于多少篇，要记录自己的每个瞬间，以后有个回忆的资本。然而事与愿违，大学四年基本上荒废了自己，游戏废掉了自己。没错写博客就是要实现自己10年前的愿望，重拾自己，抓住青春的尾巴，给自己一个交代。\n\n\n## 为什么要用hexo搭建博客\n之前考虑过CSDN，图省事，但作为程序猿来说，喜欢捣腾反而使得写博客更加有趣，加上markdown语法的支持，写博客就像编程序一样有条不紊，总结起来就是自己喜欢瞎搞(~~~)。\n<!-- more -->\n\n## 关于坚持\n这曾经对我来说不算是个事，但是大学的荒废使得这个事很严重了，很多事自己没能坚持下来，现在就是个loser。不能这样下去，要改变做回从前的自己。这里一开始给自己定个目标吧，最低要求是每个星期之间博文不能断，即就是每周至少要产出一篇博文。\n\n\n","source":"_posts/搭建hexo博客.md","raw":"title: 搭建hexo博客（一）写在前面\ndate: 2015-12-17 22:38:33\ntags:\n- hexo\ncategories: \n- hexo搭建个人博客\n- 个人随感\ncomments:\n---\n## 为什么要写博客\n\n大约在10年前吧也就是2006年当时自己刚上大一，博客刚刚兴起，什么QQ空间、新浪博客风靡一时，虽说大学不是学的计算机专业，但自己总觉得自己要用电脑写点什么，毕竟高中时候的作文比赛是没少得奖，自己也就在新浪上开了自己的博客，当时还信誓旦旦的说每周不少于多少篇，要记录自己的每个瞬间，以后有个回忆的资本。然而事与愿违，大学四年基本上荒废了自己，游戏废掉了自己。没错写博客就是要实现自己10年前的愿望，重拾自己，抓住青春的尾巴，给自己一个交代。\n\n\n## 为什么要用hexo搭建博客\n之前考虑过CSDN，图省事，但作为程序猿来说，喜欢捣腾反而使得写博客更加有趣，加上markdown语法的支持，写博客就像编程序一样有条不紊，总结起来就是自己喜欢瞎搞(~~~)。\n<!-- more -->\n\n## 关于坚持\n这曾经对我来说不算是个事，但是大学的荒废使得这个事很严重了，很多事自己没能坚持下来，现在就是个loser。不能这样下去，要改变做回从前的自己。这里一开始给自己定个目标吧，最低要求是每个星期之间博文不能断，即就是每周至少要产出一篇博文。\n\n\n","slug":"搭建hexo博客","published":1,"updated":"2015-12-19T05:38:52.000Z","layout":"post","photos":[],"link":"","_id":"cizgem1ri000eklc1try6pj5w","content":"<h2 id=\"为什么要写博客\"><a href=\"#为什么要写博客\" class=\"headerlink\" title=\"为什么要写博客\"></a>为什么要写博客</h2><p>大约在10年前吧也就是2006年当时自己刚上大一，博客刚刚兴起，什么QQ空间、新浪博客风靡一时，虽说大学不是学的计算机专业，但自己总觉得自己要用电脑写点什么，毕竟高中时候的作文比赛是没少得奖，自己也就在新浪上开了自己的博客，当时还信誓旦旦的说每周不少于多少篇，要记录自己的每个瞬间，以后有个回忆的资本。然而事与愿违，大学四年基本上荒废了自己，游戏废掉了自己。没错写博客就是要实现自己10年前的愿望，重拾自己，抓住青春的尾巴，给自己一个交代。</p>\n<h2 id=\"为什么要用hexo搭建博客\"><a href=\"#为什么要用hexo搭建博客\" class=\"headerlink\" title=\"为什么要用hexo搭建博客\"></a>为什么要用hexo搭建博客</h2><p>之前考虑过CSDN，图省事，但作为程序猿来说，喜欢捣腾反而使得写博客更加有趣，加上markdown语法的支持，写博客就像编程序一样有条不紊，总结起来就是自己喜欢瞎搞(~~~)。<br><a id=\"more\"></a></p>\n<h2 id=\"关于坚持\"><a href=\"#关于坚持\" class=\"headerlink\" title=\"关于坚持\"></a>关于坚持</h2><p>这曾经对我来说不算是个事，但是大学的荒废使得这个事很严重了，很多事自己没能坚持下来，现在就是个loser。不能这样下去，要改变做回从前的自己。这里一开始给自己定个目标吧，最低要求是每个星期之间博文不能断，即就是每周至少要产出一篇博文。</p>\n","excerpt":"<h2 id=\"为什么要写博客\"><a href=\"#为什么要写博客\" class=\"headerlink\" title=\"为什么要写博客\"></a>为什么要写博客</h2><p>大约在10年前吧也就是2006年当时自己刚上大一，博客刚刚兴起，什么QQ空间、新浪博客风靡一时，虽说大学不是学的计算机专业，但自己总觉得自己要用电脑写点什么，毕竟高中时候的作文比赛是没少得奖，自己也就在新浪上开了自己的博客，当时还信誓旦旦的说每周不少于多少篇，要记录自己的每个瞬间，以后有个回忆的资本。然而事与愿违，大学四年基本上荒废了自己，游戏废掉了自己。没错写博客就是要实现自己10年前的愿望，重拾自己，抓住青春的尾巴，给自己一个交代。</p>\n<h2 id=\"为什么要用hexo搭建博客\"><a href=\"#为什么要用hexo搭建博客\" class=\"headerlink\" title=\"为什么要用hexo搭建博客\"></a>为什么要用hexo搭建博客</h2><p>之前考虑过CSDN，图省事，但作为程序猿来说，喜欢捣腾反而使得写博客更加有趣，加上markdown语法的支持，写博客就像编程序一样有条不紊，总结起来就是自己喜欢瞎搞(~~~)。<br>","more":"</p>\n<h2 id=\"关于坚持\"><a href=\"#关于坚持\" class=\"headerlink\" title=\"关于坚持\"></a>关于坚持</h2><p>这曾经对我来说不算是个事，但是大学的荒废使得这个事很严重了，很多事自己没能坚持下来，现在就是个loser。不能这样下去，要改变做回从前的自己。这里一开始给自己定个目标吧，最低要求是每个星期之间博文不能断，即就是每周至少要产出一篇博文。</p>"},{"title":"搭建hexo博客（三）使用七牛存储图片","date":"2016-01-09T05:01:41.000Z","_content":"\n### 1.  为何使用七牛\nHexo文章中的图片，我们可以放到本地，然后一起部署到github中，这样完全没有问题。然而github pages空间毕竟有限（貌似只有300M）,另外图片的管理太混乱了，一些原创的图片可能被盗链。七牛作为国内顶尖的CDN云存储商，选择他有以下几个理由\n\n> * 在国内很稳定，我们公司也是选择七牛来提供云存储的\n> * 免费提供10G存储空间，和每月10G下载流量，完全够用\n> * hexo有七牛的插件，使用起来也是相当的方便\n> \n![](http://7xppgb.com1.z0.glb.clouddn.com/static/images/use-qiniu-store-image-for-hexo/qiniu.png)\n\n\n### 2.注册和安装七牛工具\n\n首先我们需要申请七牛账号，如果你也需要申请，请访问[**这个链接**](https://portal.qiniu.com/signup?code=3ld4kzjsl1qoi)，这样我可以获得更多的流量（5GB）。然后登录七牛网站，按照官网说明创建空间，比如我创建的空间是为forevercoder-blog 。创建完成后会给你分配个七牛域名比如我的是：\n\t\t\n\t\t7xppgb.com1.z0.glb.clouddn.com\n通过该URL就可以访问你上传的资源了，\n\n```\nhttp://7xppgb.com1.z0.glb.clouddn.com/static/images/use-qiniu-store-image-for-hexo/qiniu.png\n```\n当然也可以设置自定义域名。\n\n<!--more-->\n### 3.安装hexo七牛插件\n\n1. 插件地址：[https://github.com/gyk001/hexo-qiniu-sync](https://github.com/gyk001/hexo-qiniu-sync)\n\n2. 安装\n\n在你的hexo主目录下运行以下命令进行安装：\n\n```\nnpm install hexo-qiniu-sync --save\n```\n\n添加插件配置信息到 ``_config.yml`` 文件中:\n\n```\nplugins:\n  - hexo-qiniu-sync\n```\n让后根据官方的README,一步一步完成就OK了\n\n### 4. 使用qiniu插件\n\n配置完成后我们在hexo目录下执行\n\t \n\t hexo qiniu sync\n\t \n\t\n这样就在localDir下生成相对应的文件夹,将图片资源放到images文件夹下，比我的路径是 use-qiniu-store-image-for-hexo/qiniu.png，让后就用下面的标记使用，\n\n```\t\n    {% qnimg use-qiniu-store-image-for-hexo/qiniu.png title:免费使用七牛 alt:图片说明 'class:class1 class2' %}\n```\n \n最后在同步上传图片\n   \n\thexo qiniu sync2\n\t\n然后 hexo g -d 就OK了，非常简单方便\n \n\n","source":"_posts/搭建hexo博客（三）使用七牛存储图片.md","raw":"title: 搭建hexo博客（三）使用七牛存储图片\ndate: 2016-01-09 13:01:41\ncategories: hexo搭建个人博客\ntags: hexo\n---\n\n### 1.  为何使用七牛\nHexo文章中的图片，我们可以放到本地，然后一起部署到github中，这样完全没有问题。然而github pages空间毕竟有限（貌似只有300M）,另外图片的管理太混乱了，一些原创的图片可能被盗链。七牛作为国内顶尖的CDN云存储商，选择他有以下几个理由\n\n> * 在国内很稳定，我们公司也是选择七牛来提供云存储的\n> * 免费提供10G存储空间，和每月10G下载流量，完全够用\n> * hexo有七牛的插件，使用起来也是相当的方便\n> \n![](http://7xppgb.com1.z0.glb.clouddn.com/static/images/use-qiniu-store-image-for-hexo/qiniu.png)\n\n\n### 2.注册和安装七牛工具\n\n首先我们需要申请七牛账号，如果你也需要申请，请访问[**这个链接**](https://portal.qiniu.com/signup?code=3ld4kzjsl1qoi)，这样我可以获得更多的流量（5GB）。然后登录七牛网站，按照官网说明创建空间，比如我创建的空间是为forevercoder-blog 。创建完成后会给你分配个七牛域名比如我的是：\n\t\t\n\t\t7xppgb.com1.z0.glb.clouddn.com\n通过该URL就可以访问你上传的资源了，\n\n```\nhttp://7xppgb.com1.z0.glb.clouddn.com/static/images/use-qiniu-store-image-for-hexo/qiniu.png\n```\n当然也可以设置自定义域名。\n\n<!--more-->\n### 3.安装hexo七牛插件\n\n1. 插件地址：[https://github.com/gyk001/hexo-qiniu-sync](https://github.com/gyk001/hexo-qiniu-sync)\n\n2. 安装\n\n在你的hexo主目录下运行以下命令进行安装：\n\n```\nnpm install hexo-qiniu-sync --save\n```\n\n添加插件配置信息到 ``_config.yml`` 文件中:\n\n```\nplugins:\n  - hexo-qiniu-sync\n```\n让后根据官方的README,一步一步完成就OK了\n\n### 4. 使用qiniu插件\n\n配置完成后我们在hexo目录下执行\n\t \n\t hexo qiniu sync\n\t \n\t\n这样就在localDir下生成相对应的文件夹,将图片资源放到images文件夹下，比我的路径是 use-qiniu-store-image-for-hexo/qiniu.png，让后就用下面的标记使用，\n\n```\t\n    {% qnimg use-qiniu-store-image-for-hexo/qiniu.png title:免费使用七牛 alt:图片说明 'class:class1 class2' %}\n```\n \n最后在同步上传图片\n   \n\thexo qiniu sync2\n\t\n然后 hexo g -d 就OK了，非常简单方便\n \n\n","slug":"搭建hexo博客（三）使用七牛存储图片","published":1,"updated":"2016-07-02T03:23:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgem1rk000gklc1f7jullb0","content":"<h3 id=\"1-为何使用七牛\"><a href=\"#1-为何使用七牛\" class=\"headerlink\" title=\"1.  为何使用七牛\"></a>1.  为何使用七牛</h3><p>Hexo文章中的图片，我们可以放到本地，然后一起部署到github中，这样完全没有问题。然而github pages空间毕竟有限（貌似只有300M）,另外图片的管理太混乱了，一些原创的图片可能被盗链。七牛作为国内顶尖的CDN云存储商，选择他有以下几个理由</p>\n<blockquote>\n<ul>\n<li>在国内很稳定，我们公司也是选择七牛来提供云存储的</li>\n<li>免费提供10G存储空间，和每月10G下载流量，完全够用</li>\n<li>hexo有七牛的插件，使用起来也是相当的方便</li>\n</ul>\n<p><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/static/images/use-qiniu-store-image-for-hexo/qiniu.png\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"2-注册和安装七牛工具\"><a href=\"#2-注册和安装七牛工具\" class=\"headerlink\" title=\"2.注册和安装七牛工具\"></a>2.注册和安装七牛工具</h3><p>首先我们需要申请七牛账号，如果你也需要申请，请访问<a href=\"https://portal.qiniu.com/signup?code=3ld4kzjsl1qoi\" target=\"_blank\" rel=\"external\"><strong>这个链接</strong></a>，这样我可以获得更多的流量（5GB）。然后登录七牛网站，按照官网说明创建空间，比如我创建的空间是为forevercoder-blog 。创建完成后会给你分配个七牛域名比如我的是：</p>\n<pre><code>7xppgb.com1.z0.glb.clouddn.com\n</code></pre><p>通过该URL就可以访问你上传的资源了，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://7xppgb.com1.z0.glb.clouddn.com/static/images/use-qiniu-store-image-for-hexo/qiniu.png</div></pre></td></tr></table></figure>\n<p>当然也可以设置自定义域名。</p>\n<a id=\"more\"></a>\n<h3 id=\"3-安装hexo七牛插件\"><a href=\"#3-安装hexo七牛插件\" class=\"headerlink\" title=\"3.安装hexo七牛插件\"></a>3.安装hexo七牛插件</h3><ol>\n<li><p>插件地址：<a href=\"https://github.com/gyk001/hexo-qiniu-sync\" target=\"_blank\" rel=\"external\">https://github.com/gyk001/hexo-qiniu-sync</a></p>\n</li>\n<li><p>安装</p>\n</li>\n</ol>\n<p>在你的hexo主目录下运行以下命令进行安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-qiniu-sync --save</div></pre></td></tr></table></figure>\n<p>添加插件配置信息到 <code>_config.yml</code> 文件中:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins:</div><div class=\"line\">  - hexo-qiniu-sync</div></pre></td></tr></table></figure>\n<p>让后根据官方的README,一步一步完成就OK了</p>\n<h3 id=\"4-使用qiniu插件\"><a href=\"#4-使用qiniu插件\" class=\"headerlink\" title=\"4. 使用qiniu插件\"></a>4. 使用qiniu插件</h3><p>配置完成后我们在hexo目录下执行</p>\n<pre><code>hexo qiniu sync\n</code></pre><p>这样就在localDir下生成相对应的文件夹,将图片资源放到images文件夹下，比我的路径是 use-qiniu-store-image-for-hexo/qiniu.png，让后就用下面的标记使用，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% qnimg use-qiniu-store-image-for-hexo/qiniu.png title:免费使用七牛 alt:图片说明 &apos;class:class1 class2&apos; %&#125;</div></pre></td></tr></table></figure>\n<p>最后在同步上传图片</p>\n<pre><code>hexo qiniu sync2\n</code></pre><p>然后 hexo g -d 就OK了，非常简单方便</p>\n","excerpt":"<h3 id=\"1-为何使用七牛\"><a href=\"#1-为何使用七牛\" class=\"headerlink\" title=\"1.  为何使用七牛\"></a>1.  为何使用七牛</h3><p>Hexo文章中的图片，我们可以放到本地，然后一起部署到github中，这样完全没有问题。然而github pages空间毕竟有限（貌似只有300M）,另外图片的管理太混乱了，一些原创的图片可能被盗链。七牛作为国内顶尖的CDN云存储商，选择他有以下几个理由</p>\n<blockquote>\n<ul>\n<li>在国内很稳定，我们公司也是选择七牛来提供云存储的</li>\n<li>免费提供10G存储空间，和每月10G下载流量，完全够用</li>\n<li>hexo有七牛的插件，使用起来也是相当的方便</li>\n</ul>\n<p><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/static/images/use-qiniu-store-image-for-hexo/qiniu.png\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"2-注册和安装七牛工具\"><a href=\"#2-注册和安装七牛工具\" class=\"headerlink\" title=\"2.注册和安装七牛工具\"></a>2.注册和安装七牛工具</h3><p>首先我们需要申请七牛账号，如果你也需要申请，请访问<a href=\"https://portal.qiniu.com/signup?code=3ld4kzjsl1qoi\"><strong>这个链接</strong></a>，这样我可以获得更多的流量（5GB）。然后登录七牛网站，按照官网说明创建空间，比如我创建的空间是为forevercoder-blog 。创建完成后会给你分配个七牛域名比如我的是：</p>\n<pre><code>7xppgb.com1.z0.glb.clouddn.com\n</code></pre><p>通过该URL就可以访问你上传的资源了，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://7xppgb.com1.z0.glb.clouddn.com/static/images/use-qiniu-store-image-for-hexo/qiniu.png</div></pre></td></tr></table></figure>\n<p>当然也可以设置自定义域名。</p>","more":"<h3 id=\"3-安装hexo七牛插件\"><a href=\"#3-安装hexo七牛插件\" class=\"headerlink\" title=\"3.安装hexo七牛插件\"></a>3.安装hexo七牛插件</h3><ol>\n<li><p>插件地址：<a href=\"https://github.com/gyk001/hexo-qiniu-sync\">https://github.com/gyk001/hexo-qiniu-sync</a></p>\n</li>\n<li><p>安装</p>\n</li>\n</ol>\n<p>在你的hexo主目录下运行以下命令进行安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-qiniu-sync --save</div></pre></td></tr></table></figure>\n<p>添加插件配置信息到 <code>_config.yml</code> 文件中:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins:</div><div class=\"line\">  - hexo-qiniu-sync</div></pre></td></tr></table></figure>\n<p>让后根据官方的README,一步一步完成就OK了</p>\n<h3 id=\"4-使用qiniu插件\"><a href=\"#4-使用qiniu插件\" class=\"headerlink\" title=\"4. 使用qiniu插件\"></a>4. 使用qiniu插件</h3><p>配置完成后我们在hexo目录下执行</p>\n<pre><code>hexo qiniu sync\n</code></pre><p>这样就在localDir下生成相对应的文件夹,将图片资源放到images文件夹下，比我的路径是 use-qiniu-store-image-for-hexo/qiniu.png，让后就用下面的标记使用，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% qnimg use-qiniu-store-image-for-hexo/qiniu.png title:免费使用七牛 alt:图片说明 &apos;class:class1 class2&apos; %&#125;</div></pre></td></tr></table></figure>\n<p>最后在同步上传图片</p>\n<pre><code>hexo qiniu sync2\n</code></pre><p>然后 hexo g -d 就OK了，非常简单方便</p>"},{"title":"搭建hexo博客（二）准备工作","date":"2015-12-20T12:03:01.000Z","comments":1,"_content":"## 安装homebrew\nhomebrew是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件， 只需要一个命令， 非常方便。打开终端输入以下命令即可完成安装：\n\n\n\truby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”\n\t\n## 安装nodejs\nhoewbrew安装成功后，我们就可以借助他来安装Nodejs了，输入以下命令：\n\t\t\n\tbrew install node\n\t\n## 安装hexo\n使用nodejs的npm命令来安装hexo\n\t\t\n\tnpm install -g hexo-cli\n\t\n<!--more-->\n## 初始化hexo\n\t\n\thexo init Blog\nBlog是工程存放的文件夹，名字可以随便取\n\n    cd Blog\n    npm install\n    \n## 安装git插件\n\n\tnpm install hexo-deployer-git --save\n\n## 注册GitHub\n  * 点这里注册 [GitHub](https://github.com/) \n  * 注册完成后 创建你的GitHub Pages 也就是我们博客的主页\n  * 如果你的用户名为abc,则需创建名称为abc.github.io的仓库\n  \n\n\n","source":"_posts/搭建hexo博客（二）准备工作.md","raw":"title: 搭建hexo博客（二）准备工作\ndate: 2015-12-20 20:03:01\ncategories:\n- hexo搭建个人博客\ntags:\n- hexo\ncomments:\n\n---\n## 安装homebrew\nhomebrew是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件， 只需要一个命令， 非常方便。打开终端输入以下命令即可完成安装：\n\n\n\truby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”\n\t\n## 安装nodejs\nhoewbrew安装成功后，我们就可以借助他来安装Nodejs了，输入以下命令：\n\t\t\n\tbrew install node\n\t\n## 安装hexo\n使用nodejs的npm命令来安装hexo\n\t\t\n\tnpm install -g hexo-cli\n\t\n<!--more-->\n## 初始化hexo\n\t\n\thexo init Blog\nBlog是工程存放的文件夹，名字可以随便取\n\n    cd Blog\n    npm install\n    \n## 安装git插件\n\n\tnpm install hexo-deployer-git --save\n\n## 注册GitHub\n  * 点这里注册 [GitHub](https://github.com/) \n  * 注册完成后 创建你的GitHub Pages 也就是我们博客的主页\n  * 如果你的用户名为abc,则需创建名称为abc.github.io的仓库\n  \n\n\n","slug":"搭建hexo博客（二）准备工作","published":1,"updated":"2015-12-20T12:38:12.000Z","layout":"post","photos":[],"link":"","_id":"cizgem1rn000jklc1srbz72c8","content":"<h2 id=\"安装homebrew\"><a href=\"#安装homebrew\" class=\"headerlink\" title=\"安装homebrew\"></a>安装homebrew</h2><p>homebrew是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件， 只需要一个命令， 非常方便。打开终端输入以下命令即可完成安装：</p>\n<pre><code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”\n</code></pre><h2 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h2><p>hoewbrew安装成功后，我们就可以借助他来安装Nodejs了，输入以下命令：</p>\n<pre><code>brew install node\n</code></pre><h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>使用nodejs的npm命令来安装hexo</p>\n<pre><code>npm install -g hexo-cli\n</code></pre><a id=\"more\"></a>\n<h2 id=\"初始化hexo\"><a href=\"#初始化hexo\" class=\"headerlink\" title=\"初始化hexo\"></a>初始化hexo</h2><pre><code>hexo init Blog\n</code></pre><p>Blog是工程存放的文件夹，名字可以随便取</p>\n<pre><code>cd Blog\nnpm install\n</code></pre><h2 id=\"安装git插件\"><a href=\"#安装git插件\" class=\"headerlink\" title=\"安装git插件\"></a>安装git插件</h2><pre><code>npm install hexo-deployer-git --save\n</code></pre><h2 id=\"注册GitHub\"><a href=\"#注册GitHub\" class=\"headerlink\" title=\"注册GitHub\"></a>注册GitHub</h2><ul>\n<li>点这里注册 <a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">GitHub</a> </li>\n<li>注册完成后 创建你的GitHub Pages 也就是我们博客的主页</li>\n<li>如果你的用户名为abc,则需创建名称为abc.github.io的仓库</li>\n</ul>\n","excerpt":"<h2 id=\"安装homebrew\"><a href=\"#安装homebrew\" class=\"headerlink\" title=\"安装homebrew\"></a>安装homebrew</h2><p>homebrew是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件， 只需要一个命令， 非常方便。打开终端输入以下命令即可完成安装：</p>\n<pre><code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”\n</code></pre><h2 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h2><p>hoewbrew安装成功后，我们就可以借助他来安装Nodejs了，输入以下命令：</p>\n<pre><code>brew install node\n</code></pre><h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>使用nodejs的npm命令来安装hexo</p>\n<pre><code>npm install -g hexo-cli\n</code></pre>","more":"<h2 id=\"初始化hexo\"><a href=\"#初始化hexo\" class=\"headerlink\" title=\"初始化hexo\"></a>初始化hexo</h2><pre><code>hexo init Blog\n</code></pre><p>Blog是工程存放的文件夹，名字可以随便取</p>\n<pre><code>cd Blog\nnpm install\n</code></pre><h2 id=\"安装git插件\"><a href=\"#安装git插件\" class=\"headerlink\" title=\"安装git插件\"></a>安装git插件</h2><pre><code>npm install hexo-deployer-git --save\n</code></pre><h2 id=\"注册GitHub\"><a href=\"#注册GitHub\" class=\"headerlink\" title=\"注册GitHub\"></a>注册GitHub</h2><ul>\n<li>点这里注册 <a href=\"https://github.com/\">GitHub</a> </li>\n<li>注册完成后 创建你的GitHub Pages 也就是我们博客的主页</li>\n<li>如果你的用户名为abc,则需创建名称为abc.github.io的仓库</li>\n</ul>"},{"title":"深入理解 scrollTo()、scrollBy()、getScrollX()","date":"2015-12-24T01:35:59.000Z","_content":"\n## 一、废话先说\n   我们在开发Android自定义控件时，尤其是做一些滑动效果时，往往会使用 scrollTo()、scrollBy()、getScrollX() 这几个方法。对初学者来说不太好理解这几个方法，这篇博文就来彻底弄清这几个API的用法。\n\n## 二、测试界面\n 我们测试的界面中有三个Linearlayout如下图：黄色框所在的区域为屏幕显示区域\n \n![](http://img.blog.csdn.net/20150414083752720)\n\n运行时如下图：\n![这里写图片描述](http://img.blog.csdn.net/20150414084317419)\n单击按钮会执行相应的方法，并弹当前getScrollX()、getScrollY()的值 \n\n<!--more-->\n\n## 三、详细讲解 \n\n### 1、scrollTo()\n   View中的源码如下：\n```java\n    /**\n     * Set the scrolled position of your view. This will cause a call to\n     * {@link #onScrollChanged(int, int, int, int)} and the view will be\n     * invalidated.\n     * @param x the x position to scroll to\n     * @param y the y position to scroll to\n     */\n    public void scrollTo(int x, int y) {\n        if (mScrollX != x || mScrollY != y) {\n            int oldX = mScrollX;\n            int oldY = mScrollY;\n            mScrollX = x;\n            mScrollY = y;\n            invalidateParentCaches();\n            onScrollChanged(mScrollX, mScrollY, oldX, oldY);\n            if (!awakenScrollBars()) {\n                postInvalidateOnAnimation();\n            }\n        }\n    }\n```\n- scrollTo用来设置你的View要滚动的坐标 \n- mScrollX、mScrollY 表示当前View在水平和垂直方向上分别滑动了多少\n- scrollTo执行后会调用onScrollChanged()方法\n\n我们执行  **scrollTo(100,100)** 过程如下：\n![这里写图片描述](http://img.blog.csdn.net/20150414091643430)\n执行结果如下：**我们的屏幕向左上方滑动了**\n![这里写图片描述](http://img.blog.csdn.net/20150414091815236)\n\n再执行  **scrollTo(-100,-100)** 过程如下：\n![这里写图片描述](http://img.blog.csdn.net/20150414094119017)\n执行结果如下：**我们的屏幕向右下方滑动了**\n![这里写图片描述](http://img.blog.csdn.net/20150414093915469)\n\n是不是很好理解呢，总结下：\n- **x>0表示视图(View或ViewGroup)的内容从右向左滑动;反之，从左向右滑动**\n- **y>0表示视图(View或ViewGroup)的内容从下向上滑动;反之，从上向下滑动**\n\n### 2、scrollBy()\n View中的源码如下：\n```java\n    /**\n     * Move the scrolled position of your view. This will cause a call to\n     * {@link #onScrollChanged(int, int, int, int)} and the view will be\n     * invalidated.\n     * @param x the amount of pixels to scroll by horizontally\n     * @param y the amount of pixels to scroll by vertically\n     */\n    public void scrollBy(int x, int y) {\n        scrollTo(mScrollX + x, mScrollY + y);\n    }\n```\n只是简单调用了 srcollTo(),在原有 mScrollX 、mScrollY 的基础上增量滚动 x、y\n\n我们从刚才scrollTo(-100,-100)基础上scrollBy(50,50)，那么就相当于 scrollTo(50,50),很简单吧。\n![这里写图片描述](http://img.blog.csdn.net/20150414095633182)\n\n### 3、getScrollX()； getScrollY()\n View中的源码如下：\n```java\n/**\n     * Return the scrolled left position of this view. This is the left edge of\n     * the displayed part of your view. You do not need to draw any pixels\n     * farther left, since those are outside of the frame of your view on\n     * screen.\n     *\n     * @return The left edge of the displayed part of your view, in pixels.\n     */\n    public final int getScrollX() {\n        return mScrollX;\n    }\n\n    /**\n     * Return the scrolled top position of this view. This is the top edge of\n     * the displayed part of your view. You do not need to draw any pixels above\n     * it, since those are outside of the frame of your view on screen.\n     *\n     * @return The top edge of the displayed part of your view, in pixels.\n     */\n    public final int getScrollY() {\n        return mScrollY;\n    }\n```\ngetScrollX()、getScrollY()返回的就是scrollTo(),scrollBy()中的不断变化的偏移量，我的前面的 Toast也\n能体现出来。\n  \n","source":"_posts/深入理解-scrollTo-、scrollBy-、getScrollX.md","raw":"title: 深入理解 scrollTo()、scrollBy()、getScrollX()\ndate: 2015-12-24 09:35:59\ncategories: Android开发\ntags: android\n---\n\n## 一、废话先说\n   我们在开发Android自定义控件时，尤其是做一些滑动效果时，往往会使用 scrollTo()、scrollBy()、getScrollX() 这几个方法。对初学者来说不太好理解这几个方法，这篇博文就来彻底弄清这几个API的用法。\n\n## 二、测试界面\n 我们测试的界面中有三个Linearlayout如下图：黄色框所在的区域为屏幕显示区域\n \n![](http://img.blog.csdn.net/20150414083752720)\n\n运行时如下图：\n![这里写图片描述](http://img.blog.csdn.net/20150414084317419)\n单击按钮会执行相应的方法，并弹当前getScrollX()、getScrollY()的值 \n\n<!--more-->\n\n## 三、详细讲解 \n\n### 1、scrollTo()\n   View中的源码如下：\n```java\n    /**\n     * Set the scrolled position of your view. This will cause a call to\n     * {@link #onScrollChanged(int, int, int, int)} and the view will be\n     * invalidated.\n     * @param x the x position to scroll to\n     * @param y the y position to scroll to\n     */\n    public void scrollTo(int x, int y) {\n        if (mScrollX != x || mScrollY != y) {\n            int oldX = mScrollX;\n            int oldY = mScrollY;\n            mScrollX = x;\n            mScrollY = y;\n            invalidateParentCaches();\n            onScrollChanged(mScrollX, mScrollY, oldX, oldY);\n            if (!awakenScrollBars()) {\n                postInvalidateOnAnimation();\n            }\n        }\n    }\n```\n- scrollTo用来设置你的View要滚动的坐标 \n- mScrollX、mScrollY 表示当前View在水平和垂直方向上分别滑动了多少\n- scrollTo执行后会调用onScrollChanged()方法\n\n我们执行  **scrollTo(100,100)** 过程如下：\n![这里写图片描述](http://img.blog.csdn.net/20150414091643430)\n执行结果如下：**我们的屏幕向左上方滑动了**\n![这里写图片描述](http://img.blog.csdn.net/20150414091815236)\n\n再执行  **scrollTo(-100,-100)** 过程如下：\n![这里写图片描述](http://img.blog.csdn.net/20150414094119017)\n执行结果如下：**我们的屏幕向右下方滑动了**\n![这里写图片描述](http://img.blog.csdn.net/20150414093915469)\n\n是不是很好理解呢，总结下：\n- **x>0表示视图(View或ViewGroup)的内容从右向左滑动;反之，从左向右滑动**\n- **y>0表示视图(View或ViewGroup)的内容从下向上滑动;反之，从上向下滑动**\n\n### 2、scrollBy()\n View中的源码如下：\n```java\n    /**\n     * Move the scrolled position of your view. This will cause a call to\n     * {@link #onScrollChanged(int, int, int, int)} and the view will be\n     * invalidated.\n     * @param x the amount of pixels to scroll by horizontally\n     * @param y the amount of pixels to scroll by vertically\n     */\n    public void scrollBy(int x, int y) {\n        scrollTo(mScrollX + x, mScrollY + y);\n    }\n```\n只是简单调用了 srcollTo(),在原有 mScrollX 、mScrollY 的基础上增量滚动 x、y\n\n我们从刚才scrollTo(-100,-100)基础上scrollBy(50,50)，那么就相当于 scrollTo(50,50),很简单吧。\n![这里写图片描述](http://img.blog.csdn.net/20150414095633182)\n\n### 3、getScrollX()； getScrollY()\n View中的源码如下：\n```java\n/**\n     * Return the scrolled left position of this view. This is the left edge of\n     * the displayed part of your view. You do not need to draw any pixels\n     * farther left, since those are outside of the frame of your view on\n     * screen.\n     *\n     * @return The left edge of the displayed part of your view, in pixels.\n     */\n    public final int getScrollX() {\n        return mScrollX;\n    }\n\n    /**\n     * Return the scrolled top position of this view. This is the top edge of\n     * the displayed part of your view. You do not need to draw any pixels above\n     * it, since those are outside of the frame of your view on screen.\n     *\n     * @return The top edge of the displayed part of your view, in pixels.\n     */\n    public final int getScrollY() {\n        return mScrollY;\n    }\n```\ngetScrollX()、getScrollY()返回的就是scrollTo(),scrollBy()中的不断变化的偏移量，我的前面的 Toast也\n能体现出来。\n  \n","slug":"深入理解-scrollTo-、scrollBy-、getScrollX","published":1,"updated":"2015-12-24T01:54:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizgem1ro000lklc1waujeg5w","content":"<h2 id=\"一、废话先说\"><a href=\"#一、废话先说\" class=\"headerlink\" title=\"一、废话先说\"></a>一、废话先说</h2><p>   我们在开发Android自定义控件时，尤其是做一些滑动效果时，往往会使用 scrollTo()、scrollBy()、getScrollX() 这几个方法。对初学者来说不太好理解这几个方法，这篇博文就来彻底弄清这几个API的用法。</p>\n<h2 id=\"二、测试界面\"><a href=\"#二、测试界面\" class=\"headerlink\" title=\"二、测试界面\"></a>二、测试界面</h2><p> 我们测试的界面中有三个Linearlayout如下图：黄色框所在的区域为屏幕显示区域</p>\n<p><img src=\"http://img.blog.csdn.net/20150414083752720\" alt=\"\"></p>\n<p>运行时如下图：<br><img src=\"http://img.blog.csdn.net/20150414084317419\" alt=\"这里写图片描述\"><br>单击按钮会执行相应的方法，并弹当前getScrollX()、getScrollY()的值 </p>\n<a id=\"more\"></a>\n<h2 id=\"三、详细讲解\"><a href=\"#三、详细讲解\" class=\"headerlink\" title=\"三、详细讲解\"></a>三、详细讲解</h2><h3 id=\"1、scrollTo\"><a href=\"#1、scrollTo\" class=\"headerlink\" title=\"1、scrollTo()\"></a>1、scrollTo()</h3><p>   View中的源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Set the scrolled position of your view. This will cause a call to</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onScrollChanged(int, int, int, int)&#125; and the view will be</div><div class=\"line\"> * invalidated.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> x the x position to scroll to</div><div class=\"line\"> * <span class=\"doctag\">@param</span> y the y position to scroll to</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollTo</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mScrollX != x || mScrollY != y) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> oldX = mScrollX;</div><div class=\"line\">        <span class=\"keyword\">int</span> oldY = mScrollY;</div><div class=\"line\">        mScrollX = x;</div><div class=\"line\">        mScrollY = y;</div><div class=\"line\">        invalidateParentCaches();</div><div class=\"line\">        onScrollChanged(mScrollX, mScrollY, oldX, oldY);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!awakenScrollBars()) &#123;</div><div class=\"line\">            postInvalidateOnAnimation();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>scrollTo用来设置你的View要滚动的坐标 </li>\n<li>mScrollX、mScrollY 表示当前View在水平和垂直方向上分别滑动了多少</li>\n<li>scrollTo执行后会调用onScrollChanged()方法</li>\n</ul>\n<p>我们执行  <strong>scrollTo(100,100)</strong> 过程如下：<br><img src=\"http://img.blog.csdn.net/20150414091643430\" alt=\"这里写图片描述\"><br>执行结果如下：<strong>我们的屏幕向左上方滑动了</strong><br><img src=\"http://img.blog.csdn.net/20150414091815236\" alt=\"这里写图片描述\"></p>\n<p>再执行  <strong>scrollTo(-100,-100)</strong> 过程如下：<br><img src=\"http://img.blog.csdn.net/20150414094119017\" alt=\"这里写图片描述\"><br>执行结果如下：<strong>我们的屏幕向右下方滑动了</strong><br><img src=\"http://img.blog.csdn.net/20150414093915469\" alt=\"这里写图片描述\"></p>\n<p>是不是很好理解呢，总结下：</p>\n<ul>\n<li><strong>x&gt;0表示视图(View或ViewGroup)的内容从右向左滑动;反之，从左向右滑动</strong></li>\n<li><strong>y&gt;0表示视图(View或ViewGroup)的内容从下向上滑动;反之，从上向下滑动</strong></li>\n</ul>\n<h3 id=\"2、scrollBy\"><a href=\"#2、scrollBy\" class=\"headerlink\" title=\"2、scrollBy()\"></a>2、scrollBy()</h3><p> View中的源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Move the scrolled position of your view. This will cause a call to</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onScrollChanged(int, int, int, int)&#125; and the view will be</div><div class=\"line\"> * invalidated.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> x the amount of pixels to scroll by horizontally</div><div class=\"line\"> * <span class=\"doctag\">@param</span> y the amount of pixels to scroll by vertically</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollBy</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">    scrollTo(mScrollX + x, mScrollY + y);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>只是简单调用了 srcollTo(),在原有 mScrollX 、mScrollY 的基础上增量滚动 x、y</p>\n<p>我们从刚才scrollTo(-100,-100)基础上scrollBy(50,50)，那么就相当于 scrollTo(50,50),很简单吧。<br><img src=\"http://img.blog.csdn.net/20150414095633182\" alt=\"这里写图片描述\"></p>\n<h3 id=\"3、getScrollX-；-getScrollY\"><a href=\"#3、getScrollX-；-getScrollY\" class=\"headerlink\" title=\"3、getScrollX()； getScrollY()\"></a>3、getScrollX()； getScrollY()</h3><p> View中的源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * Return the scrolled left position of this view. This is the left edge of</div><div class=\"line\">     * the displayed part of your view. You do not need to draw any pixels</div><div class=\"line\">     * farther left, since those are outside of the frame of your view on</div><div class=\"line\">     * screen.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span> The left edge of the displayed part of your view, in pixels.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getScrollX</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mScrollX;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Return the scrolled top position of this view. This is the top edge of</div><div class=\"line\">     * the displayed part of your view. You do not need to draw any pixels above</div><div class=\"line\">     * it, since those are outside of the frame of your view on screen.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span> The top edge of the displayed part of your view, in pixels.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getScrollY</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mScrollY;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>getScrollX()、getScrollY()返回的就是scrollTo(),scrollBy()中的不断变化的偏移量，我的前面的 Toast也<br>能体现出来。</p>\n","excerpt":"<h2 id=\"一、废话先说\"><a href=\"#一、废话先说\" class=\"headerlink\" title=\"一、废话先说\"></a>一、废话先说</h2><p>   我们在开发Android自定义控件时，尤其是做一些滑动效果时，往往会使用 scrollTo()、scrollBy()、getScrollX() 这几个方法。对初学者来说不太好理解这几个方法，这篇博文就来彻底弄清这几个API的用法。</p>\n<h2 id=\"二、测试界面\"><a href=\"#二、测试界面\" class=\"headerlink\" title=\"二、测试界面\"></a>二、测试界面</h2><p> 我们测试的界面中有三个Linearlayout如下图：黄色框所在的区域为屏幕显示区域</p>\n<p><img src=\"http://img.blog.csdn.net/20150414083752720\" alt=\"\"></p>\n<p>运行时如下图：<br><img src=\"http://img.blog.csdn.net/20150414084317419\" alt=\"这里写图片描述\"><br>单击按钮会执行相应的方法，并弹当前getScrollX()、getScrollY()的值 </p>","more":"<h2 id=\"三、详细讲解\"><a href=\"#三、详细讲解\" class=\"headerlink\" title=\"三、详细讲解\"></a>三、详细讲解</h2><h3 id=\"1、scrollTo\"><a href=\"#1、scrollTo\" class=\"headerlink\" title=\"1、scrollTo()\"></a>1、scrollTo()</h3><p>   View中的源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Set the scrolled position of your view. This will cause a call to</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onScrollChanged(int, int, int, int)&#125; and the view will be</div><div class=\"line\"> * invalidated.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> x the x position to scroll to</div><div class=\"line\"> * <span class=\"doctag\">@param</span> y the y position to scroll to</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollTo</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mScrollX != x || mScrollY != y) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> oldX = mScrollX;</div><div class=\"line\">        <span class=\"keyword\">int</span> oldY = mScrollY;</div><div class=\"line\">        mScrollX = x;</div><div class=\"line\">        mScrollY = y;</div><div class=\"line\">        invalidateParentCaches();</div><div class=\"line\">        onScrollChanged(mScrollX, mScrollY, oldX, oldY);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!awakenScrollBars()) &#123;</div><div class=\"line\">            postInvalidateOnAnimation();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>scrollTo用来设置你的View要滚动的坐标 </li>\n<li>mScrollX、mScrollY 表示当前View在水平和垂直方向上分别滑动了多少</li>\n<li>scrollTo执行后会调用onScrollChanged()方法</li>\n</ul>\n<p>我们执行  <strong>scrollTo(100,100)</strong> 过程如下：<br><img src=\"http://img.blog.csdn.net/20150414091643430\" alt=\"这里写图片描述\"><br>执行结果如下：<strong>我们的屏幕向左上方滑动了</strong><br><img src=\"http://img.blog.csdn.net/20150414091815236\" alt=\"这里写图片描述\"></p>\n<p>再执行  <strong>scrollTo(-100,-100)</strong> 过程如下：<br><img src=\"http://img.blog.csdn.net/20150414094119017\" alt=\"这里写图片描述\"><br>执行结果如下：<strong>我们的屏幕向右下方滑动了</strong><br><img src=\"http://img.blog.csdn.net/20150414093915469\" alt=\"这里写图片描述\"></p>\n<p>是不是很好理解呢，总结下：</p>\n<ul>\n<li><strong>x&gt;0表示视图(View或ViewGroup)的内容从右向左滑动;反之，从左向右滑动</strong></li>\n<li><strong>y&gt;0表示视图(View或ViewGroup)的内容从下向上滑动;反之，从上向下滑动</strong></li>\n</ul>\n<h3 id=\"2、scrollBy\"><a href=\"#2、scrollBy\" class=\"headerlink\" title=\"2、scrollBy()\"></a>2、scrollBy()</h3><p> View中的源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Move the scrolled position of your view. This will cause a call to</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onScrollChanged(int, int, int, int)&#125; and the view will be</div><div class=\"line\"> * invalidated.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> x the amount of pixels to scroll by horizontally</div><div class=\"line\"> * <span class=\"doctag\">@param</span> y the amount of pixels to scroll by vertically</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollBy</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">    scrollTo(mScrollX + x, mScrollY + y);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>只是简单调用了 srcollTo(),在原有 mScrollX 、mScrollY 的基础上增量滚动 x、y</p>\n<p>我们从刚才scrollTo(-100,-100)基础上scrollBy(50,50)，那么就相当于 scrollTo(50,50),很简单吧。<br><img src=\"http://img.blog.csdn.net/20150414095633182\" alt=\"这里写图片描述\"></p>\n<h3 id=\"3、getScrollX-；-getScrollY\"><a href=\"#3、getScrollX-；-getScrollY\" class=\"headerlink\" title=\"3、getScrollX()； getScrollY()\"></a>3、getScrollX()； getScrollY()</h3><p> View中的源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">     * Return the scrolled left position of this view. This is the left edge of</div><div class=\"line\">     * the displayed part of your view. You do not need to draw any pixels</div><div class=\"line\">     * farther left, since those are outside of the frame of your view on</div><div class=\"line\">     * screen.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span> The left edge of the displayed part of your view, in pixels.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getScrollX</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mScrollX;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Return the scrolled top position of this view. This is the top edge of</div><div class=\"line\">     * the displayed part of your view. You do not need to draw any pixels above</div><div class=\"line\">     * it, since those are outside of the frame of your view on screen.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span> The top edge of the displayed part of your view, in pixels.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getScrollY</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mScrollY;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>getScrollX()、getScrollY()返回的就是scrollTo(),scrollBy()中的不断变化的偏移量，我的前面的 Toast也<br>能体现出来。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cizgem1r80004klc1kdfv1oou","category_id":"cizgem1rh000bklc17d7mp4w3","_id":"cizgem1rp000mklc1f1yij7di"},{"post_id":"cizgem1rc0008klc1hj72pfi7","category_id":"cizgem1rh000bklc17d7mp4w3","_id":"cizgem1rr000qklc13zv8lvjd"},{"post_id":"cizgem1rg0009klc16z3cba3r","category_id":"cizgem1rp000nklc1dp71aj12","_id":"cizgem1rs000uklc1oz2krxm0"},{"post_id":"cizgem1rh000aklc1j3wgodc8","category_id":"cizgem1rh000bklc17d7mp4w3","_id":"cizgem1rt000yklc1d6rbzes9"},{"post_id":"cizgem1rk000gklc1f7jullb0","category_id":"cizgem1rs000vklc1k2s72o6h","_id":"cizgem1rw0015klc1xq7ujrrh"},{"post_id":"cizgem1rn000jklc1srbz72c8","category_id":"cizgem1rs000vklc1k2s72o6h","_id":"cizgem1rx0019klc1b8f351ga"},{"post_id":"cizgem1ro000lklc1waujeg5w","category_id":"cizgem1rp000nklc1dp71aj12","_id":"cizgem1rz001cklc1v097t9t4"},{"post_id":"cizgem1ri000eklc1try6pj5w","category_id":"cizgem1rs000vklc1k2s72o6h","_id":"cizgem1rz001dklc1vmi3f6wc"},{"post_id":"cizgem1ri000eklc1try6pj5w","category_id":"cizgem1rx001aklc1c1gd1dvj","_id":"cizgem1rz001eklc1y5ncawjh"}],"PostTag":[{"post_id":"cizgem1r80004klc1kdfv1oou","tag_id":"cizgem1rh000cklc1fszj1qen","_id":"cizgem1ro000kklc1um8tl9rx"},{"post_id":"cizgem1rc0008klc1hj72pfi7","tag_id":"cizgem1rh000cklc1fszj1qen","_id":"cizgem1rq000pklc1ycec5llh"},{"post_id":"cizgem1rg0009klc16z3cba3r","tag_id":"cizgem1rp000oklc151tifplf","_id":"cizgem1rs000tklc10mn0lv6k"},{"post_id":"cizgem1rh000aklc1j3wgodc8","tag_id":"cizgem1rr000sklc18xbnabzu","_id":"cizgem1rt000xklc19ytto8oh"},{"post_id":"cizgem1ri000eklc1try6pj5w","tag_id":"cizgem1rt000wklc113s0xfg4","_id":"cizgem1rv0011klc1qi1d7u0p"},{"post_id":"cizgem1rk000gklc1f7jullb0","tag_id":"cizgem1rt000wklc113s0xfg4","_id":"cizgem1rw0014klc12dwd8cga"},{"post_id":"cizgem1rn000jklc1srbz72c8","tag_id":"cizgem1rt000wklc113s0xfg4","_id":"cizgem1rx0018klc1mbgj85cd"},{"post_id":"cizgem1ro000lklc1waujeg5w","tag_id":"cizgem1rx0017klc1q4knglwm","_id":"cizgem1rz001bklc11xzg8tvh"}],"Tag":[{"name":"Android面试","_id":"cizgem1rc0007klc1clczzdh8"},{"name":"RxJava","_id":"cizgem1rh000cklc1fszj1qen"},{"name":"Android自定义控件","_id":"cizgem1rp000oklc151tifplf"},{"name":"Rxjava","_id":"cizgem1rr000sklc18xbnabzu"},{"name":"hexo","_id":"cizgem1rt000wklc113s0xfg4"},{"name":"android","_id":"cizgem1rx0017klc1q4knglwm"}]}}