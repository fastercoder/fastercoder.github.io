{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/avatar.png","path":"avatar.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"29928ddf026579b412417196e6fb7fa28f0b1880","modified":1500197978000},{"_id":"source/404.html","hash":"75f79c7a9f1072300986dc8b56e6cca36b2b7646","modified":1450295104000},{"_id":"source/CNAME","hash":"8df53c08e609c44ce50e952108a97e4fc64d5be1","modified":1450187562000},{"_id":"source/baidu_verify_PyyIitQewd.html","hash":"d2bc82f39215b06b9c9d4e944ccb81daabbf06fe","modified":1468199414000},{"_id":"source/favicon.ico","hash":"859f54b1fdac4aa88249f506042ea9cddf111e9c","modified":1451699610000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1524368750694},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1524368750694},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1524368750694},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1524368750695},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1524368750695},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1524368750695},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1524368750695},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1524368750696},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1524368750696},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1524368750696},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1524369804531},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1524369804531},{"_id":"themes/next/_config.yml","hash":"6a14f67f34f2f9e13c727703ea500276a090bbe7","modified":1529395962754},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1524368750697},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1524368750697},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1524368750716},{"_id":"source/about/index.md","hash":"75bfb649c47ddc9c9c555985ebf1d55b1225ad0a","modified":1450292630000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1524366861232},{"_id":"source/_posts/ADB（Android-Debug-Bridge.md","hash":"13e26f13b412e5a45f197fe29c5686693e14d0d0","modified":1531187616195},{"_id":"source/_posts/Android自定义控件之旅（一）滑动开关.md","hash":"5229c633e64d1a959e4f6f620757f41cdcda3684","modified":1467423442000},{"_id":"source/_posts/Dagger2-入门.md","hash":"8663cef10187a6ebc7f6022e8371ac150a84d360","modified":1488793946000},{"_id":"source/_posts/Dagger2（一）Dagger2的基本使用和原理.md","hash":"4ba68f7e9666934481cb00e74c6a2fda69a4a76a","modified":1549784261548},{"_id":"source/_posts/Dagger2（三）Subcomponents.md","hash":"0b1b1f4169658ba9f6f263e4c6d8b113f34c4a21","modified":1549784523497},{"_id":"source/_posts/Dagger2（二）-Lazy、Qualifier、Scope等.md","hash":"ed4bbb49e1c84f43f3ff8198c5d72fe6d9d99dae","modified":1549784446979},{"_id":"source/_posts/Dagger2（五）Android中的扩展使用.md","hash":"e738bdc8af70016beeb254a002b0ca74576b270b","modified":1549784728642},{"_id":"source/_posts/Dagger2（四）Multibindings.md","hash":"885b50cd0ad753ebd479a00e82a9c18712ade0a4","modified":1549784856824},{"_id":"source/_posts/Guice.md","hash":"fc945b5ea804ed8e2c654b981a9bf067d6222e4c","modified":1549784139368},{"_id":"source/_posts/Mysql-连接查询.md","hash":"3eab6a5ad8d55f64dc7c17af2d51bf32b6148efe","modified":1529372590339},{"_id":"source/_posts/ReacNative(一)基础篇.md","hash":"72f5495b78aa086fa4527daa0284f191d235f81a","modified":1524367436671},{"_id":"source/_posts/ReacNative基础篇 (二).md","hash":"182f4c7b21d7c5a23accd26c7a039bb9db2fa470","modified":1524367366472},{"_id":"source/_posts/RxJava探究（一）RxJava初体验.md","hash":"a7b658867e9e1387a9dfa1a6d8b523b1d61aa13c","modified":1487736659000},{"_id":"source/_posts/RxJava探究（三）-RxJava操作符之Transforming-Observables.md","hash":"b901ecc7aef21716fc09bff397c070a901d200e8","modified":1487736707000},{"_id":"source/_posts/RxJava探索（二-RxJava操作符之Creating-Observables.md","hash":"e1b0138ad00319597a7adbf73c40b8e32973fa23","modified":1487736689000},{"_id":"source/_posts/Vue2-0-一-基础指令.md","hash":"f98de8d7acb5a57ca3069c5fd85171db54f321a9","modified":1524367292635},{"_id":"source/_posts/es6新特性.md","hash":"6b5ae5e6c96a4d31d9c42b274d9219d88632bcfe","modified":1524367390528},{"_id":"source/_posts/搭建hexo博客.md","hash":"79e65f8df0c561809e1ee962716b1b26a0f9b952","modified":1450503532000},{"_id":"source/_posts/搭建hexo博客（三）使用七牛存储图片.md","hash":"9b2df75b90809eb9bd454c94d77c4152db204097","modified":1467429788000},{"_id":"source/_posts/搭建hexo博客（二）准备工作.md","hash":"0d416b86fe004890bcd4e5bbfaf4f6c9b666b628","modified":1450615092000},{"_id":"source/_posts/深入理解-scrollTo-、scrollBy-、getScrollX.md","hash":"9c4652a773fdc01f4fc926345d29787520786b64","modified":1450922078000},{"_id":"source/categories/index.md","hash":"3a1f64a90678b49028f17bad0d236394761f7bf1","modified":1450408196000},{"_id":"source/tags/index.md","hash":"68e22b5a16f7c39f32177779d97675e3ec5720a7","modified":1450408064000},{"_id":"themes/next/.git/FETCH_HEAD","hash":"778b51a21e3c53e17a5b722a6329f3f7c0eb829f","modified":1524369531678},{"_id":"themes/next/.git/HEAD","hash":"66e8b5048a20ce41a8a240072e535d725d62aef4","modified":1524369804533},{"_id":"themes/next/.git/ORIG_HEAD","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1524369531689},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1524368750690},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1524368710505},{"_id":"themes/next/.git/index","hash":"2ac554693d899232b88c20c44ba8cadf89cca6be","modified":1549783493758},{"_id":"themes/next/.git/packed-refs","hash":"8e36811256ee380c2c65692f1b8f8e77c5bc33c9","modified":1524368750686},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1524368750694},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1524369804530},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1524368750695},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1524368750695},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1524368750697},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1524368750697},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1524368750697},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1524368750698},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1524368750698},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1524368750698},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1524368750698},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1524368750698},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1524368750698},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1524368750699},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1524368750699},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1524368750699},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1524368750699},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1524368750699},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1524368750699},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1524368750699},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1524368750700},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1524368750714},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1524368750714},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1524368750715},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1524368750715},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1524368750715},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1524368750715},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1524368750715},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1524368750716},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1524368750717},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1524368750800},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1524368750800},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1524368750800},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524368750747},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1524368710505},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1524368710505},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1524368710506},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1524368710506},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1524368710505},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1524368710506},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1524368710505},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1524368710505},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1524368710505},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1524368710506},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1524368710504},{"_id":"themes/next/.git/logs/HEAD","hash":"25c1352534ca534d1805bc0eb41ec159c0002751","modified":1524369804534},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1524368750700},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1524368750700},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1524368750700},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1524368750701},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1524368750701},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1524368750701},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1524368750703},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1524368750703},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1524368750703},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1524368750703},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1524368750703},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1524368750704},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1524368750704},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1524368750704},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1524368750705},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1524368750707},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1524368750707},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1524368750707},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1524368750712},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1524368750712},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1524368750712},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1524368750712},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1524368750712},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1524368750713},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1524368750713},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1524368750717},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1524368750717},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1524368750717},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1524368750717},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1524368750718},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1524368750718},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1524368750718},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1524368750718},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1524368750719},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1524368750747},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1524368750748},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1524368750748},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1524368750748},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1524368750748},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1524368750749},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1524368750749},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1524368750749},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1524368750749},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1524368750750},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1524368750750},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1524368750750},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1524368750750},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1524368750750},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1524368750751},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1524368750751},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1524368750751},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1524368750751},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1524368750751},{"_id":"source/avatar.png","hash":"d4a219d83454743dacff786d1245b45c8794f668","modified":1500024225000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524368750707},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524368750707},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524368750741},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524368750741},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524368750741},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524368750746},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524368750747},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1524368750689},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1524368750704},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1524368750704},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1524368750705},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1524368750705},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1524368750705},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1524368750706},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1524368750706},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1524368750706},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1524368750706},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1524368750707},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1524368750707},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1524368750707},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1524368750708},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1524368750708},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1524368750708},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1524368750708},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1524368750708},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1524368750708},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1524368750708},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1524368750709},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1524368750709},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1524368750709},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1524368750709},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1524368750709},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1524368750710},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1524368750710},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1524368750710},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1524368750710},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1524368750710},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1524368750711},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1524368750711},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1524368750711},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1524368750711},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1524368750711},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1524368750713},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1524368750713},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1524368750714},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1524368750714},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1524368750740},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1524368750741},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1524368750741},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1524368750741},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1524368750746},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1524368750746},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1524368750746},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1524368750747},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1524368750752},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1524368750752},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1524368750752},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1524368750752},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1524368750753},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1524368750753},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1524368750753},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1524368750753},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1524368750754},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1524368750754},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1524368750754},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1524368750759},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1524368750762},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1524368750762},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1524368750764},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1524368750764},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1524368750768},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1524368750768},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1524368750769},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1524368750769},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1524368750770},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1524368750770},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1524368750770},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1524368750770},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1524368750771},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1524368750783},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1524368750784},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1524368750784},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1524368750784},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1524368750785},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1524368750785},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1524368750785},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1524368750786},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1524368750786},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1524368750786},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1524368750787},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1524368750787},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1524368750787},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1524368750787},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1524368750787},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1524368750788},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1524368750788},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1524368750788},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1524368750788},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1524368750789},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1524368750789},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1524368750789},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1524368750789},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1524368750790},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1524368750790},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1524368750791},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1524368750791},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1524368750796},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1524368750796},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1524368750799},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1524368750799},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1524368750799},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1524368750784},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"67f6a57a8412c2632032cd57462590bae52e733e","modified":1524368750689},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1524368750688},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1524368750713},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1524368750713},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1524368750719},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1524368750719},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1524368750719},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1524368750720},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1524368750720},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1524368750725},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1524368750734},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1524368750739},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1524368750739},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1524368750739},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1524368750739},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1524368750740},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1524368750740},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1524368750740},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1524368750741},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1524368750742},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1524368750742},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1524368750742},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1524368750742},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1524368750742},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1524368750743},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1524368750742},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1524368750743},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1524368750743},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1524369804531},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1524368750744},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1524368750744},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1524368750744},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1524368750745},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1524368750745},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1524368750745},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1524368750745},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1524368750746},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1524368750754},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1524368750757},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1524368750758},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1524368750758},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1524368750764},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1524368750764},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1524368750765},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1524368750765},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1524368750765},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1524368750765},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1524368750767},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1524368750768},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1524368750768},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1524368750769},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1524368750770},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1524368750771},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1524368750771},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1524368750772},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1524368750795},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1524368750796},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1524368750758},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1524368750782},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1524368750782},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1524368750798},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"67f6a57a8412c2632032cd57462590bae52e733e","modified":1524368750687},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1524368750720},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1524368750722},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1524368750723},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1524368750723},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1524368750721},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1524368750721},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1524368750721},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1524368750722},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1524368750722},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1524368750723},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1524368750724},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1524368750724},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1524368750725},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1524368750725},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1524368750726},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1524368750726},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1524368750726},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1524368750727},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1524368750727},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1524368750728},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1524368750727},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1524368750728},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1524368750728},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1524368750728},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1524368750729},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1524368750729},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1524368750729},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1524368750730},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1524368750730},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1524368750730},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1524368750731},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1524368750731},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1524368750731},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1524368750732},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1524368750732},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1524368750732},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1524368750733},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1524368750733},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1524368750733},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1524368750734},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1524368750734},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1524368750735},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1524368750735},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1524368750735},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1524368750735},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1524368750735},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1524368750736},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1524368750736},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1524368750736},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1524368750736},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1524368750737},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1524368750737},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1524368750737},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1524368750737},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1524368750738},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1524368750738},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1524368750738},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1524368750738},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1524368750743},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1524368750743},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1524368750744},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1524368750755},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1524368750756},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1524368750756},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1524368750756},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1524368750756},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1524368750766},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1524368750766},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1524368750766},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1524368750766},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1524368750767},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1524368750767},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1524368750773},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1524368750775},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1524368750781},{"_id":"themes/next/.git/objects/pack/pack-4a376867f92a55cc1eff78dd206b449049df8e30.idx","hash":"5d82e4a6963dfe724c3089c59327e82e9d35f246","modified":1524368750664},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1524368750761},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1524368750795},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1524368750779},{"_id":"themes/next/.git/objects/pack/pack-4a376867f92a55cc1eff78dd206b449049df8e30.pack","hash":"9b960c80f1ec4d36aa534a86efe48883d7046fb8","modified":1524368750659},{"_id":"public/baidu_verify_PyyIitQewd.html","hash":"3bb5ff390d0df3b602c8309fbf19e75168a3c0b7","modified":1549784747375},{"_id":"public/content.json","hash":"99a916eee98956d4c15bd1fcf65f832a0d3d70d4","modified":1549784866126},{"_id":"public/404.html","hash":"a9b187e08d2ef8e09a300f20c7df5d0de4d31118","modified":1549784747530},{"_id":"public/about/index.html","hash":"cab9e72be1ab512fd56463a55c733aad7ea5fef7","modified":1549784747531},{"_id":"public/categories/index.html","hash":"6201b69291d52130479450dddd91ff46cd372d55","modified":1549784747531},{"_id":"public/tags/index.html","hash":"b6974641a29fca65dcc8458998c458cd8bdb6ff7","modified":1549784747531},{"_id":"public/archives/2016/01/index.html","hash":"dc440e862f1431472327913ea8176dcfb1cce020","modified":1549784747531},{"_id":"public/archives/2016/05/index.html","hash":"04dfdcf76985bfaba4177d299cb4c7fc4929cf36","modified":1549784747531},{"_id":"public/archives/2016/07/index.html","hash":"77dc2b7dee3a0ab311beff4ea3e51da2bb39aea5","modified":1549784747531},{"_id":"public/archives/2017/02/index.html","hash":"2564c453105dcf06efa85bafa58d788337cb5c7c","modified":1549784747531},{"_id":"public/archives/2017/07/index.html","hash":"002347c88e988e4002ab4ffdc3fbd65148df39a8","modified":1549784747531},{"_id":"public/archives/2018/index.html","hash":"5aeb3c9482c45696394d5e9ae35eb889d9393881","modified":1549784747531},{"_id":"public/archives/2018/04/index.html","hash":"33d8f2814b0b62a9b3142f48d33960ae9a73376e","modified":1549784747531},{"_id":"public/archives/2018/06/index.html","hash":"8fd77178d734b1994629e3ffb2d7be2998ebad72","modified":1549784747531},{"_id":"public/archives/2018/07/index.html","hash":"831ff734aa5aceb9f454c6929b3b3ecdebcd7ddd","modified":1549784747531},{"_id":"public/categories/Android/index.html","hash":"fb5d15cecb0e0083e752d3b15d63f527d1a48c83","modified":1549784747532},{"_id":"public/categories/Android开发/index.html","hash":"57d9726428b3c22ed119ef9b16e800207734051c","modified":1549784747532},{"_id":"public/categories/Dagger/index.html","hash":"70eb243c7d38c783909b07879c5137976a2efe30","modified":1549784747532},{"_id":"public/categories/SQL/index.html","hash":"2e0c3727475ef4cd96d50e1e7e44f8b8beb1efa1","modified":1549784747532},{"_id":"public/categories/react-native/index.html","hash":"6887bb37f97a595431f477daa68652781570aa8a","modified":1549784747532},{"_id":"public/categories/RxJava探究/index.html","hash":"e8e5906c01fa0a694d1be5ff29ec5e373225570e","modified":1549784747532},{"_id":"public/categories/前端开发/index.html","hash":"ebc005641fbb224d0f8efbd88f6a1b78233e4cba","modified":1549784747532},{"_id":"public/categories/javascript/index.html","hash":"d6dcc6b1c83f5ea8f04832a70fb5e3a0bf9f7435","modified":1549784747532},{"_id":"public/categories/hexo搭建个人博客/index.html","hash":"e2c53a83afe6f30a75f124cd2d428342b8dfe60a","modified":1549784747532},{"_id":"public/categories/hexo搭建个人博客/个人随感/index.html","hash":"b78daf14c1eb9f7d034a0765e33dfaa88b42aef4","modified":1549784747532},{"_id":"public/tags/ADB/index.html","hash":"3c1cee21ca19c8f436f935ee5b3c08a6ccbed742","modified":1549784747532},{"_id":"public/tags/Android自定义控件/index.html","hash":"a5f8a3e1ed305a19aa4e93f42e48dab13a3308b5","modified":1549784747532},{"_id":"public/tags/Mysql/index.html","hash":"1a53d7e0cc0765769e03494e7661e6f00463b3e9","modified":1549784747532},{"_id":"public/tags/react-native/index.html","hash":"fbde0ffdb30e88b5116f0b329abaad85a52ae735","modified":1549784747532},{"_id":"public/tags/RxJava/index.html","hash":"33358f83d0068f61e56ee9200392a47c92583c3a","modified":1549784747532},{"_id":"public/tags/Rxjava/index.html","hash":"05edfd78b420c97845a1ff249585fe6fd7966c66","modified":1549784747532},{"_id":"public/tags/Vue/index.html","hash":"9aceed8bdd7f7c3e2d5ff5339aec0b261ab5bf6f","modified":1549784747533},{"_id":"public/tags/javascript/index.html","hash":"ff67cc6483a55b591971196d65ea97d420020e36","modified":1549784747533},{"_id":"public/tags/hexo/index.html","hash":"770a3abea98ee66a16be6cc16083133a7e08c551","modified":1549784747533},{"_id":"public/tags/android/index.html","hash":"4175eb82ce8aefac8849722bed6ab2f745cf1e25","modified":1549784747533},{"_id":"public/2019/02/10/Dagger2（四）Multibindings/index.html","hash":"422b7c851a4b5e522a7ef771342c3ae1a791da77","modified":1549784866148},{"_id":"public/2019/02/10/Dagger2（三）Subcomponents/index.html","hash":"51630a379fa35172dddf755a72c3258548750494","modified":1549784747533},{"_id":"public/2019/02/10/Dagger2（二）-Lazy、Qualifier、Scope等/index.html","hash":"3e8d7bb8867fdae5adca638e1b5a5112b712a621","modified":1549784747533},{"_id":"public/2019/02/10/Dagger2（一）Dagger2的基本使用和原理/index.html","hash":"86658dd840395a31e3ea02899fb7a0173c9423f6","modified":1549784747533},{"_id":"public/2019/02/10/Guice/index.html","hash":"235d6a73d6ab014fc7f4ac2ac47cb99f88464086","modified":1549784747533},{"_id":"public/2018/07/10/ADB（Android-Debug-Bridge/index.html","hash":"830b3607a6dc1e152dfc4cac56373aee45a0b208","modified":1549784747533},{"_id":"public/2018/06/19/Mysql-连接查询/index.html","hash":"3aefd6989dd2b679ff0892583b3f5261c0ec1697","modified":1549784747533},{"_id":"public/2018/04/22/Vue2-0-一-基础指令/index.html","hash":"d7efeae90200e56792ae368376e934932a539fa8","modified":1549784747533},{"_id":"public/2017/07/16/ReacNative基础篇 (二)/index.html","hash":"d4d0cb68d2022401c28d9f6660b9ef0bf957e33d","modified":1549784747533},{"_id":"public/2017/07/13/es6新特性/index.html","hash":"15036c9f6ec96e10f47b3066038152aa6b17d717","modified":1549784747533},{"_id":"public/2017/07/12/ReacNative(一)基础篇/index.html","hash":"8ac66c16cefe0811ba744f72dcd9a789631c0eec","modified":1549784747533},{"_id":"public/2017/02/27/Dagger2-入门/index.html","hash":"bf473efab756808a0e5776b5123cea86edefdad9","modified":1549784747534},{"_id":"public/2016/07/03/RxJava探究（三）-RxJava操作符之Transforming-Observables/index.html","hash":"15d972f668d4bbcd42ef6c7f4e04a0711822a323","modified":1549784747534},{"_id":"public/2016/07/02/RxJava探索（二-RxJava操作符之Creating-Observables/index.html","hash":"04d307fe2aa9c8582d62cd60249858ea0b6590f5","modified":1549784747534},{"_id":"public/2016/05/02/RxJava探究（一）RxJava初体验/index.html","hash":"0bda7fa1e8b044e3133d24da969fda3e5012c995","modified":1549784747534},{"_id":"public/2016/01/09/搭建hexo博客（三）使用七牛存储图片/index.html","hash":"0e9f44e4921d9cc8197812b8932bb6eb7ceb104b","modified":1549784747534},{"_id":"public/2015/12/28/Android自定义控件之旅（一）滑动开关/index.html","hash":"0eb4cac017655bca981982a1ff1297338d4e8998","modified":1549784747534},{"_id":"public/2015/12/24/深入理解-scrollTo-、scrollBy-、getScrollX/index.html","hash":"dcea6026bfef2645c71a0b37c2e267175b4a717e","modified":1549784747534},{"_id":"public/2015/12/20/搭建hexo博客（二）准备工作/index.html","hash":"7e4a8607cc75d8d7eea72617ec06d84b1ce1c6d5","modified":1549784747534},{"_id":"public/2015/12/17/搭建hexo博客/index.html","hash":"34449a8d1abbb09619063b3044b07f8d9b4f148e","modified":1549784747534},{"_id":"public/archives/index.html","hash":"58c9ad67650464ebf49b7ceadfcc3a4957af757b","modified":1549784747534},{"_id":"public/archives/page/2/index.html","hash":"b0039e6b32ef50b0ffe1d726b3a93bd943933c9c","modified":1549784747534},{"_id":"public/archives/2015/index.html","hash":"97d0262b880c00b4315ec06e42ea9434fe505104","modified":1549784747534},{"_id":"public/archives/2015/12/index.html","hash":"7f8227022441954d77d48647e2ab0ed6453cec49","modified":1549784747534},{"_id":"public/archives/2016/index.html","hash":"17bbbb97f8d404a204e462931ab661486f0a7312","modified":1549784747535},{"_id":"public/archives/2017/index.html","hash":"1e2ed9e80b3e4bad556346575f4beeef9fb93213","modified":1549784747535},{"_id":"public/archives/2019/index.html","hash":"8f2bb6e9a2dbc4713d05e2801bb1e60586b7094e","modified":1549784747535},{"_id":"public/archives/2019/02/index.html","hash":"33138e89d52dd0cdbdc5ff36151932a9f81c952b","modified":1549784747535},{"_id":"public/categories/Dagger2/index.html","hash":"a03be6fc83ac568bc422f13b903f25f946fd5c60","modified":1549784747535},{"_id":"public/index.html","hash":"c9958b472e446ee7be8d99c71828b7fb7b573210","modified":1549784866148},{"_id":"public/page/2/index.html","hash":"15898989d0e45802367fc33be2c5f4887d159eca","modified":1549784747535},{"_id":"public/tags/Dagger2/index.html","hash":"10a186f28ede19773831d8c98646bf6fb185d5ea","modified":1549784747535},{"_id":"public/archives/page/3/index.html","hash":"74522e755ac6d113207a40b96e97c2bdebda01bc","modified":1549784747542},{"_id":"public/2019/02/10/Dagger2（五）Android中的扩展使用/index.html","hash":"0d65198821031de2796658ac2684648a0a918dbd","modified":1549784747542},{"_id":"public/page/3/index.html","hash":"843010ffcfe6d239ad2c9e2e6ebe85b90481d703","modified":1549784747543},{"_id":"public/CNAME","hash":"8df53c08e609c44ce50e952108a97e4fc64d5be1","modified":1549784747548},{"_id":"public/favicon.ico","hash":"859f54b1fdac4aa88249f506042ea9cddf111e9c","modified":1549784747548},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1549784747548},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1549784747548},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1549784747548},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1549784747548},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1549784747548},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1549784747548},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1549784747548},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1549784747549},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1549784747549},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1549784747549},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1549784747549},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1549784747549},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1549784747549},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1549784747549},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1549784747549},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1549784747549},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1549784747549},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1549784747549},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1549784747549},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1549784747549},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1549784747549},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1549784747550},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1549784747550},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1549784747550},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1549784747550},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1549784747550},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1549784747550},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1549784747550},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1549784747550},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1549784747550},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1549784747550},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1549784747550},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1549784747550},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1549784748062},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1549784748068},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1549784748079},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1549784748079},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1549784748080},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1549784748080},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1549784748080},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1549784748080},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1549784748080},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1549784748080},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1549784748080},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1549784748080},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1549784748080},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1549784748080},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1549784748080},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1549784748080},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1549784748080},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1549784748080},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1549784748080},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1549784748080},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1549784748080},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1549784748080},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1549784748080},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1549784748081},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1549784748081},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1549784748081},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1549784748081},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1549784748081},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1549784748081},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1549784748081},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1549784748081},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1549784748081},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1549784748081},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1549784748081},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1549784748081},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1549784748081},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1549784748081},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1549784748081},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1549784748081},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1549784748081},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1549784748081},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1549784748081},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1549784748081},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1549784748082},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1549784748082},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1549784748082},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1549784748082},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1549784748082},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1549784748082},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1549784748082},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1549784748082},{"_id":"public/css/main.css","hash":"cf66cc893872f80f82713de836f2c9cdfc6581cf","modified":1549784748082},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1549784748082},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1549784748082},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1549784748082},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1549784748083},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1549784748083},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1549784748083},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1549784748083},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1549784748083},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1549784748083},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1549784748083},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1549784748084},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1549784748084},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1549784748084},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1549784748084},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1549784748084},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1549784748084},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1549784748084},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1549784748084},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1549784748085},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1549784748085},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1549784748085},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1549784748086},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1549784748086},{"_id":"public/avatar.png","hash":"d4a219d83454743dacff786d1245b45c8794f668","modified":1549784748093},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1549784748095}],"Category":[{"name":"Android","_id":"cjryltlax0006ncaq5c9zhx0a"},{"name":"Android开发","_id":"cjryltlb1000bncaqzs0nw1v0"},{"name":"Dagger","_id":"cjryltlb4000hncaq5tuwql2v"},{"name":"Dagger2","_id":"cjryltlb7000nncaqgyz4kdr8"},{"name":"SQL","_id":"cjryltlbi001jncaqwvjd5tyu"},{"name":"react native","_id":"cjryltlbl001pncaqxglollls"},{"name":"RxJava探究","_id":"cjryltlbm001yncaqf4l2uxzx"},{"name":"前端开发","_id":"cjryltlbo002ancaqpn9dyj72"},{"name":"javascript","_id":"cjryltlbp002encaqnfx02zwj"},{"name":"hexo搭建个人博客","_id":"cjryltlbq002incaqn19m6rfr"},{"name":"个人随感","parent":"cjryltlbq002incaqn19m6rfr","_id":"cjryltlbs002sncaqzntg9ciw"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"your site url \" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"your site url \" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>\n","date":"2017-02-21T09:50:55.000Z","updated":"2015-12-16T19:45:04.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjryltl8m0000ncaqgy19tc4f","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"your site url \" homepagename=\"回到我的主页\"></script>\n\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"your site url \" homepagename=\"回到我的主页\"></script>\n\n</body>\n</html>\n"},{"layout":"false","_content":"PyyIitQewd\n","source":"baidu_verify_PyyIitQewd.html","raw":"layout: false\n---\nPyyIitQewd\n","date":"2017-02-21T09:50:55.000Z","updated":"2016-07-11T01:10:14.000Z","path":"baidu_verify_PyyIitQewd.html","title":"","comments":1,"_id":"cjryltl8n0001ncaqttmyrle1","content":"PyyIitQewd\n","site":{"data":{}},"excerpt":"","more":"PyyIitQewd\n"},{"title":"about","date":"2015-12-16T19:03:50.000Z","_content":"","source":"about/index.md","raw":"title: about\ndate: 2015-12-17 03:03:50\n---\n","updated":"2015-12-16T19:03:50.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjryltlar0002ncaqjqz25t32","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2015-12-16T19:07:24.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"title: categories\ndate: 2015-12-17 03:07:24\ntype: \"categories\"\ncomments: false\n---\n","updated":"2015-12-18T03:09:56.000Z","path":"categories/index.html","layout":"page","_id":"cjryltlaw0004ncaqp4kdls7r","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2015-12-16T19:07:53.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2015-12-17 03:07:53\ntype: \"tags\"\ncomments: false\n---\n","updated":"2015-12-18T03:07:44.000Z","path":"tags/index.html","layout":"page","_id":"cjryltlg5002wncaq92vv48mp","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ADB（Android Debug Bridge)","date":"2018-07-10T01:47:20.000Z","_content":"\n## ADB（Android Debug Bridge)\nAndroid调试桥（adb），它是一个通用命令行工具，可以管理、调试Emulator(模拟机)或Device(安卓真机)，并且提供对 Unix shell的访问。它是一个C/S架构的应用程序，由三部分组成\n\n* Client端 ：运行在开发机器中, 即你的开发PC机. 用来发送adb命令。\n* Deamon守护进程 ：该组件在设备上运行命令。后台程序在每个模拟器或设备实例上作为后台进程运行。\n* Server端 ：作为一个后台进程运行在开发机器中, 即你的开发PC机。 用来管理PC中的Client端和手机的Deamon之间的通信。\n\n\n\n## 安装\n* android_sdk/platform-tools/\n\n```\nexport ANDROID_HOME=/Users/zhaohaiyang/Library/Android/sdk\nexport PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools\n```\n* brew cask install android-platform-tools\n\n<!--more-->\n\n## adb 的工作方式\n\n* 启动一个 adb 客户端时，此客户端首先检查是否有已运行的 adb 服务器进程。如果没有，它将启动服务器进程。当服务器启动时，它与本地 TCP 端口 5037 绑定，并侦听从 adb 客户端发送的命令—所有 adb 客户端均使用端口 5037 与 adb 服务器通信。\n* 服务器设置与所有运行的模拟器/设备实例的连接。它通过扫描 5555 到 5585 之间（模拟器/设备使用的范围）的奇数号端口查找模拟器/设备实例。服务器一旦发现 adb 后台程序，它将设置与该端口的连接。\n* 服务器和模拟器/设备连接时使用两个(一组)端口进行。一个奇数的5555，先建立adb server与adb daemon的调试专用的连接；一个为偶数的5554，再建立与Emulator（或Device）实例的连接。\nadb server通过扫描5555—5585之间的奇数端口搜索adb daemon，进行adb 连接；而用相应的偶数端口(奇数端口号-1，如5555对应5554)进行Emulator或Device实例的连接。\n![image](https://upload-images.jianshu.io/upload_images/1888909-2a4a68b3d96ee4b3.png)\n\n## 开启adb调试\n\n* 在开发者选项中打开USB调试 ：Settings > About phone 并点按 Build number 七次，就可以找到开发者选项。\n* 连接USB线\n\n## 通过 WLAN 连接到设备\n\n* PC和设备连接同一WLAN。\n* USB连接设备。\n* 设置目标设备以侦听端口 5555 上的 TCP/IP 连接。\n\n```\nadb tcpip 5555\n```\n* 连接至设备，通过 IP 地址识别此设备。\n```\nadb connect 192.168.3.102\n```\n* 请确认您的主计算机已连接至目标设备：\n\n```\n~ adb devices\nList of devices attached\n192.168.3.102:5555    device\n```\n\n## 查询设备\n在发出 adb 命令之前，知道哪些模拟器/设备实例已连接到 adb 服务器会很有帮助。您可以使用 devices 命令生成已连接的模拟器/设备的列表\n\nadb devices\n\n输出的格式类似如下:\n\nList of devices attached\nserial_number state\n\n* 序列号(serial_number): 一个由 adb 创建的字符串,序列号的格式为 type-console-port\n* 状态(state)\n* offline — 实例未连接到 adb 或不响应。\n* device — 实例现在已连接到 adb 服务器。\n* no device — 未连接模拟器/设备。\n\n## 设置端口转发\n\n使用 forward 命令设置任意端口转发 — 将对特定PC端口的请求转发到模拟器/设备实例上的其他端口\n\n```\nadb forward tcp:6100 tcp:7100 //adb forward <local> <remote>\n\n```\n\n## adb 命令参考\n\n\n#### 目标设备\n\n* -d : 将 adb 命令发送至唯一连接的 USB 设备,如果连接了多个 USB 设备，将返回错误。\n* -e : 将 adb 命令发送至唯一运行的模拟器实例,如果有多个模拟器实例在运行，将返回错误。\n* **-s serial_number** : 连接指定的设备/模拟器。\n\nadb -s 192.168.3.102:5555 install .....\n\n#### 常规\n* devices :\n* help :\n* version:\n\n#### 调试\n* **logcat [option] [filter-specs]**\n```\nadb logcat -s TAG //按TAG过滤\nadb logcat *:V[/D/I/W/E/F/S] //指定Level,S 表示为不输出该标签的日志\nadb logcat > ~/log.txt //输出到文件\nadb logcat | grep \"^..Activity\" //正则匹配\n```\n* bugreport : 将 dumpsys、dumpstate 和 logcat 数据输出到屏幕，以用于报告错误。\n* jdwp :输出给定设备上可用的 JDWP 进程的列表。\n\n#### 数据\n* install : adb install xx.apk\n* pull : adb pull /sdcard/foo.txt foo.txt\n* push : adb push foo.txt /sdcard/foo.txt\n#### 端口和网络连接\n* forward :\n端口规范可使用以下架构：\n* tcp:port_number\n* local:unix_domain_socket_name\n* dev:character_device_name\n* jdwp:pid\n#### 脚本\n* get-serialno : 输出 adb 实例序列号字符串\n* get-state : 输出模拟器/设备实例的 adb 状态。\n* wait-for-device : 阻止执行，直至设备处于在线状态，即直至此实例状态为 device。\n\nadb wait-for-device install app.apk\n#### 服务器\n* start-server\n* kill-server\n\n#### Shell\n* **shell** :命令二进制文件存储在模拟器或设备的文件系统中，其路径为 /system/bin/。\n* 按 Control + D 或输入 exit 退出。\n\n## 调用 Activity Manager (am)\n在 adb shell 中，可以使用 Activity Manager (am) 工具发出命令以执行各种系统操作，如启动 Activity、强行停止进程、广播 intent、修改设备屏幕属性及其他操作\n\n#### start [options] intent\n启动指定启动 intent 指定的 Activity。\n```\nadb shell am start -n wg.roomis.launcher/.splash.SplashActivity\n```\n#### startservice [options] intent\n启动 intent 指定的 Service。\n```\nadb shell\nsu\nam startservice -n wg.roomis.launcher/.LauncherService -a wg.roomis.action.sync_time //需要root权限\n```\n#### broadcast [options] intent\n发出广播 intent。\n```\nadb shell am broadcast -a wg.roomis.CARD_ENTER -e CardNo \"A56BDEC7\"\n```\n#### force-stop\n强行停止与 package（应用的包名称）关联的所有应用。\n```\nadb shell am force-stop wg.roomis.launcher\n```\n#### kill\n终止与 package（应用的包名称）关联的所有进程。此命令仅终止可安全终止且不会影响用户体验的进程。\n```\nadb shell am kill wg.roomis.launcher\n```\n#### kill-all\n终止所有后台进程。\n\n#### display-size [reset|width * height]\n替换模拟器/设备显示尺寸。此命令对于在不同尺寸的屏幕上测试您的应用非常有用，它支持使用大屏设备模仿小屏幕分辨率（反之亦然）。\n```\nadb shell am display-size 1280x800\n```\n#### display-density [dpi]\n替换模拟器/设备显示密度。此命令对于在不同密度的屏幕上测试您的应用非常有用，它支持使用低密度屏幕在高密度环境环境上进行测试（反之亦然）。\n```\nadb shell am display-density 480\n\n```\n\n## 调用软件包管理器 Package Manager(pm)\n在 adb shell 中，可以使用软件包管理器 (pm) 工具发出命令，以对设备上安装的应用软件包进行操作和查询。\n\n#### list packages\nlist packages [options] filter: 输出所有软件包，或者，仅输出包名称包含 filter 中的文本的软件包。\n\n选项有:\n* -f：查看它们的关联文件。\n* -d：进行过滤以仅显示已停用的软件包。\n* -e：进行过滤以仅显示已启用的软件包。\n* -s：进行过滤以仅显示系统软件包。\n* **-3：进行过滤以仅显示第三方软件包。**\n* -i：查看软件包的安装程序。\n* -u：也包括卸载的软件包。\n\n```\nadb shell pm list pacakges -3\n```\n#### path <package>\n输出给定 package 的 APK 的路径。\n```\n~ adb shell pm path wg.roomis.launcher\npackage:/data/app/wg.roomis.launcher-2/base.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_dependencies_apk.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_slice_0_apk.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_slice_1_apk.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_slice_2_apk.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_slice_3_apk.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_slice_4_apk.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_slice_5_apk.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_slice_6_apk.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_slice_7_apk.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_slice_8_apk.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_slice_9_apk.apk\n```\n\n#### install [options] <path>\n选项：\n\n* -l：安装具有转发锁定功能的软件包。\n* **-r：重新安装现有应用，保留其数据。**\n* -t：允许安装测试 APK。\n* -i installer_package_name：指定安装程序软件包名称。\n* -s：在共享的大容量存储（如 sdcard）上安装软件包。\n* -f：在内部系统内存上安装软件包。\n* -d：允许版本代码降级。\n* -g：授予应用清单中列出的所有权限。\n#### uninstall [options] <package>\n选项：\n\n-k：移除软件包后保留数据和缓存目录。\n\n#### clear <package>\n删除与软件包关联的所有数据。\n\n```\nadb shell pm clear wg.roomis.launcher\n```\n\n## 其他\n\n#### 屏幕截图 screencap <filename>\n```\n~ adb shell screencap /sdcard/screen.png\n~ adb pull /sdcard/screen.png\n```\n#### 录制视频 screenrecord (API>=19 Android 4.4)\nscreenrecord [options] <filename>\noptions:\n* --help :显示命令语法和选项\n* --size widthxheight :    设置视频大小：1280x720。默认值是设备的原生显示分辨率（如果支持），如果不支持，则使用 1280x720。为实现最佳结果，请使用设备的 Advanced Video Coding (AVC) 编码器支持的大小。\n* --bit-rate <rate>:    设置视频的视频比特率（以兆比特每秒为单位）。默认值为 4Mbps。您可以增加比特率以提升视频质量，但这么做会导致影片文件变得更大。以下示例将录制比特率设为 6Mbps：\n\nscreenrecord --bit-rate 6000000 /sdcard/demo.mp4\n\n* --time-limit <time> :设置最大录制时长（以秒为单位）。默认值和最大值均为 180（3 分钟）。\n* --rotate :将输出旋转 90 度。此功能是实验性的。\n* --verbose :显示命令行屏幕上的日志信息。如果您不设置此选项，则运行时此实用程序不会显示任何信息。\n\n```\n➜  ~ adb shell screenrecord --verbose /sdcard/demo.mp4\nMain display is 1280x800 @57.45fps (orientation=0)\nConfiguring recorder for 1280x800 video/avc at 4.00Mbps\nContent area is 1280x800 at offset x=0 y=0\n^C\n➜  ~ adb pull /sdcard/demo.mp4\n```\n注：\n* 不能录音频\n* 不支持在录制时旋转屏幕\n\n#### adb shell input\n\n* adb shell input text : 向获得焦点的EditText控件输入内容,\n\nadb shell input text \"roomis-k12\"\n\n* adb input keyevent : 该命令主要是向系统发送一个按键指令，实现模拟用户在键盘上的按键动作\n\n```\nadb shell input keyevent HOME\nadb shell input keyevent BACK\nadb shell input keyevent KEYCODE_POWER//26\n```\nKeyCode:android.view.KeyEvent.java\n\n* adb shell input tap : 向设备发送一个点击操作的指令，参数是<x> <y>坐标\n\nadb shell input tap 100 100\n\n#### adb shell dumpsys\n\n* adb shell dumpsys activity [activites|service|providers|intents| broadcasts|processes]\n* adb shell dumpsys cpuinfo\n* adb shell dumpsys package\n```\nadb shell dumpsys package wg.roomis.launcher | grep versonCode //查看版本号\n```\n* adb shell dumpsys window\n```\nadb shell dumpsys window displays //查看分辨率\n```\n#### 压力测试 adb shell monkey\n\n```\nadb shell monkey -p wg.roomis.launcher -s 500 --ignore-crashes --ignore-timeouts --monitor-native-crashes -v -v 10000 > ~/monkey_log.txt\n//产生时间序列的种子值：500 忽略程序崩溃 、 忽略超时 、 监视本地程序崩溃 、 详细信息级别为2 ， 产生 10000个事件 。\n```\n## ROOMIS相关\n\n#### Roomis常用文件路径：\n* bindConfig文件：/sdcard/roomis/bindConfig\n* deviceSn文件：/sdcard/roomis/deviceSn\n* Log目录:  /sdcard/roomis/log\n* Database文件: /data/data/wg.roomis.launcher/databases/roomisDb.db\n* 偏好文件：/data/data/wg.roomis.launcher/shared_prefs/wg.roomis.launcher_preferences.xml\n* webview缓存目录：/data/data/wg.roomis.launcher/cache\n\n\n#### adb命令\n* 查看设备 :adb devices\n* 连接设备：adb connect 192.168.11.255\n* 安装 adb :install rooomis.apk\n* 覆盖安装: adb install -r roomis.apk\n* 卸载:adb uninstall wg.roomis.launcher\n* 导出roomis log：adb pull  /sdcard/roomis/log/roomis.log ~/\n* 导出anr log: adb pull /data/anr/traces.txt ~/\n* 导出数据库:adb pull /data/data/wg.roomis.launcher/databases/roomisDb.db ~/\n* 模拟刷卡：adb shell am broadcast -a wg.roomis.CARD_ENTER -e CardNo \"A56BDEC7\"\n* 开锁：adb shell am broadcast -a wg.roomis.actions.UNLOCK_PASSWORD\n* 检查更新:adb shell am broadcast -a wg.roomis.actions.WAKE_UP_UPDATE\n* 查看版本号：adb shell dumpsys package wg.roomis.launcher | grep  versionCode\n* 同步时间：\n```\nadb shell\nsu\nam startservice -n wg.roomis.launcher/.LauncherService -a wg.roomis.action.sync_time\n```\n\n#### sqlite3\n```\ncd data/data/wg.roomis.launcher/databases\nsqlite3 roomisDb.db;\n.table\nselect * from ApiConfigEntity;\n\n```\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/ADB（Android-Debug-Bridge.md","raw":"title: ADB（Android Debug Bridge)\ndate: 2018-07-10 09:47:20\ncategories: Android\ntags: ADB\n---\n\n## ADB（Android Debug Bridge)\nAndroid调试桥（adb），它是一个通用命令行工具，可以管理、调试Emulator(模拟机)或Device(安卓真机)，并且提供对 Unix shell的访问。它是一个C/S架构的应用程序，由三部分组成\n\n* Client端 ：运行在开发机器中, 即你的开发PC机. 用来发送adb命令。\n* Deamon守护进程 ：该组件在设备上运行命令。后台程序在每个模拟器或设备实例上作为后台进程运行。\n* Server端 ：作为一个后台进程运行在开发机器中, 即你的开发PC机。 用来管理PC中的Client端和手机的Deamon之间的通信。\n\n\n\n## 安装\n* android_sdk/platform-tools/\n\n```\nexport ANDROID_HOME=/Users/zhaohaiyang/Library/Android/sdk\nexport PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools\n```\n* brew cask install android-platform-tools\n\n<!--more-->\n\n## adb 的工作方式\n\n* 启动一个 adb 客户端时，此客户端首先检查是否有已运行的 adb 服务器进程。如果没有，它将启动服务器进程。当服务器启动时，它与本地 TCP 端口 5037 绑定，并侦听从 adb 客户端发送的命令—所有 adb 客户端均使用端口 5037 与 adb 服务器通信。\n* 服务器设置与所有运行的模拟器/设备实例的连接。它通过扫描 5555 到 5585 之间（模拟器/设备使用的范围）的奇数号端口查找模拟器/设备实例。服务器一旦发现 adb 后台程序，它将设置与该端口的连接。\n* 服务器和模拟器/设备连接时使用两个(一组)端口进行。一个奇数的5555，先建立adb server与adb daemon的调试专用的连接；一个为偶数的5554，再建立与Emulator（或Device）实例的连接。\nadb server通过扫描5555—5585之间的奇数端口搜索adb daemon，进行adb 连接；而用相应的偶数端口(奇数端口号-1，如5555对应5554)进行Emulator或Device实例的连接。\n![image](https://upload-images.jianshu.io/upload_images/1888909-2a4a68b3d96ee4b3.png)\n\n## 开启adb调试\n\n* 在开发者选项中打开USB调试 ：Settings > About phone 并点按 Build number 七次，就可以找到开发者选项。\n* 连接USB线\n\n## 通过 WLAN 连接到设备\n\n* PC和设备连接同一WLAN。\n* USB连接设备。\n* 设置目标设备以侦听端口 5555 上的 TCP/IP 连接。\n\n```\nadb tcpip 5555\n```\n* 连接至设备，通过 IP 地址识别此设备。\n```\nadb connect 192.168.3.102\n```\n* 请确认您的主计算机已连接至目标设备：\n\n```\n~ adb devices\nList of devices attached\n192.168.3.102:5555    device\n```\n\n## 查询设备\n在发出 adb 命令之前，知道哪些模拟器/设备实例已连接到 adb 服务器会很有帮助。您可以使用 devices 命令生成已连接的模拟器/设备的列表\n\nadb devices\n\n输出的格式类似如下:\n\nList of devices attached\nserial_number state\n\n* 序列号(serial_number): 一个由 adb 创建的字符串,序列号的格式为 type-console-port\n* 状态(state)\n* offline — 实例未连接到 adb 或不响应。\n* device — 实例现在已连接到 adb 服务器。\n* no device — 未连接模拟器/设备。\n\n## 设置端口转发\n\n使用 forward 命令设置任意端口转发 — 将对特定PC端口的请求转发到模拟器/设备实例上的其他端口\n\n```\nadb forward tcp:6100 tcp:7100 //adb forward <local> <remote>\n\n```\n\n## adb 命令参考\n\n\n#### 目标设备\n\n* -d : 将 adb 命令发送至唯一连接的 USB 设备,如果连接了多个 USB 设备，将返回错误。\n* -e : 将 adb 命令发送至唯一运行的模拟器实例,如果有多个模拟器实例在运行，将返回错误。\n* **-s serial_number** : 连接指定的设备/模拟器。\n\nadb -s 192.168.3.102:5555 install .....\n\n#### 常规\n* devices :\n* help :\n* version:\n\n#### 调试\n* **logcat [option] [filter-specs]**\n```\nadb logcat -s TAG //按TAG过滤\nadb logcat *:V[/D/I/W/E/F/S] //指定Level,S 表示为不输出该标签的日志\nadb logcat > ~/log.txt //输出到文件\nadb logcat | grep \"^..Activity\" //正则匹配\n```\n* bugreport : 将 dumpsys、dumpstate 和 logcat 数据输出到屏幕，以用于报告错误。\n* jdwp :输出给定设备上可用的 JDWP 进程的列表。\n\n#### 数据\n* install : adb install xx.apk\n* pull : adb pull /sdcard/foo.txt foo.txt\n* push : adb push foo.txt /sdcard/foo.txt\n#### 端口和网络连接\n* forward :\n端口规范可使用以下架构：\n* tcp:port_number\n* local:unix_domain_socket_name\n* dev:character_device_name\n* jdwp:pid\n#### 脚本\n* get-serialno : 输出 adb 实例序列号字符串\n* get-state : 输出模拟器/设备实例的 adb 状态。\n* wait-for-device : 阻止执行，直至设备处于在线状态，即直至此实例状态为 device。\n\nadb wait-for-device install app.apk\n#### 服务器\n* start-server\n* kill-server\n\n#### Shell\n* **shell** :命令二进制文件存储在模拟器或设备的文件系统中，其路径为 /system/bin/。\n* 按 Control + D 或输入 exit 退出。\n\n## 调用 Activity Manager (am)\n在 adb shell 中，可以使用 Activity Manager (am) 工具发出命令以执行各种系统操作，如启动 Activity、强行停止进程、广播 intent、修改设备屏幕属性及其他操作\n\n#### start [options] intent\n启动指定启动 intent 指定的 Activity。\n```\nadb shell am start -n wg.roomis.launcher/.splash.SplashActivity\n```\n#### startservice [options] intent\n启动 intent 指定的 Service。\n```\nadb shell\nsu\nam startservice -n wg.roomis.launcher/.LauncherService -a wg.roomis.action.sync_time //需要root权限\n```\n#### broadcast [options] intent\n发出广播 intent。\n```\nadb shell am broadcast -a wg.roomis.CARD_ENTER -e CardNo \"A56BDEC7\"\n```\n#### force-stop\n强行停止与 package（应用的包名称）关联的所有应用。\n```\nadb shell am force-stop wg.roomis.launcher\n```\n#### kill\n终止与 package（应用的包名称）关联的所有进程。此命令仅终止可安全终止且不会影响用户体验的进程。\n```\nadb shell am kill wg.roomis.launcher\n```\n#### kill-all\n终止所有后台进程。\n\n#### display-size [reset|width * height]\n替换模拟器/设备显示尺寸。此命令对于在不同尺寸的屏幕上测试您的应用非常有用，它支持使用大屏设备模仿小屏幕分辨率（反之亦然）。\n```\nadb shell am display-size 1280x800\n```\n#### display-density [dpi]\n替换模拟器/设备显示密度。此命令对于在不同密度的屏幕上测试您的应用非常有用，它支持使用低密度屏幕在高密度环境环境上进行测试（反之亦然）。\n```\nadb shell am display-density 480\n\n```\n\n## 调用软件包管理器 Package Manager(pm)\n在 adb shell 中，可以使用软件包管理器 (pm) 工具发出命令，以对设备上安装的应用软件包进行操作和查询。\n\n#### list packages\nlist packages [options] filter: 输出所有软件包，或者，仅输出包名称包含 filter 中的文本的软件包。\n\n选项有:\n* -f：查看它们的关联文件。\n* -d：进行过滤以仅显示已停用的软件包。\n* -e：进行过滤以仅显示已启用的软件包。\n* -s：进行过滤以仅显示系统软件包。\n* **-3：进行过滤以仅显示第三方软件包。**\n* -i：查看软件包的安装程序。\n* -u：也包括卸载的软件包。\n\n```\nadb shell pm list pacakges -3\n```\n#### path <package>\n输出给定 package 的 APK 的路径。\n```\n~ adb shell pm path wg.roomis.launcher\npackage:/data/app/wg.roomis.launcher-2/base.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_dependencies_apk.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_slice_0_apk.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_slice_1_apk.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_slice_2_apk.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_slice_3_apk.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_slice_4_apk.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_slice_5_apk.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_slice_6_apk.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_slice_7_apk.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_slice_8_apk.apk\npackage:/data/app/wg.roomis.launcher-2/split_lib_slice_9_apk.apk\n```\n\n#### install [options] <path>\n选项：\n\n* -l：安装具有转发锁定功能的软件包。\n* **-r：重新安装现有应用，保留其数据。**\n* -t：允许安装测试 APK。\n* -i installer_package_name：指定安装程序软件包名称。\n* -s：在共享的大容量存储（如 sdcard）上安装软件包。\n* -f：在内部系统内存上安装软件包。\n* -d：允许版本代码降级。\n* -g：授予应用清单中列出的所有权限。\n#### uninstall [options] <package>\n选项：\n\n-k：移除软件包后保留数据和缓存目录。\n\n#### clear <package>\n删除与软件包关联的所有数据。\n\n```\nadb shell pm clear wg.roomis.launcher\n```\n\n## 其他\n\n#### 屏幕截图 screencap <filename>\n```\n~ adb shell screencap /sdcard/screen.png\n~ adb pull /sdcard/screen.png\n```\n#### 录制视频 screenrecord (API>=19 Android 4.4)\nscreenrecord [options] <filename>\noptions:\n* --help :显示命令语法和选项\n* --size widthxheight :    设置视频大小：1280x720。默认值是设备的原生显示分辨率（如果支持），如果不支持，则使用 1280x720。为实现最佳结果，请使用设备的 Advanced Video Coding (AVC) 编码器支持的大小。\n* --bit-rate <rate>:    设置视频的视频比特率（以兆比特每秒为单位）。默认值为 4Mbps。您可以增加比特率以提升视频质量，但这么做会导致影片文件变得更大。以下示例将录制比特率设为 6Mbps：\n\nscreenrecord --bit-rate 6000000 /sdcard/demo.mp4\n\n* --time-limit <time> :设置最大录制时长（以秒为单位）。默认值和最大值均为 180（3 分钟）。\n* --rotate :将输出旋转 90 度。此功能是实验性的。\n* --verbose :显示命令行屏幕上的日志信息。如果您不设置此选项，则运行时此实用程序不会显示任何信息。\n\n```\n➜  ~ adb shell screenrecord --verbose /sdcard/demo.mp4\nMain display is 1280x800 @57.45fps (orientation=0)\nConfiguring recorder for 1280x800 video/avc at 4.00Mbps\nContent area is 1280x800 at offset x=0 y=0\n^C\n➜  ~ adb pull /sdcard/demo.mp4\n```\n注：\n* 不能录音频\n* 不支持在录制时旋转屏幕\n\n#### adb shell input\n\n* adb shell input text : 向获得焦点的EditText控件输入内容,\n\nadb shell input text \"roomis-k12\"\n\n* adb input keyevent : 该命令主要是向系统发送一个按键指令，实现模拟用户在键盘上的按键动作\n\n```\nadb shell input keyevent HOME\nadb shell input keyevent BACK\nadb shell input keyevent KEYCODE_POWER//26\n```\nKeyCode:android.view.KeyEvent.java\n\n* adb shell input tap : 向设备发送一个点击操作的指令，参数是<x> <y>坐标\n\nadb shell input tap 100 100\n\n#### adb shell dumpsys\n\n* adb shell dumpsys activity [activites|service|providers|intents| broadcasts|processes]\n* adb shell dumpsys cpuinfo\n* adb shell dumpsys package\n```\nadb shell dumpsys package wg.roomis.launcher | grep versonCode //查看版本号\n```\n* adb shell dumpsys window\n```\nadb shell dumpsys window displays //查看分辨率\n```\n#### 压力测试 adb shell monkey\n\n```\nadb shell monkey -p wg.roomis.launcher -s 500 --ignore-crashes --ignore-timeouts --monitor-native-crashes -v -v 10000 > ~/monkey_log.txt\n//产生时间序列的种子值：500 忽略程序崩溃 、 忽略超时 、 监视本地程序崩溃 、 详细信息级别为2 ， 产生 10000个事件 。\n```\n## ROOMIS相关\n\n#### Roomis常用文件路径：\n* bindConfig文件：/sdcard/roomis/bindConfig\n* deviceSn文件：/sdcard/roomis/deviceSn\n* Log目录:  /sdcard/roomis/log\n* Database文件: /data/data/wg.roomis.launcher/databases/roomisDb.db\n* 偏好文件：/data/data/wg.roomis.launcher/shared_prefs/wg.roomis.launcher_preferences.xml\n* webview缓存目录：/data/data/wg.roomis.launcher/cache\n\n\n#### adb命令\n* 查看设备 :adb devices\n* 连接设备：adb connect 192.168.11.255\n* 安装 adb :install rooomis.apk\n* 覆盖安装: adb install -r roomis.apk\n* 卸载:adb uninstall wg.roomis.launcher\n* 导出roomis log：adb pull  /sdcard/roomis/log/roomis.log ~/\n* 导出anr log: adb pull /data/anr/traces.txt ~/\n* 导出数据库:adb pull /data/data/wg.roomis.launcher/databases/roomisDb.db ~/\n* 模拟刷卡：adb shell am broadcast -a wg.roomis.CARD_ENTER -e CardNo \"A56BDEC7\"\n* 开锁：adb shell am broadcast -a wg.roomis.actions.UNLOCK_PASSWORD\n* 检查更新:adb shell am broadcast -a wg.roomis.actions.WAKE_UP_UPDATE\n* 查看版本号：adb shell dumpsys package wg.roomis.launcher | grep  versionCode\n* 同步时间：\n```\nadb shell\nsu\nam startservice -n wg.roomis.launcher/.LauncherService -a wg.roomis.action.sync_time\n```\n\n#### sqlite3\n```\ncd data/data/wg.roomis.launcher/databases\nsqlite3 roomisDb.db;\n.table\nselect * from ApiConfigEntity;\n\n```\n\n\n\n\n\n\n\n\n\n\n","slug":"ADB（Android-Debug-Bridge","published":1,"updated":"2018-07-10T01:53:36.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjryltlas0003ncaqq5xuuyvs","content":"<h2 id=\"ADB（Android-Debug-Bridge\"><a href=\"#ADB（Android-Debug-Bridge\" class=\"headerlink\" title=\"ADB（Android Debug Bridge)\"></a>ADB（Android Debug Bridge)</h2><p>Android调试桥（adb），它是一个通用命令行工具，可以管理、调试Emulator(模拟机)或Device(安卓真机)，并且提供对 Unix shell的访问。它是一个C/S架构的应用程序，由三部分组成</p>\n<ul>\n<li>Client端 ：运行在开发机器中, 即你的开发PC机. 用来发送adb命令。</li>\n<li>Deamon守护进程 ：该组件在设备上运行命令。后台程序在每个模拟器或设备实例上作为后台进程运行。</li>\n<li>Server端 ：作为一个后台进程运行在开发机器中, 即你的开发PC机。 用来管理PC中的Client端和手机的Deamon之间的通信。</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>android_sdk/platform-tools/</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export ANDROID_HOME=/Users/zhaohaiyang/Library/Android/sdk</div><div class=\"line\">export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools</div></pre></td></tr></table></figure>\n<ul>\n<li>brew cask install android-platform-tools</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"adb-的工作方式\"><a href=\"#adb-的工作方式\" class=\"headerlink\" title=\"adb 的工作方式\"></a>adb 的工作方式</h2><ul>\n<li>启动一个 adb 客户端时，此客户端首先检查是否有已运行的 adb 服务器进程。如果没有，它将启动服务器进程。当服务器启动时，它与本地 TCP 端口 5037 绑定，并侦听从 adb 客户端发送的命令—所有 adb 客户端均使用端口 5037 与 adb 服务器通信。</li>\n<li>服务器设置与所有运行的模拟器/设备实例的连接。它通过扫描 5555 到 5585 之间（模拟器/设备使用的范围）的奇数号端口查找模拟器/设备实例。服务器一旦发现 adb 后台程序，它将设置与该端口的连接。</li>\n<li>服务器和模拟器/设备连接时使用两个(一组)端口进行。一个奇数的5555，先建立adb server与adb daemon的调试专用的连接；一个为偶数的5554，再建立与Emulator（或Device）实例的连接。<br>adb server通过扫描5555—5585之间的奇数端口搜索adb daemon，进行adb 连接；而用相应的偶数端口(奇数端口号-1，如5555对应5554)进行Emulator或Device实例的连接。<br><img src=\"https://upload-images.jianshu.io/upload_images/1888909-2a4a68b3d96ee4b3.png\" alt=\"image\"></li>\n</ul>\n<h2 id=\"开启adb调试\"><a href=\"#开启adb调试\" class=\"headerlink\" title=\"开启adb调试\"></a>开启adb调试</h2><ul>\n<li>在开发者选项中打开USB调试 ：Settings &gt; About phone 并点按 Build number 七次，就可以找到开发者选项。</li>\n<li>连接USB线</li>\n</ul>\n<h2 id=\"通过-WLAN-连接到设备\"><a href=\"#通过-WLAN-连接到设备\" class=\"headerlink\" title=\"通过 WLAN 连接到设备\"></a>通过 WLAN 连接到设备</h2><ul>\n<li>PC和设备连接同一WLAN。</li>\n<li>USB连接设备。</li>\n<li>设置目标设备以侦听端口 5555 上的 TCP/IP 连接。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb tcpip 5555</div></pre></td></tr></table></figure>\n<ul>\n<li><p>连接至设备，通过 IP 地址识别此设备。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb connect 192.168.3.102</div></pre></td></tr></table></figure>\n</li>\n<li><p>请确认您的主计算机已连接至目标设备：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">~ adb devices</div><div class=\"line\">List of devices attached</div><div class=\"line\">192.168.3.102:5555    device</div></pre></td></tr></table></figure>\n<h2 id=\"查询设备\"><a href=\"#查询设备\" class=\"headerlink\" title=\"查询设备\"></a>查询设备</h2><p>在发出 adb 命令之前，知道哪些模拟器/设备实例已连接到 adb 服务器会很有帮助。您可以使用 devices 命令生成已连接的模拟器/设备的列表</p>\n<p>adb devices</p>\n<p>输出的格式类似如下:</p>\n<p>List of devices attached<br>serial_number state</p>\n<ul>\n<li>序列号(serial_number): 一个由 adb 创建的字符串,序列号的格式为 type-console-port</li>\n<li>状态(state)</li>\n<li>offline — 实例未连接到 adb 或不响应。</li>\n<li>device — 实例现在已连接到 adb 服务器。</li>\n<li>no device — 未连接模拟器/设备。</li>\n</ul>\n<h2 id=\"设置端口转发\"><a href=\"#设置端口转发\" class=\"headerlink\" title=\"设置端口转发\"></a>设置端口转发</h2><p>使用 forward 命令设置任意端口转发 — 将对特定PC端口的请求转发到模拟器/设备实例上的其他端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb forward tcp:6100 tcp:7100 //adb forward &lt;local&gt; &lt;remote&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"adb-命令参考\"><a href=\"#adb-命令参考\" class=\"headerlink\" title=\"adb 命令参考\"></a>adb 命令参考</h2><h4 id=\"目标设备\"><a href=\"#目标设备\" class=\"headerlink\" title=\"目标设备\"></a>目标设备</h4><ul>\n<li>-d : 将 adb 命令发送至唯一连接的 USB 设备,如果连接了多个 USB 设备，将返回错误。</li>\n<li>-e : 将 adb 命令发送至唯一运行的模拟器实例,如果有多个模拟器实例在运行，将返回错误。</li>\n<li><strong>-s serial_number</strong> : 连接指定的设备/模拟器。</li>\n</ul>\n<p>adb -s 192.168.3.102:5555 install …..</p>\n<h4 id=\"常规\"><a href=\"#常规\" class=\"headerlink\" title=\"常规\"></a>常规</h4><ul>\n<li>devices :</li>\n<li>help :</li>\n<li>version:</li>\n</ul>\n<h4 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h4><ul>\n<li><p><strong>logcat [option] [filter-specs]</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb logcat -s TAG //按TAG过滤</div><div class=\"line\">adb logcat *:V[/D/I/W/E/F/S] //指定Level,S 表示为不输出该标签的日志</div><div class=\"line\">adb logcat &gt; ~/log.txt //输出到文件</div><div class=\"line\">adb logcat | grep &quot;^..Activity&quot; //正则匹配</div></pre></td></tr></table></figure>\n</li>\n<li><p>bugreport : 将 dumpsys、dumpstate 和 logcat 数据输出到屏幕，以用于报告错误。</p>\n</li>\n<li>jdwp :输出给定设备上可用的 JDWP 进程的列表。</li>\n</ul>\n<h4 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h4><ul>\n<li>install : adb install xx.apk</li>\n<li>pull : adb pull /sdcard/foo.txt foo.txt</li>\n<li>push : adb push foo.txt /sdcard/foo.txt<h4 id=\"端口和网络连接\"><a href=\"#端口和网络连接\" class=\"headerlink\" title=\"端口和网络连接\"></a>端口和网络连接</h4></li>\n<li>forward :<br>端口规范可使用以下架构：</li>\n<li>tcp:port_number</li>\n<li>local:unix_domain_socket_name</li>\n<li>dev:character_device_name</li>\n<li>jdwp:pid<h4 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h4></li>\n<li>get-serialno : 输出 adb 实例序列号字符串</li>\n<li>get-state : 输出模拟器/设备实例的 adb 状态。</li>\n<li>wait-for-device : 阻止执行，直至设备处于在线状态，即直至此实例状态为 device。</li>\n</ul>\n<p>adb wait-for-device install app.apk</p>\n<h4 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h4><ul>\n<li>start-server</li>\n<li>kill-server</li>\n</ul>\n<h4 id=\"Shell\"><a href=\"#Shell\" class=\"headerlink\" title=\"Shell\"></a>Shell</h4><ul>\n<li><strong>shell</strong> :命令二进制文件存储在模拟器或设备的文件系统中，其路径为 /system/bin/。</li>\n<li>按 Control + D 或输入 exit 退出。</li>\n</ul>\n<h2 id=\"调用-Activity-Manager-am\"><a href=\"#调用-Activity-Manager-am\" class=\"headerlink\" title=\"调用 Activity Manager (am)\"></a>调用 Activity Manager (am)</h2><p>在 adb shell 中，可以使用 Activity Manager (am) 工具发出命令以执行各种系统操作，如启动 Activity、强行停止进程、广播 intent、修改设备屏幕属性及其他操作</p>\n<h4 id=\"start-options-intent\"><a href=\"#start-options-intent\" class=\"headerlink\" title=\"start [options] intent\"></a>start [options] intent</h4><p>启动指定启动 intent 指定的 Activity。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell am start -n wg.roomis.launcher/.splash.SplashActivity</div></pre></td></tr></table></figure></p>\n<h4 id=\"startservice-options-intent\"><a href=\"#startservice-options-intent\" class=\"headerlink\" title=\"startservice [options] intent\"></a>startservice [options] intent</h4><p>启动 intent 指定的 Service。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell</div><div class=\"line\">su</div><div class=\"line\">am startservice -n wg.roomis.launcher/.LauncherService -a wg.roomis.action.sync_time //需要root权限</div></pre></td></tr></table></figure></p>\n<h4 id=\"broadcast-options-intent\"><a href=\"#broadcast-options-intent\" class=\"headerlink\" title=\"broadcast [options] intent\"></a>broadcast [options] intent</h4><p>发出广播 intent。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell am broadcast -a wg.roomis.CARD_ENTER -e CardNo &quot;A56BDEC7&quot;</div></pre></td></tr></table></figure></p>\n<h4 id=\"force-stop\"><a href=\"#force-stop\" class=\"headerlink\" title=\"force-stop\"></a>force-stop</h4><p>强行停止与 package（应用的包名称）关联的所有应用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell am force-stop wg.roomis.launcher</div></pre></td></tr></table></figure></p>\n<h4 id=\"kill\"><a href=\"#kill\" class=\"headerlink\" title=\"kill\"></a>kill</h4><p>终止与 package（应用的包名称）关联的所有进程。此命令仅终止可安全终止且不会影响用户体验的进程。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell am kill wg.roomis.launcher</div></pre></td></tr></table></figure></p>\n<h4 id=\"kill-all\"><a href=\"#kill-all\" class=\"headerlink\" title=\"kill-all\"></a>kill-all</h4><p>终止所有后台进程。</p>\n<h4 id=\"display-size-reset-width-height\"><a href=\"#display-size-reset-width-height\" class=\"headerlink\" title=\"display-size [reset|width * height]\"></a>display-size [reset|width * height]</h4><p>替换模拟器/设备显示尺寸。此命令对于在不同尺寸的屏幕上测试您的应用非常有用，它支持使用大屏设备模仿小屏幕分辨率（反之亦然）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell am display-size 1280x800</div></pre></td></tr></table></figure></p>\n<h4 id=\"display-density-dpi\"><a href=\"#display-density-dpi\" class=\"headerlink\" title=\"display-density [dpi]\"></a>display-density [dpi]</h4><p>替换模拟器/设备显示密度。此命令对于在不同密度的屏幕上测试您的应用非常有用，它支持使用低密度屏幕在高密度环境环境上进行测试（反之亦然）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell am display-density 480</div></pre></td></tr></table></figure></p>\n<h2 id=\"调用软件包管理器-Package-Manager-pm\"><a href=\"#调用软件包管理器-Package-Manager-pm\" class=\"headerlink\" title=\"调用软件包管理器 Package Manager(pm)\"></a>调用软件包管理器 Package Manager(pm)</h2><p>在 adb shell 中，可以使用软件包管理器 (pm) 工具发出命令，以对设备上安装的应用软件包进行操作和查询。</p>\n<h4 id=\"list-packages\"><a href=\"#list-packages\" class=\"headerlink\" title=\"list packages\"></a>list packages</h4><p>list packages [options] filter: 输出所有软件包，或者，仅输出包名称包含 filter 中的文本的软件包。</p>\n<p>选项有:</p>\n<ul>\n<li>-f：查看它们的关联文件。</li>\n<li>-d：进行过滤以仅显示已停用的软件包。</li>\n<li>-e：进行过滤以仅显示已启用的软件包。</li>\n<li>-s：进行过滤以仅显示系统软件包。</li>\n<li><strong>-3：进行过滤以仅显示第三方软件包。</strong></li>\n<li>-i：查看软件包的安装程序。</li>\n<li>-u：也包括卸载的软件包。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell pm list pacakges -3</div></pre></td></tr></table></figure>\n<h4 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path \"></a>path <package></package></h4><p>输出给定 package 的 APK 的路径。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">~ adb shell pm path wg.roomis.launcher</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/base.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_dependencies_apk.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_slice_0_apk.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_slice_1_apk.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_slice_2_apk.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_slice_3_apk.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_slice_4_apk.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_slice_5_apk.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_slice_6_apk.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_slice_7_apk.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_slice_8_apk.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_slice_9_apk.apk</div></pre></td></tr></table></figure></p>\n<h4 id=\"install-options\"><a href=\"#install-options\" class=\"headerlink\" title=\"install [options] \"></a>install [options] <path></path></h4><p>选项：</p>\n<ul>\n<li>-l：安装具有转发锁定功能的软件包。</li>\n<li><strong>-r：重新安装现有应用，保留其数据。</strong></li>\n<li>-t：允许安装测试 APK。</li>\n<li>-i installer_package_name：指定安装程序软件包名称。</li>\n<li>-s：在共享的大容量存储（如 sdcard）上安装软件包。</li>\n<li>-f：在内部系统内存上安装软件包。</li>\n<li>-d：允许版本代码降级。</li>\n<li>-g：授予应用清单中列出的所有权限。<h4 id=\"uninstall-options\"><a href=\"#uninstall-options\" class=\"headerlink\" title=\"uninstall [options] \"></a>uninstall [options] <package></package></h4>选项：</li>\n</ul>\n<p>-k：移除软件包后保留数据和缓存目录。</p>\n<h4 id=\"clear\"><a href=\"#clear\" class=\"headerlink\" title=\"clear \"></a>clear <package></package></h4><p>删除与软件包关联的所有数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell pm clear wg.roomis.launcher</div></pre></td></tr></table></figure>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h4 id=\"屏幕截图-screencap\"><a href=\"#屏幕截图-screencap\" class=\"headerlink\" title=\"屏幕截图 screencap \"></a>屏幕截图 screencap <filename></filename></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">~ adb shell screencap /sdcard/screen.png</div><div class=\"line\">~ adb pull /sdcard/screen.png</div></pre></td></tr></table></figure>\n<h4 id=\"录制视频-screenrecord-API-gt-19-Android-4-4\"><a href=\"#录制视频-screenrecord-API-gt-19-Android-4-4\" class=\"headerlink\" title=\"录制视频 screenrecord (API&gt;=19 Android 4.4)\"></a>录制视频 screenrecord (API&gt;=19 Android 4.4)</h4><p>screenrecord [options] <filename><br>options:</filename></p>\n<ul>\n<li>–help :显示命令语法和选项</li>\n<li>–size widthxheight :    设置视频大小：1280x720。默认值是设备的原生显示分辨率（如果支持），如果不支持，则使用 1280x720。为实现最佳结果，请使用设备的 Advanced Video Coding (AVC) 编码器支持的大小。</li>\n<li>–bit-rate <rate>:    设置视频的视频比特率（以兆比特每秒为单位）。默认值为 4Mbps。您可以增加比特率以提升视频质量，但这么做会导致影片文件变得更大。以下示例将录制比特率设为 6Mbps：</rate></li>\n</ul>\n<p>screenrecord –bit-rate 6000000 /sdcard/demo.mp4</p>\n<ul>\n<li>–time-limit <time> :设置最大录制时长（以秒为单位）。默认值和最大值均为 180（3 分钟）。</time></li>\n<li>–rotate :将输出旋转 90 度。此功能是实验性的。</li>\n<li>–verbose :显示命令行屏幕上的日志信息。如果您不设置此选项，则运行时此实用程序不会显示任何信息。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~ adb shell screenrecord --verbose /sdcard/demo.mp4</div><div class=\"line\">Main display is 1280x800 @57.45fps (orientation=0)</div><div class=\"line\">Configuring recorder for 1280x800 video/avc at 4.00Mbps</div><div class=\"line\">Content area is 1280x800 at offset x=0 y=0</div><div class=\"line\">^C</div><div class=\"line\">➜  ~ adb pull /sdcard/demo.mp4</div></pre></td></tr></table></figure>\n<p>注：</p>\n<ul>\n<li>不能录音频</li>\n<li>不支持在录制时旋转屏幕</li>\n</ul>\n<h4 id=\"adb-shell-input\"><a href=\"#adb-shell-input\" class=\"headerlink\" title=\"adb shell input\"></a>adb shell input</h4><ul>\n<li>adb shell input text : 向获得焦点的EditText控件输入内容,</li>\n</ul>\n<p>adb shell input text “roomis-k12”</p>\n<ul>\n<li>adb input keyevent : 该命令主要是向系统发送一个按键指令，实现模拟用户在键盘上的按键动作</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell input keyevent HOME</div><div class=\"line\">adb shell input keyevent BACK</div><div class=\"line\">adb shell input keyevent KEYCODE_POWER//26</div></pre></td></tr></table></figure>\n<p>KeyCode:android.view.KeyEvent.java</p>\n<ul>\n<li>adb shell input tap : 向设备发送一个点击操作的指令，参数是<x> <y>坐标</y></x></li>\n</ul>\n<p>adb shell input tap 100 100</p>\n<h4 id=\"adb-shell-dumpsys\"><a href=\"#adb-shell-dumpsys\" class=\"headerlink\" title=\"adb shell dumpsys\"></a>adb shell dumpsys</h4><ul>\n<li>adb shell dumpsys activity [activites|service|providers|intents| broadcasts|processes]</li>\n<li>adb shell dumpsys cpuinfo</li>\n<li><p>adb shell dumpsys package</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell dumpsys package wg.roomis.launcher | grep versonCode //查看版本号</div></pre></td></tr></table></figure>\n</li>\n<li><p>adb shell dumpsys window</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell dumpsys window displays //查看分辨率</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"压力测试-adb-shell-monkey\"><a href=\"#压力测试-adb-shell-monkey\" class=\"headerlink\" title=\"压力测试 adb shell monkey\"></a>压力测试 adb shell monkey</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell monkey -p wg.roomis.launcher -s 500 --ignore-crashes --ignore-timeouts --monitor-native-crashes -v -v 10000 &gt; ~/monkey_log.txt</div><div class=\"line\">//产生时间序列的种子值：500 忽略程序崩溃 、 忽略超时 、 监视本地程序崩溃 、 详细信息级别为2 ， 产生 10000个事件 。</div></pre></td></tr></table></figure>\n<h2 id=\"ROOMIS相关\"><a href=\"#ROOMIS相关\" class=\"headerlink\" title=\"ROOMIS相关\"></a>ROOMIS相关</h2><h4 id=\"Roomis常用文件路径：\"><a href=\"#Roomis常用文件路径：\" class=\"headerlink\" title=\"Roomis常用文件路径：\"></a>Roomis常用文件路径：</h4><ul>\n<li>bindConfig文件：/sdcard/roomis/bindConfig</li>\n<li>deviceSn文件：/sdcard/roomis/deviceSn</li>\n<li>Log目录:  /sdcard/roomis/log</li>\n<li>Database文件: /data/data/wg.roomis.launcher/databases/roomisDb.db</li>\n<li>偏好文件：/data/data/wg.roomis.launcher/shared_prefs/wg.roomis.launcher_preferences.xml</li>\n<li>webview缓存目录：/data/data/wg.roomis.launcher/cache</li>\n</ul>\n<h4 id=\"adb命令\"><a href=\"#adb命令\" class=\"headerlink\" title=\"adb命令\"></a>adb命令</h4><ul>\n<li>查看设备 :adb devices</li>\n<li>连接设备：adb connect 192.168.11.255</li>\n<li>安装 adb :install rooomis.apk</li>\n<li>覆盖安装: adb install -r roomis.apk</li>\n<li>卸载:adb uninstall wg.roomis.launcher</li>\n<li>导出roomis log：adb pull  /sdcard/roomis/log/roomis.log ~/</li>\n<li>导出anr log: adb pull /data/anr/traces.txt ~/</li>\n<li>导出数据库:adb pull /data/data/wg.roomis.launcher/databases/roomisDb.db ~/</li>\n<li>模拟刷卡：adb shell am broadcast -a wg.roomis.CARD_ENTER -e CardNo “A56BDEC7”</li>\n<li>开锁：adb shell am broadcast -a wg.roomis.actions.UNLOCK_PASSWORD</li>\n<li>检查更新:adb shell am broadcast -a wg.roomis.actions.WAKE_UP_UPDATE</li>\n<li>查看版本号：adb shell dumpsys package wg.roomis.launcher | grep  versionCode</li>\n<li>同步时间：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell</div><div class=\"line\">su</div><div class=\"line\">am startservice -n wg.roomis.launcher/.LauncherService -a wg.roomis.action.sync_time</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"sqlite3\"><a href=\"#sqlite3\" class=\"headerlink\" title=\"sqlite3\"></a>sqlite3</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd data/data/wg.roomis.launcher/databases</div><div class=\"line\">sqlite3 roomisDb.db;</div><div class=\"line\">.table</div><div class=\"line\">select * from ApiConfigEntity;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"ADB（Android-Debug-Bridge\"><a href=\"#ADB（Android-Debug-Bridge\" class=\"headerlink\" title=\"ADB（Android Debug Bridge)\"></a>ADB（Android Debug Bridge)</h2><p>Android调试桥（adb），它是一个通用命令行工具，可以管理、调试Emulator(模拟机)或Device(安卓真机)，并且提供对 Unix shell的访问。它是一个C/S架构的应用程序，由三部分组成</p>\n<ul>\n<li>Client端 ：运行在开发机器中, 即你的开发PC机. 用来发送adb命令。</li>\n<li>Deamon守护进程 ：该组件在设备上运行命令。后台程序在每个模拟器或设备实例上作为后台进程运行。</li>\n<li>Server端 ：作为一个后台进程运行在开发机器中, 即你的开发PC机。 用来管理PC中的Client端和手机的Deamon之间的通信。</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ul>\n<li>android_sdk/platform-tools/</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export ANDROID_HOME=/Users/zhaohaiyang/Library/Android/sdk</div><div class=\"line\">export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools</div></pre></td></tr></table></figure>\n<ul>\n<li>brew cask install android-platform-tools</li>\n</ul>","more":"<h2 id=\"adb-的工作方式\"><a href=\"#adb-的工作方式\" class=\"headerlink\" title=\"adb 的工作方式\"></a>adb 的工作方式</h2><ul>\n<li>启动一个 adb 客户端时，此客户端首先检查是否有已运行的 adb 服务器进程。如果没有，它将启动服务器进程。当服务器启动时，它与本地 TCP 端口 5037 绑定，并侦听从 adb 客户端发送的命令—所有 adb 客户端均使用端口 5037 与 adb 服务器通信。</li>\n<li>服务器设置与所有运行的模拟器/设备实例的连接。它通过扫描 5555 到 5585 之间（模拟器/设备使用的范围）的奇数号端口查找模拟器/设备实例。服务器一旦发现 adb 后台程序，它将设置与该端口的连接。</li>\n<li>服务器和模拟器/设备连接时使用两个(一组)端口进行。一个奇数的5555，先建立adb server与adb daemon的调试专用的连接；一个为偶数的5554，再建立与Emulator（或Device）实例的连接。<br>adb server通过扫描5555—5585之间的奇数端口搜索adb daemon，进行adb 连接；而用相应的偶数端口(奇数端口号-1，如5555对应5554)进行Emulator或Device实例的连接。<br><img src=\"https://upload-images.jianshu.io/upload_images/1888909-2a4a68b3d96ee4b3.png\" alt=\"image\"></li>\n</ul>\n<h2 id=\"开启adb调试\"><a href=\"#开启adb调试\" class=\"headerlink\" title=\"开启adb调试\"></a>开启adb调试</h2><ul>\n<li>在开发者选项中打开USB调试 ：Settings &gt; About phone 并点按 Build number 七次，就可以找到开发者选项。</li>\n<li>连接USB线</li>\n</ul>\n<h2 id=\"通过-WLAN-连接到设备\"><a href=\"#通过-WLAN-连接到设备\" class=\"headerlink\" title=\"通过 WLAN 连接到设备\"></a>通过 WLAN 连接到设备</h2><ul>\n<li>PC和设备连接同一WLAN。</li>\n<li>USB连接设备。</li>\n<li>设置目标设备以侦听端口 5555 上的 TCP/IP 连接。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb tcpip 5555</div></pre></td></tr></table></figure>\n<ul>\n<li><p>连接至设备，通过 IP 地址识别此设备。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb connect 192.168.3.102</div></pre></td></tr></table></figure>\n</li>\n<li><p>请确认您的主计算机已连接至目标设备：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">~ adb devices</div><div class=\"line\">List of devices attached</div><div class=\"line\">192.168.3.102:5555    device</div></pre></td></tr></table></figure>\n<h2 id=\"查询设备\"><a href=\"#查询设备\" class=\"headerlink\" title=\"查询设备\"></a>查询设备</h2><p>在发出 adb 命令之前，知道哪些模拟器/设备实例已连接到 adb 服务器会很有帮助。您可以使用 devices 命令生成已连接的模拟器/设备的列表</p>\n<p>adb devices</p>\n<p>输出的格式类似如下:</p>\n<p>List of devices attached<br>serial_number state</p>\n<ul>\n<li>序列号(serial_number): 一个由 adb 创建的字符串,序列号的格式为 type-console-port</li>\n<li>状态(state)</li>\n<li>offline — 实例未连接到 adb 或不响应。</li>\n<li>device — 实例现在已连接到 adb 服务器。</li>\n<li>no device — 未连接模拟器/设备。</li>\n</ul>\n<h2 id=\"设置端口转发\"><a href=\"#设置端口转发\" class=\"headerlink\" title=\"设置端口转发\"></a>设置端口转发</h2><p>使用 forward 命令设置任意端口转发 — 将对特定PC端口的请求转发到模拟器/设备实例上的其他端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb forward tcp:6100 tcp:7100 //adb forward &lt;local&gt; &lt;remote&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"adb-命令参考\"><a href=\"#adb-命令参考\" class=\"headerlink\" title=\"adb 命令参考\"></a>adb 命令参考</h2><h4 id=\"目标设备\"><a href=\"#目标设备\" class=\"headerlink\" title=\"目标设备\"></a>目标设备</h4><ul>\n<li>-d : 将 adb 命令发送至唯一连接的 USB 设备,如果连接了多个 USB 设备，将返回错误。</li>\n<li>-e : 将 adb 命令发送至唯一运行的模拟器实例,如果有多个模拟器实例在运行，将返回错误。</li>\n<li><strong>-s serial_number</strong> : 连接指定的设备/模拟器。</li>\n</ul>\n<p>adb -s 192.168.3.102:5555 install …..</p>\n<h4 id=\"常规\"><a href=\"#常规\" class=\"headerlink\" title=\"常规\"></a>常规</h4><ul>\n<li>devices :</li>\n<li>help :</li>\n<li>version:</li>\n</ul>\n<h4 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h4><ul>\n<li><p><strong>logcat [option] [filter-specs]</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb logcat -s TAG //按TAG过滤</div><div class=\"line\">adb logcat *:V[/D/I/W/E/F/S] //指定Level,S 表示为不输出该标签的日志</div><div class=\"line\">adb logcat &gt; ~/log.txt //输出到文件</div><div class=\"line\">adb logcat | grep &quot;^..Activity&quot; //正则匹配</div></pre></td></tr></table></figure>\n</li>\n<li><p>bugreport : 将 dumpsys、dumpstate 和 logcat 数据输出到屏幕，以用于报告错误。</p>\n</li>\n<li>jdwp :输出给定设备上可用的 JDWP 进程的列表。</li>\n</ul>\n<h4 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h4><ul>\n<li>install : adb install xx.apk</li>\n<li>pull : adb pull /sdcard/foo.txt foo.txt</li>\n<li>push : adb push foo.txt /sdcard/foo.txt<h4 id=\"端口和网络连接\"><a href=\"#端口和网络连接\" class=\"headerlink\" title=\"端口和网络连接\"></a>端口和网络连接</h4></li>\n<li>forward :<br>端口规范可使用以下架构：</li>\n<li>tcp:port_number</li>\n<li>local:unix_domain_socket_name</li>\n<li>dev:character_device_name</li>\n<li>jdwp:pid<h4 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h4></li>\n<li>get-serialno : 输出 adb 实例序列号字符串</li>\n<li>get-state : 输出模拟器/设备实例的 adb 状态。</li>\n<li>wait-for-device : 阻止执行，直至设备处于在线状态，即直至此实例状态为 device。</li>\n</ul>\n<p>adb wait-for-device install app.apk</p>\n<h4 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h4><ul>\n<li>start-server</li>\n<li>kill-server</li>\n</ul>\n<h4 id=\"Shell\"><a href=\"#Shell\" class=\"headerlink\" title=\"Shell\"></a>Shell</h4><ul>\n<li><strong>shell</strong> :命令二进制文件存储在模拟器或设备的文件系统中，其路径为 /system/bin/。</li>\n<li>按 Control + D 或输入 exit 退出。</li>\n</ul>\n<h2 id=\"调用-Activity-Manager-am\"><a href=\"#调用-Activity-Manager-am\" class=\"headerlink\" title=\"调用 Activity Manager (am)\"></a>调用 Activity Manager (am)</h2><p>在 adb shell 中，可以使用 Activity Manager (am) 工具发出命令以执行各种系统操作，如启动 Activity、强行停止进程、广播 intent、修改设备屏幕属性及其他操作</p>\n<h4 id=\"start-options-intent\"><a href=\"#start-options-intent\" class=\"headerlink\" title=\"start [options] intent\"></a>start [options] intent</h4><p>启动指定启动 intent 指定的 Activity。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell am start -n wg.roomis.launcher/.splash.SplashActivity</div></pre></td></tr></table></figure></p>\n<h4 id=\"startservice-options-intent\"><a href=\"#startservice-options-intent\" class=\"headerlink\" title=\"startservice [options] intent\"></a>startservice [options] intent</h4><p>启动 intent 指定的 Service。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell</div><div class=\"line\">su</div><div class=\"line\">am startservice -n wg.roomis.launcher/.LauncherService -a wg.roomis.action.sync_time //需要root权限</div></pre></td></tr></table></figure></p>\n<h4 id=\"broadcast-options-intent\"><a href=\"#broadcast-options-intent\" class=\"headerlink\" title=\"broadcast [options] intent\"></a>broadcast [options] intent</h4><p>发出广播 intent。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell am broadcast -a wg.roomis.CARD_ENTER -e CardNo &quot;A56BDEC7&quot;</div></pre></td></tr></table></figure></p>\n<h4 id=\"force-stop\"><a href=\"#force-stop\" class=\"headerlink\" title=\"force-stop\"></a>force-stop</h4><p>强行停止与 package（应用的包名称）关联的所有应用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell am force-stop wg.roomis.launcher</div></pre></td></tr></table></figure></p>\n<h4 id=\"kill\"><a href=\"#kill\" class=\"headerlink\" title=\"kill\"></a>kill</h4><p>终止与 package（应用的包名称）关联的所有进程。此命令仅终止可安全终止且不会影响用户体验的进程。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell am kill wg.roomis.launcher</div></pre></td></tr></table></figure></p>\n<h4 id=\"kill-all\"><a href=\"#kill-all\" class=\"headerlink\" title=\"kill-all\"></a>kill-all</h4><p>终止所有后台进程。</p>\n<h4 id=\"display-size-reset-width-height\"><a href=\"#display-size-reset-width-height\" class=\"headerlink\" title=\"display-size [reset|width * height]\"></a>display-size [reset|width * height]</h4><p>替换模拟器/设备显示尺寸。此命令对于在不同尺寸的屏幕上测试您的应用非常有用，它支持使用大屏设备模仿小屏幕分辨率（反之亦然）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell am display-size 1280x800</div></pre></td></tr></table></figure></p>\n<h4 id=\"display-density-dpi\"><a href=\"#display-density-dpi\" class=\"headerlink\" title=\"display-density [dpi]\"></a>display-density [dpi]</h4><p>替换模拟器/设备显示密度。此命令对于在不同密度的屏幕上测试您的应用非常有用，它支持使用低密度屏幕在高密度环境环境上进行测试（反之亦然）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell am display-density 480</div></pre></td></tr></table></figure></p>\n<h2 id=\"调用软件包管理器-Package-Manager-pm\"><a href=\"#调用软件包管理器-Package-Manager-pm\" class=\"headerlink\" title=\"调用软件包管理器 Package Manager(pm)\"></a>调用软件包管理器 Package Manager(pm)</h2><p>在 adb shell 中，可以使用软件包管理器 (pm) 工具发出命令，以对设备上安装的应用软件包进行操作和查询。</p>\n<h4 id=\"list-packages\"><a href=\"#list-packages\" class=\"headerlink\" title=\"list packages\"></a>list packages</h4><p>list packages [options] filter: 输出所有软件包，或者，仅输出包名称包含 filter 中的文本的软件包。</p>\n<p>选项有:</p>\n<ul>\n<li>-f：查看它们的关联文件。</li>\n<li>-d：进行过滤以仅显示已停用的软件包。</li>\n<li>-e：进行过滤以仅显示已启用的软件包。</li>\n<li>-s：进行过滤以仅显示系统软件包。</li>\n<li><strong>-3：进行过滤以仅显示第三方软件包。</strong></li>\n<li>-i：查看软件包的安装程序。</li>\n<li>-u：也包括卸载的软件包。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell pm list pacakges -3</div></pre></td></tr></table></figure>\n<h4 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path \"></a>path <package></package></h4><p>输出给定 package 的 APK 的路径。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">~ adb shell pm path wg.roomis.launcher</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/base.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_dependencies_apk.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_slice_0_apk.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_slice_1_apk.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_slice_2_apk.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_slice_3_apk.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_slice_4_apk.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_slice_5_apk.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_slice_6_apk.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_slice_7_apk.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_slice_8_apk.apk</div><div class=\"line\">package:/data/app/wg.roomis.launcher-2/split_lib_slice_9_apk.apk</div></pre></td></tr></table></figure></p>\n<h4 id=\"install-options\"><a href=\"#install-options\" class=\"headerlink\" title=\"install [options] \"></a>install [options] <path></path></h4><p>选项：</p>\n<ul>\n<li>-l：安装具有转发锁定功能的软件包。</li>\n<li><strong>-r：重新安装现有应用，保留其数据。</strong></li>\n<li>-t：允许安装测试 APK。</li>\n<li>-i installer_package_name：指定安装程序软件包名称。</li>\n<li>-s：在共享的大容量存储（如 sdcard）上安装软件包。</li>\n<li>-f：在内部系统内存上安装软件包。</li>\n<li>-d：允许版本代码降级。</li>\n<li>-g：授予应用清单中列出的所有权限。<h4 id=\"uninstall-options\"><a href=\"#uninstall-options\" class=\"headerlink\" title=\"uninstall [options] \"></a>uninstall [options] <package></package></h4>选项：</li>\n</ul>\n<p>-k：移除软件包后保留数据和缓存目录。</p>\n<h4 id=\"clear\"><a href=\"#clear\" class=\"headerlink\" title=\"clear \"></a>clear <package></package></h4><p>删除与软件包关联的所有数据。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell pm clear wg.roomis.launcher</div></pre></td></tr></table></figure>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h4 id=\"屏幕截图-screencap\"><a href=\"#屏幕截图-screencap\" class=\"headerlink\" title=\"屏幕截图 screencap \"></a>屏幕截图 screencap <filename></filename></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">~ adb shell screencap /sdcard/screen.png</div><div class=\"line\">~ adb pull /sdcard/screen.png</div></pre></td></tr></table></figure>\n<h4 id=\"录制视频-screenrecord-API-gt-19-Android-4-4\"><a href=\"#录制视频-screenrecord-API-gt-19-Android-4-4\" class=\"headerlink\" title=\"录制视频 screenrecord (API&gt;=19 Android 4.4)\"></a>录制视频 screenrecord (API&gt;=19 Android 4.4)</h4><p>screenrecord [options] <filename><br>options:</filename></p>\n<ul>\n<li>–help :显示命令语法和选项</li>\n<li>–size widthxheight :    设置视频大小：1280x720。默认值是设备的原生显示分辨率（如果支持），如果不支持，则使用 1280x720。为实现最佳结果，请使用设备的 Advanced Video Coding (AVC) 编码器支持的大小。</li>\n<li>–bit-rate <rate>:    设置视频的视频比特率（以兆比特每秒为单位）。默认值为 4Mbps。您可以增加比特率以提升视频质量，但这么做会导致影片文件变得更大。以下示例将录制比特率设为 6Mbps：</rate></li>\n</ul>\n<p>screenrecord –bit-rate 6000000 /sdcard/demo.mp4</p>\n<ul>\n<li>–time-limit <time> :设置最大录制时长（以秒为单位）。默认值和最大值均为 180（3 分钟）。</time></li>\n<li>–rotate :将输出旋转 90 度。此功能是实验性的。</li>\n<li>–verbose :显示命令行屏幕上的日志信息。如果您不设置此选项，则运行时此实用程序不会显示任何信息。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  ~ adb shell screenrecord --verbose /sdcard/demo.mp4</div><div class=\"line\">Main display is 1280x800 @57.45fps (orientation=0)</div><div class=\"line\">Configuring recorder for 1280x800 video/avc at 4.00Mbps</div><div class=\"line\">Content area is 1280x800 at offset x=0 y=0</div><div class=\"line\">^C</div><div class=\"line\">➜  ~ adb pull /sdcard/demo.mp4</div></pre></td></tr></table></figure>\n<p>注：</p>\n<ul>\n<li>不能录音频</li>\n<li>不支持在录制时旋转屏幕</li>\n</ul>\n<h4 id=\"adb-shell-input\"><a href=\"#adb-shell-input\" class=\"headerlink\" title=\"adb shell input\"></a>adb shell input</h4><ul>\n<li>adb shell input text : 向获得焦点的EditText控件输入内容,</li>\n</ul>\n<p>adb shell input text “roomis-k12”</p>\n<ul>\n<li>adb input keyevent : 该命令主要是向系统发送一个按键指令，实现模拟用户在键盘上的按键动作</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell input keyevent HOME</div><div class=\"line\">adb shell input keyevent BACK</div><div class=\"line\">adb shell input keyevent KEYCODE_POWER//26</div></pre></td></tr></table></figure>\n<p>KeyCode:android.view.KeyEvent.java</p>\n<ul>\n<li>adb shell input tap : 向设备发送一个点击操作的指令，参数是<x> <y>坐标</y></x></li>\n</ul>\n<p>adb shell input tap 100 100</p>\n<h4 id=\"adb-shell-dumpsys\"><a href=\"#adb-shell-dumpsys\" class=\"headerlink\" title=\"adb shell dumpsys\"></a>adb shell dumpsys</h4><ul>\n<li>adb shell dumpsys activity [activites|service|providers|intents| broadcasts|processes]</li>\n<li>adb shell dumpsys cpuinfo</li>\n<li><p>adb shell dumpsys package</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell dumpsys package wg.roomis.launcher | grep versonCode //查看版本号</div></pre></td></tr></table></figure>\n</li>\n<li><p>adb shell dumpsys window</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell dumpsys window displays //查看分辨率</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"压力测试-adb-shell-monkey\"><a href=\"#压力测试-adb-shell-monkey\" class=\"headerlink\" title=\"压力测试 adb shell monkey\"></a>压力测试 adb shell monkey</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell monkey -p wg.roomis.launcher -s 500 --ignore-crashes --ignore-timeouts --monitor-native-crashes -v -v 10000 &gt; ~/monkey_log.txt</div><div class=\"line\">//产生时间序列的种子值：500 忽略程序崩溃 、 忽略超时 、 监视本地程序崩溃 、 详细信息级别为2 ， 产生 10000个事件 。</div></pre></td></tr></table></figure>\n<h2 id=\"ROOMIS相关\"><a href=\"#ROOMIS相关\" class=\"headerlink\" title=\"ROOMIS相关\"></a>ROOMIS相关</h2><h4 id=\"Roomis常用文件路径：\"><a href=\"#Roomis常用文件路径：\" class=\"headerlink\" title=\"Roomis常用文件路径：\"></a>Roomis常用文件路径：</h4><ul>\n<li>bindConfig文件：/sdcard/roomis/bindConfig</li>\n<li>deviceSn文件：/sdcard/roomis/deviceSn</li>\n<li>Log目录:  /sdcard/roomis/log</li>\n<li>Database文件: /data/data/wg.roomis.launcher/databases/roomisDb.db</li>\n<li>偏好文件：/data/data/wg.roomis.launcher/shared_prefs/wg.roomis.launcher_preferences.xml</li>\n<li>webview缓存目录：/data/data/wg.roomis.launcher/cache</li>\n</ul>\n<h4 id=\"adb命令\"><a href=\"#adb命令\" class=\"headerlink\" title=\"adb命令\"></a>adb命令</h4><ul>\n<li>查看设备 :adb devices</li>\n<li>连接设备：adb connect 192.168.11.255</li>\n<li>安装 adb :install rooomis.apk</li>\n<li>覆盖安装: adb install -r roomis.apk</li>\n<li>卸载:adb uninstall wg.roomis.launcher</li>\n<li>导出roomis log：adb pull  /sdcard/roomis/log/roomis.log ~/</li>\n<li>导出anr log: adb pull /data/anr/traces.txt ~/</li>\n<li>导出数据库:adb pull /data/data/wg.roomis.launcher/databases/roomisDb.db ~/</li>\n<li>模拟刷卡：adb shell am broadcast -a wg.roomis.CARD_ENTER -e CardNo “A56BDEC7”</li>\n<li>开锁：adb shell am broadcast -a wg.roomis.actions.UNLOCK_PASSWORD</li>\n<li>检查更新:adb shell am broadcast -a wg.roomis.actions.WAKE_UP_UPDATE</li>\n<li>查看版本号：adb shell dumpsys package wg.roomis.launcher | grep  versionCode</li>\n<li>同步时间：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">adb shell</div><div class=\"line\">su</div><div class=\"line\">am startservice -n wg.roomis.launcher/.LauncherService -a wg.roomis.action.sync_time</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"sqlite3\"><a href=\"#sqlite3\" class=\"headerlink\" title=\"sqlite3\"></a>sqlite3</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd data/data/wg.roomis.launcher/databases</div><div class=\"line\">sqlite3 roomisDb.db;</div><div class=\"line\">.table</div><div class=\"line\">select * from ApiConfigEntity;</div></pre></td></tr></table></figure>"},{"title":"Android自定义控件之旅（一）滑动开关","date":"2015-12-28T01:33:42.000Z","_content":"\n\n\n我们的开关可以单击，可以滑动,效果如下图 \n\n![这里写图片描述](http://img.blog.csdn.net/20150407233434779)\n\n 我们写自定义控件时，一般分为下面几步：\n \n   1. 自定义View属性。\n   2. 在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值。\n   3. 重写onMeasure()方法。有时也可以不用重写。\n   4. 重写onDraw()方法。\n\n\n## 一、自定义View属性##\n1、在values下创建attrs.xml资源文件\n\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <resources>\n    <attr name=\"btnBackground\" format=\"reference\" />\n    <attr name=\"btnSwitch\" format=\"reference\" />\n    <attr name=\"switchState\" format=\"boolean\" />\n    <declare-styleable name=\"CustomSwitchButton\">\n        <attr name=\"btnBackground\" />\n        <attr name=\"btnSwitch\" />\n        <attr name=\"switchState\" />\n    </declare-styleable>\n    </resources>\n\n**format**指定了该属性的取值类型，有string,color,demension,integer,enum,reference,float,boolean,fraction,flag;\n**declare-styleable** 就是我们要自定义控件的属性,name取值必须是自定义控件的类名\n    \n<!--more-->\n## 二、在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值\n### 1、在布局文件中指定自定义属性的取值\n在layout下创建main_activity.xml\n\n\t<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:switchBtn=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <com.zhy.customswitchbutton.CustomSwitchButton\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_centerInParent=\"true\"\n        switchBtn:btnBackground=\"@mipmap/switch_background\"\n        switchBtn:btnSwitch=\"@mipmap/switch_button\"\n        switchBtn:switchState=\"true\" />\n    </RelativeLayout>\n\n其中**xmlns:switchBtn=\"http://schemas.android.com/apk/res-auto\"**指定命名空间\n命名空间的格式为\nAndroid Stutio中 **xmlns:前缀=\"http://schemas.android.com/apk/res/res-auto\"**\neclipse中 **xmlns:前缀=\"http://schemas.android.com/apk/res/app包名\"**\n为自定义属性赋值\n\n    switchBtn:btnBackground=\"@mipmap/switch_background\"\n    switchBtn:btnSwitch=\"@mipmap/switch_button\"\n    switchBtn:switchState=\"true\" />\n### 2、在View的构造方法中获取自定义属性的取值\n    public class CustomSwitchButton extends View {\n    private Bitmap btnBackground;\n    private Bitmap btnSwitch;\n    private boolean switchState;\n\n    /**\n     * 画笔对象\n     */\n    private Paint paint;\n\n    /**\n     * 滑动的距离\n     */\n    private float offset;\n    /**\n     * 是否发生拖动\n     */\n    private boolean isDrag = false;\n\n\n    /**\n     * 代码中new出来的，执行此构造方法\n     * @param context\n     */\n    public CustomSwitchButton(Context context) {\n        this(context, null);\n    }\n    /**\n     * xml中使用时，系统会调用此构造方法\n     * @param context\n     * @param attrs\n     */\n    public CustomSwitchButton(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n     /**\n     * xml中使用时，系统会调用此构造方法\n     * @param context\n     * @param attrs\n     */\n    public CustomSwitchButton(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        initView(context, attrs);\n    }\n\n    private void initView(Context context, AttributeSet attrs) {\n\n        paint = new Paint();\n        paint.setAntiAlias(true);//设置坑锯齿\n\n\t\t /**\n         * 获取各个属性的值 \n         */\n        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.CustomSwitchButton);\n        btnBackground = BitmapFactory.decodeResource(getResources(),\n                ta.getResourceId(R.styleable.CustomSwitchButton_btnBackground, 0));\n        btnSwitch = BitmapFactory.decodeResource(getResources(),\n                ta.getResourceId(R.styleable.CustomSwitchButton_btnSwitch, 0));\n        switchState = ta.getBoolean(R.styleable.CustomSwitchButton_switchState, false);\n    }\n    }\n\n## 三、重写onMeasure()方法,有时也可以不用重写\n\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension(btnBackground.getWidth(), btnBackground.getHeight());\n    }\n\n我们的开关很简单，宽高值就是背景图片的大小\n\n##  四、重写onDraw()方法\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        /**\n         * 绘制背景\n         *Bitmap bitmap 要绘制的图像\n         *float left 左边距\n         *float top  上边距\n         *Paint paint 画笔对象\n         */\n        canvas.drawBitmap(btnBackground, 0, 0, paint);\n        /**\n         * 绘制开关\n         */\n        canvas.drawBitmap(btnSwitch, offset, 0, paint);\n    }\n\n其中 **offset** 指的是距离左边的偏移距离，是动态变化的\n\n单击事件，\n\n    @Override\n    public void onClick(View v) {\n\t\t//拖动时，防止和onTouch冲突\n        if (!isDrag) {\n            switchState = !switchState;\n            changeState();\n        }\n\n    }\n\n    private void changeState() {\n        offset = switchState ? btnBackground.getWidth() - btnSwitch.getWidth() : 0;\n        //重绘制界面\n        invalidate();\n    }\n\n拖动事件\n\n\t/**\n     * down 事件时的X坐标\n     */\n    private float firstX;\n    /**\n     * up 事件时上次的X坐标\n     */\n    private float lastX;\n\n    /**\n     * 重写onTouchEvent实现滑动效果\n     *\n     * @param event\n     * @return\n     */\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        super.onTouchEvent(event);\n        float curX = event.getX();\n        switch (event.getAction()) {\n\n            case MotionEvent.ACTION_DOWN:\n                isDrag = false;\n                firstX = lastX = curX;\n                break;\n            case MotionEvent.ACTION_MOVE:\n                //判定是否进行了滑动\n                if (Math.abs(lastX - firstX) > 5) {\n                    isDrag = true;\n                }\n                float dis = curX - lastX;\n                offset += dis;\n                lastX = curX;\n                break;\n            case MotionEvent.ACTION_UP:\n                //未滑完时，判定最终的开关状态\n                if (isDrag) {\n                    //能滑动的最大距离\n                    float maxDis = btnBackground.getWidth() - btnSwitch.getWidth();\n                    switchState = offset > maxDis / 2 ? true : false;\n                    changeState();\n                }\n                break;\n        }\n\n        refreshView();\n        return true;\n    }\n\n    /**\n     * 刷新界面\n     */\n    private void refreshView() {\n        //判断是否已经超出边界\n        float maxDis = btnBackground.getWidth() - btnSwitch.getWidth();\n        offset = offset < 0 ? 0 : offset;\n        offset = offset > maxDis ? maxDis : offset;\n        invalidate();\n    }\n\n\n[**下载源码**](https://github.com/zhy060307/CustomSwitchButton)\n   \n\n\n\n","source":"_posts/Android自定义控件之旅（一）滑动开关.md","raw":"title: Android自定义控件之旅（一）滑动开关\ndate: 2015-12-28 09:33:42\ncategories: Android开发\ntags: Android自定义控件\n---\n\n\n\n我们的开关可以单击，可以滑动,效果如下图 \n\n![这里写图片描述](http://img.blog.csdn.net/20150407233434779)\n\n 我们写自定义控件时，一般分为下面几步：\n \n   1. 自定义View属性。\n   2. 在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值。\n   3. 重写onMeasure()方法。有时也可以不用重写。\n   4. 重写onDraw()方法。\n\n\n## 一、自定义View属性##\n1、在values下创建attrs.xml资源文件\n\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <resources>\n    <attr name=\"btnBackground\" format=\"reference\" />\n    <attr name=\"btnSwitch\" format=\"reference\" />\n    <attr name=\"switchState\" format=\"boolean\" />\n    <declare-styleable name=\"CustomSwitchButton\">\n        <attr name=\"btnBackground\" />\n        <attr name=\"btnSwitch\" />\n        <attr name=\"switchState\" />\n    </declare-styleable>\n    </resources>\n\n**format**指定了该属性的取值类型，有string,color,demension,integer,enum,reference,float,boolean,fraction,flag;\n**declare-styleable** 就是我们要自定义控件的属性,name取值必须是自定义控件的类名\n    \n<!--more-->\n## 二、在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值\n### 1、在布局文件中指定自定义属性的取值\n在layout下创建main_activity.xml\n\n\t<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:switchBtn=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <com.zhy.customswitchbutton.CustomSwitchButton\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_centerInParent=\"true\"\n        switchBtn:btnBackground=\"@mipmap/switch_background\"\n        switchBtn:btnSwitch=\"@mipmap/switch_button\"\n        switchBtn:switchState=\"true\" />\n    </RelativeLayout>\n\n其中**xmlns:switchBtn=\"http://schemas.android.com/apk/res-auto\"**指定命名空间\n命名空间的格式为\nAndroid Stutio中 **xmlns:前缀=\"http://schemas.android.com/apk/res/res-auto\"**\neclipse中 **xmlns:前缀=\"http://schemas.android.com/apk/res/app包名\"**\n为自定义属性赋值\n\n    switchBtn:btnBackground=\"@mipmap/switch_background\"\n    switchBtn:btnSwitch=\"@mipmap/switch_button\"\n    switchBtn:switchState=\"true\" />\n### 2、在View的构造方法中获取自定义属性的取值\n    public class CustomSwitchButton extends View {\n    private Bitmap btnBackground;\n    private Bitmap btnSwitch;\n    private boolean switchState;\n\n    /**\n     * 画笔对象\n     */\n    private Paint paint;\n\n    /**\n     * 滑动的距离\n     */\n    private float offset;\n    /**\n     * 是否发生拖动\n     */\n    private boolean isDrag = false;\n\n\n    /**\n     * 代码中new出来的，执行此构造方法\n     * @param context\n     */\n    public CustomSwitchButton(Context context) {\n        this(context, null);\n    }\n    /**\n     * xml中使用时，系统会调用此构造方法\n     * @param context\n     * @param attrs\n     */\n    public CustomSwitchButton(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n     /**\n     * xml中使用时，系统会调用此构造方法\n     * @param context\n     * @param attrs\n     */\n    public CustomSwitchButton(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        initView(context, attrs);\n    }\n\n    private void initView(Context context, AttributeSet attrs) {\n\n        paint = new Paint();\n        paint.setAntiAlias(true);//设置坑锯齿\n\n\t\t /**\n         * 获取各个属性的值 \n         */\n        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.CustomSwitchButton);\n        btnBackground = BitmapFactory.decodeResource(getResources(),\n                ta.getResourceId(R.styleable.CustomSwitchButton_btnBackground, 0));\n        btnSwitch = BitmapFactory.decodeResource(getResources(),\n                ta.getResourceId(R.styleable.CustomSwitchButton_btnSwitch, 0));\n        switchState = ta.getBoolean(R.styleable.CustomSwitchButton_switchState, false);\n    }\n    }\n\n## 三、重写onMeasure()方法,有时也可以不用重写\n\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension(btnBackground.getWidth(), btnBackground.getHeight());\n    }\n\n我们的开关很简单，宽高值就是背景图片的大小\n\n##  四、重写onDraw()方法\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        /**\n         * 绘制背景\n         *Bitmap bitmap 要绘制的图像\n         *float left 左边距\n         *float top  上边距\n         *Paint paint 画笔对象\n         */\n        canvas.drawBitmap(btnBackground, 0, 0, paint);\n        /**\n         * 绘制开关\n         */\n        canvas.drawBitmap(btnSwitch, offset, 0, paint);\n    }\n\n其中 **offset** 指的是距离左边的偏移距离，是动态变化的\n\n单击事件，\n\n    @Override\n    public void onClick(View v) {\n\t\t//拖动时，防止和onTouch冲突\n        if (!isDrag) {\n            switchState = !switchState;\n            changeState();\n        }\n\n    }\n\n    private void changeState() {\n        offset = switchState ? btnBackground.getWidth() - btnSwitch.getWidth() : 0;\n        //重绘制界面\n        invalidate();\n    }\n\n拖动事件\n\n\t/**\n     * down 事件时的X坐标\n     */\n    private float firstX;\n    /**\n     * up 事件时上次的X坐标\n     */\n    private float lastX;\n\n    /**\n     * 重写onTouchEvent实现滑动效果\n     *\n     * @param event\n     * @return\n     */\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        super.onTouchEvent(event);\n        float curX = event.getX();\n        switch (event.getAction()) {\n\n            case MotionEvent.ACTION_DOWN:\n                isDrag = false;\n                firstX = lastX = curX;\n                break;\n            case MotionEvent.ACTION_MOVE:\n                //判定是否进行了滑动\n                if (Math.abs(lastX - firstX) > 5) {\n                    isDrag = true;\n                }\n                float dis = curX - lastX;\n                offset += dis;\n                lastX = curX;\n                break;\n            case MotionEvent.ACTION_UP:\n                //未滑完时，判定最终的开关状态\n                if (isDrag) {\n                    //能滑动的最大距离\n                    float maxDis = btnBackground.getWidth() - btnSwitch.getWidth();\n                    switchState = offset > maxDis / 2 ? true : false;\n                    changeState();\n                }\n                break;\n        }\n\n        refreshView();\n        return true;\n    }\n\n    /**\n     * 刷新界面\n     */\n    private void refreshView() {\n        //判断是否已经超出边界\n        float maxDis = btnBackground.getWidth() - btnSwitch.getWidth();\n        offset = offset < 0 ? 0 : offset;\n        offset = offset > maxDis ? maxDis : offset;\n        invalidate();\n    }\n\n\n[**下载源码**](https://github.com/zhy060307/CustomSwitchButton)\n   \n\n\n\n","slug":"Android自定义控件之旅（一）滑动开关","published":1,"updated":"2016-07-02T01:37:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjryltlaw0005ncaq7it9fhgw","content":"<p>我们的开关可以单击，可以滑动,效果如下图 </p>\n<p><img src=\"http://img.blog.csdn.net/20150407233434779\" alt=\"这里写图片描述\"></p>\n<p> 我们写自定义控件时，一般分为下面几步：</p>\n<ol>\n<li>自定义View属性。</li>\n<li>在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值。</li>\n<li>重写onMeasure()方法。有时也可以不用重写。</li>\n<li>重写onDraw()方法。</li>\n</ol>\n<h2 id=\"一、自定义View属性\"><a href=\"#一、自定义View属性\" class=\"headerlink\" title=\"一、自定义View属性\"></a>一、自定义View属性</h2><p>1、在values下创建attrs.xml资源文件</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;resources&gt;\n&lt;attr name=&quot;btnBackground&quot; format=&quot;reference&quot; /&gt;\n&lt;attr name=&quot;btnSwitch&quot; format=&quot;reference&quot; /&gt;\n&lt;attr name=&quot;switchState&quot; format=&quot;boolean&quot; /&gt;\n&lt;declare-styleable name=&quot;CustomSwitchButton&quot;&gt;\n    &lt;attr name=&quot;btnBackground&quot; /&gt;\n    &lt;attr name=&quot;btnSwitch&quot; /&gt;\n    &lt;attr name=&quot;switchState&quot; /&gt;\n&lt;/declare-styleable&gt;\n&lt;/resources&gt;\n</code></pre><p><strong>format</strong>指定了该属性的取值类型，有string,color,demension,integer,enum,reference,float,boolean,fraction,flag;<br><strong>declare-styleable</strong> 就是我们要自定义控件的属性,name取值必须是自定义控件的类名</p>\n<a id=\"more\"></a>\n<h2 id=\"二、在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值\"><a href=\"#二、在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值\" class=\"headerlink\" title=\"二、在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值\"></a>二、在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值</h2><h3 id=\"1、在布局文件中指定自定义属性的取值\"><a href=\"#1、在布局文件中指定自定义属性的取值\" class=\"headerlink\" title=\"1、在布局文件中指定自定义属性的取值\"></a>1、在布局文件中指定自定义属性的取值</h3><p>在layout下创建main_activity.xml</p>\n<pre><code>&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\nxmlns:tools=&quot;http://schemas.android.com/tools&quot;\nxmlns:switchBtn=&quot;http://schemas.android.com/apk/res-auto&quot;\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;match_parent&quot;&gt;\n\n&lt;com.zhy.customswitchbutton.CustomSwitchButton\n    android:layout_width=&quot;wrap_content&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    android:layout_centerInParent=&quot;true&quot;\n    switchBtn:btnBackground=&quot;@mipmap/switch_background&quot;\n    switchBtn:btnSwitch=&quot;@mipmap/switch_button&quot;\n    switchBtn:switchState=&quot;true&quot; /&gt;\n&lt;/RelativeLayout&gt;\n</code></pre><p>其中<strong>xmlns:switchBtn=”<a href=\"http://schemas.android.com/apk/res-auto\" target=\"_blank\" rel=\"external\">http://schemas.android.com/apk/res-auto</a>“</strong>指定命名空间<br>命名空间的格式为<br>Android Stutio中 <strong>xmlns:前缀=”<a href=\"http://schemas.android.com/apk/res/res-auto\" target=\"_blank\" rel=\"external\">http://schemas.android.com/apk/res/res-auto</a>“</strong><br>eclipse中 <strong>xmlns:前缀=”<a href=\"http://schemas.android.com/apk/res/app包名\" target=\"_blank\" rel=\"external\">http://schemas.android.com/apk/res/app包名</a>“</strong><br>为自定义属性赋值</p>\n<pre><code>switchBtn:btnBackground=&quot;@mipmap/switch_background&quot;\nswitchBtn:btnSwitch=&quot;@mipmap/switch_button&quot;\nswitchBtn:switchState=&quot;true&quot; /&gt;\n</code></pre><h3 id=\"2、在View的构造方法中获取自定义属性的取值\"><a href=\"#2、在View的构造方法中获取自定义属性的取值\" class=\"headerlink\" title=\"2、在View的构造方法中获取自定义属性的取值\"></a>2、在View的构造方法中获取自定义属性的取值</h3><pre><code>public class CustomSwitchButton extends View {\nprivate Bitmap btnBackground;\nprivate Bitmap btnSwitch;\nprivate boolean switchState;\n\n/**\n * 画笔对象\n */\nprivate Paint paint;\n\n/**\n * 滑动的距离\n */\nprivate float offset;\n/**\n * 是否发生拖动\n */\nprivate boolean isDrag = false;\n\n\n/**\n * 代码中new出来的，执行此构造方法\n * @param context\n */\npublic CustomSwitchButton(Context context) {\n    this(context, null);\n}\n/**\n * xml中使用时，系统会调用此构造方法\n * @param context\n * @param attrs\n */\npublic CustomSwitchButton(Context context, AttributeSet attrs) {\n    this(context, attrs, 0);\n}\n\n /**\n * xml中使用时，系统会调用此构造方法\n * @param context\n * @param attrs\n */\npublic CustomSwitchButton(Context context, AttributeSet attrs, int defStyleAttr) {\n    super(context, attrs, defStyleAttr);\n    initView(context, attrs);\n}\n\nprivate void initView(Context context, AttributeSet attrs) {\n\n    paint = new Paint();\n    paint.setAntiAlias(true);//设置坑锯齿\n\n     /**\n     * 获取各个属性的值 \n     */\n    TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.CustomSwitchButton);\n    btnBackground = BitmapFactory.decodeResource(getResources(),\n            ta.getResourceId(R.styleable.CustomSwitchButton_btnBackground, 0));\n    btnSwitch = BitmapFactory.decodeResource(getResources(),\n            ta.getResourceId(R.styleable.CustomSwitchButton_btnSwitch, 0));\n    switchState = ta.getBoolean(R.styleable.CustomSwitchButton_switchState, false);\n}\n}\n</code></pre><h2 id=\"三、重写onMeasure-方法-有时也可以不用重写\"><a href=\"#三、重写onMeasure-方法-有时也可以不用重写\" class=\"headerlink\" title=\"三、重写onMeasure()方法,有时也可以不用重写\"></a>三、重写onMeasure()方法,有时也可以不用重写</h2><pre><code>@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n    setMeasuredDimension(btnBackground.getWidth(), btnBackground.getHeight());\n}\n</code></pre><p>我们的开关很简单，宽高值就是背景图片的大小</p>\n<h2 id=\"四、重写onDraw-方法\"><a href=\"#四、重写onDraw-方法\" class=\"headerlink\" title=\"四、重写onDraw()方法\"></a>四、重写onDraw()方法</h2><pre><code>@Override\nprotected void onDraw(Canvas canvas) {\n    /**\n     * 绘制背景\n     *Bitmap bitmap 要绘制的图像\n     *float left 左边距\n     *float top  上边距\n     *Paint paint 画笔对象\n     */\n    canvas.drawBitmap(btnBackground, 0, 0, paint);\n    /**\n     * 绘制开关\n     */\n    canvas.drawBitmap(btnSwitch, offset, 0, paint);\n}\n</code></pre><p>其中 <strong>offset</strong> 指的是距离左边的偏移距离，是动态变化的</p>\n<p>单击事件，</p>\n<pre><code>@Override\npublic void onClick(View v) {\n    //拖动时，防止和onTouch冲突\n    if (!isDrag) {\n        switchState = !switchState;\n        changeState();\n    }\n\n}\n\nprivate void changeState() {\n    offset = switchState ? btnBackground.getWidth() - btnSwitch.getWidth() : 0;\n    //重绘制界面\n    invalidate();\n}\n</code></pre><p>拖动事件</p>\n<pre><code>/**\n * down 事件时的X坐标\n */\nprivate float firstX;\n/**\n * up 事件时上次的X坐标\n */\nprivate float lastX;\n\n/**\n * 重写onTouchEvent实现滑动效果\n *\n * @param event\n * @return\n */\n@Override\npublic boolean onTouchEvent(MotionEvent event) {\n    super.onTouchEvent(event);\n    float curX = event.getX();\n    switch (event.getAction()) {\n\n        case MotionEvent.ACTION_DOWN:\n            isDrag = false;\n            firstX = lastX = curX;\n            break;\n        case MotionEvent.ACTION_MOVE:\n            //判定是否进行了滑动\n            if (Math.abs(lastX - firstX) &gt; 5) {\n                isDrag = true;\n            }\n            float dis = curX - lastX;\n            offset += dis;\n            lastX = curX;\n            break;\n        case MotionEvent.ACTION_UP:\n            //未滑完时，判定最终的开关状态\n            if (isDrag) {\n                //能滑动的最大距离\n                float maxDis = btnBackground.getWidth() - btnSwitch.getWidth();\n                switchState = offset &gt; maxDis / 2 ? true : false;\n                changeState();\n            }\n            break;\n    }\n\n    refreshView();\n    return true;\n}\n\n/**\n * 刷新界面\n */\nprivate void refreshView() {\n    //判断是否已经超出边界\n    float maxDis = btnBackground.getWidth() - btnSwitch.getWidth();\n    offset = offset &lt; 0 ? 0 : offset;\n    offset = offset &gt; maxDis ? maxDis : offset;\n    invalidate();\n}\n</code></pre><p><a href=\"https://github.com/zhy060307/CustomSwitchButton\" target=\"_blank\" rel=\"external\"><strong>下载源码</strong></a></p>\n","site":{"data":{}},"excerpt":"<p>我们的开关可以单击，可以滑动,效果如下图 </p>\n<p><img src=\"http://img.blog.csdn.net/20150407233434779\" alt=\"这里写图片描述\"></p>\n<p> 我们写自定义控件时，一般分为下面几步：</p>\n<ol>\n<li>自定义View属性。</li>\n<li>在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值。</li>\n<li>重写onMeasure()方法。有时也可以不用重写。</li>\n<li>重写onDraw()方法。</li>\n</ol>\n<h2 id=\"一、自定义View属性\"><a href=\"#一、自定义View属性\" class=\"headerlink\" title=\"一、自定义View属性\"></a>一、自定义View属性</h2><p>1、在values下创建attrs.xml资源文件</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;resources&gt;\n&lt;attr name=&quot;btnBackground&quot; format=&quot;reference&quot; /&gt;\n&lt;attr name=&quot;btnSwitch&quot; format=&quot;reference&quot; /&gt;\n&lt;attr name=&quot;switchState&quot; format=&quot;boolean&quot; /&gt;\n&lt;declare-styleable name=&quot;CustomSwitchButton&quot;&gt;\n    &lt;attr name=&quot;btnBackground&quot; /&gt;\n    &lt;attr name=&quot;btnSwitch&quot; /&gt;\n    &lt;attr name=&quot;switchState&quot; /&gt;\n&lt;/declare-styleable&gt;\n&lt;/resources&gt;\n</code></pre><p><strong>format</strong>指定了该属性的取值类型，有string,color,demension,integer,enum,reference,float,boolean,fraction,flag;<br><strong>declare-styleable</strong> 就是我们要自定义控件的属性,name取值必须是自定义控件的类名</p>","more":"<h2 id=\"二、在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值\"><a href=\"#二、在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值\" class=\"headerlink\" title=\"二、在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值\"></a>二、在布局文件中指定自定义属性的取值，并在View的构造方法中获取自定义属性的取值</h2><h3 id=\"1、在布局文件中指定自定义属性的取值\"><a href=\"#1、在布局文件中指定自定义属性的取值\" class=\"headerlink\" title=\"1、在布局文件中指定自定义属性的取值\"></a>1、在布局文件中指定自定义属性的取值</h3><p>在layout下创建main_activity.xml</p>\n<pre><code>&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\nxmlns:tools=&quot;http://schemas.android.com/tools&quot;\nxmlns:switchBtn=&quot;http://schemas.android.com/apk/res-auto&quot;\nandroid:layout_width=&quot;match_parent&quot;\nandroid:layout_height=&quot;match_parent&quot;&gt;\n\n&lt;com.zhy.customswitchbutton.CustomSwitchButton\n    android:layout_width=&quot;wrap_content&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    android:layout_centerInParent=&quot;true&quot;\n    switchBtn:btnBackground=&quot;@mipmap/switch_background&quot;\n    switchBtn:btnSwitch=&quot;@mipmap/switch_button&quot;\n    switchBtn:switchState=&quot;true&quot; /&gt;\n&lt;/RelativeLayout&gt;\n</code></pre><p>其中<strong>xmlns:switchBtn=”<a href=\"http://schemas.android.com/apk/res-auto\" target=\"_blank\" rel=\"external\">http://schemas.android.com/apk/res-auto</a>“</strong>指定命名空间<br>命名空间的格式为<br>Android Stutio中 <strong>xmlns:前缀=”<a href=\"http://schemas.android.com/apk/res/res-auto\" target=\"_blank\" rel=\"external\">http://schemas.android.com/apk/res/res-auto</a>“</strong><br>eclipse中 <strong>xmlns:前缀=”<a href=\"http://schemas.android.com/apk/res/app包名\" target=\"_blank\" rel=\"external\">http://schemas.android.com/apk/res/app包名</a>“</strong><br>为自定义属性赋值</p>\n<pre><code>switchBtn:btnBackground=&quot;@mipmap/switch_background&quot;\nswitchBtn:btnSwitch=&quot;@mipmap/switch_button&quot;\nswitchBtn:switchState=&quot;true&quot; /&gt;\n</code></pre><h3 id=\"2、在View的构造方法中获取自定义属性的取值\"><a href=\"#2、在View的构造方法中获取自定义属性的取值\" class=\"headerlink\" title=\"2、在View的构造方法中获取自定义属性的取值\"></a>2、在View的构造方法中获取自定义属性的取值</h3><pre><code>public class CustomSwitchButton extends View {\nprivate Bitmap btnBackground;\nprivate Bitmap btnSwitch;\nprivate boolean switchState;\n\n/**\n * 画笔对象\n */\nprivate Paint paint;\n\n/**\n * 滑动的距离\n */\nprivate float offset;\n/**\n * 是否发生拖动\n */\nprivate boolean isDrag = false;\n\n\n/**\n * 代码中new出来的，执行此构造方法\n * @param context\n */\npublic CustomSwitchButton(Context context) {\n    this(context, null);\n}\n/**\n * xml中使用时，系统会调用此构造方法\n * @param context\n * @param attrs\n */\npublic CustomSwitchButton(Context context, AttributeSet attrs) {\n    this(context, attrs, 0);\n}\n\n /**\n * xml中使用时，系统会调用此构造方法\n * @param context\n * @param attrs\n */\npublic CustomSwitchButton(Context context, AttributeSet attrs, int defStyleAttr) {\n    super(context, attrs, defStyleAttr);\n    initView(context, attrs);\n}\n\nprivate void initView(Context context, AttributeSet attrs) {\n\n    paint = new Paint();\n    paint.setAntiAlias(true);//设置坑锯齿\n\n     /**\n     * 获取各个属性的值 \n     */\n    TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.CustomSwitchButton);\n    btnBackground = BitmapFactory.decodeResource(getResources(),\n            ta.getResourceId(R.styleable.CustomSwitchButton_btnBackground, 0));\n    btnSwitch = BitmapFactory.decodeResource(getResources(),\n            ta.getResourceId(R.styleable.CustomSwitchButton_btnSwitch, 0));\n    switchState = ta.getBoolean(R.styleable.CustomSwitchButton_switchState, false);\n}\n}\n</code></pre><h2 id=\"三、重写onMeasure-方法-有时也可以不用重写\"><a href=\"#三、重写onMeasure-方法-有时也可以不用重写\" class=\"headerlink\" title=\"三、重写onMeasure()方法,有时也可以不用重写\"></a>三、重写onMeasure()方法,有时也可以不用重写</h2><pre><code>@Override\nprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n    setMeasuredDimension(btnBackground.getWidth(), btnBackground.getHeight());\n}\n</code></pre><p>我们的开关很简单，宽高值就是背景图片的大小</p>\n<h2 id=\"四、重写onDraw-方法\"><a href=\"#四、重写onDraw-方法\" class=\"headerlink\" title=\"四、重写onDraw()方法\"></a>四、重写onDraw()方法</h2><pre><code>@Override\nprotected void onDraw(Canvas canvas) {\n    /**\n     * 绘制背景\n     *Bitmap bitmap 要绘制的图像\n     *float left 左边距\n     *float top  上边距\n     *Paint paint 画笔对象\n     */\n    canvas.drawBitmap(btnBackground, 0, 0, paint);\n    /**\n     * 绘制开关\n     */\n    canvas.drawBitmap(btnSwitch, offset, 0, paint);\n}\n</code></pre><p>其中 <strong>offset</strong> 指的是距离左边的偏移距离，是动态变化的</p>\n<p>单击事件，</p>\n<pre><code>@Override\npublic void onClick(View v) {\n    //拖动时，防止和onTouch冲突\n    if (!isDrag) {\n        switchState = !switchState;\n        changeState();\n    }\n\n}\n\nprivate void changeState() {\n    offset = switchState ? btnBackground.getWidth() - btnSwitch.getWidth() : 0;\n    //重绘制界面\n    invalidate();\n}\n</code></pre><p>拖动事件</p>\n<pre><code>/**\n * down 事件时的X坐标\n */\nprivate float firstX;\n/**\n * up 事件时上次的X坐标\n */\nprivate float lastX;\n\n/**\n * 重写onTouchEvent实现滑动效果\n *\n * @param event\n * @return\n */\n@Override\npublic boolean onTouchEvent(MotionEvent event) {\n    super.onTouchEvent(event);\n    float curX = event.getX();\n    switch (event.getAction()) {\n\n        case MotionEvent.ACTION_DOWN:\n            isDrag = false;\n            firstX = lastX = curX;\n            break;\n        case MotionEvent.ACTION_MOVE:\n            //判定是否进行了滑动\n            if (Math.abs(lastX - firstX) &gt; 5) {\n                isDrag = true;\n            }\n            float dis = curX - lastX;\n            offset += dis;\n            lastX = curX;\n            break;\n        case MotionEvent.ACTION_UP:\n            //未滑完时，判定最终的开关状态\n            if (isDrag) {\n                //能滑动的最大距离\n                float maxDis = btnBackground.getWidth() - btnSwitch.getWidth();\n                switchState = offset &gt; maxDis / 2 ? true : false;\n                changeState();\n            }\n            break;\n    }\n\n    refreshView();\n    return true;\n}\n\n/**\n * 刷新界面\n */\nprivate void refreshView() {\n    //判断是否已经超出边界\n    float maxDis = btnBackground.getWidth() - btnSwitch.getWidth();\n    offset = offset &lt; 0 ? 0 : offset;\n    offset = offset &gt; maxDis ? maxDis : offset;\n    invalidate();\n}\n</code></pre><p><a href=\"https://github.com/zhy060307/CustomSwitchButton\" target=\"_blank\" rel=\"external\"><strong>下载源码</strong></a></p>"},{"title":"Dagger2 初体验","date":"2017-02-27T09:36:58.000Z","_content":"\n## 什么是Dagger2\n\n  A fast dependency injector for Android and Java.<br>\n  Dagger2起源于Dagger，是一款基于Java注解来实现的完全在编译阶段完成依赖注入的开源库，主要用于模块间解耦、提高代码的健壮性和可维护性。Dagger2在编译阶段通过apt利用Java注解自动生成Java代码，然后结合手写的代码来自动帮我们完成依赖注入的工作。\n  \n##  初步体验\n\n### 添加依赖\n  在app module的build.gradle中增加如下依赖\n\n    dependencies {\n            ......\n\n            compile 'com.google.dagger:dagger:2.x'\n            annotationProcessor 'com.google.dagger:dagger-compiler:2.x'\n   }\n\n  ","source":"_posts/Dagger2-入门.md","raw":"title: Dagger2 初体验\ndate: 2017-02-27 17:36:58\ncategories: Dagger\ntags: Dagger2\n---\n\n## 什么是Dagger2\n\n  A fast dependency injector for Android and Java.<br>\n  Dagger2起源于Dagger，是一款基于Java注解来实现的完全在编译阶段完成依赖注入的开源库，主要用于模块间解耦、提高代码的健壮性和可维护性。Dagger2在编译阶段通过apt利用Java注解自动生成Java代码，然后结合手写的代码来自动帮我们完成依赖注入的工作。\n  \n##  初步体验\n\n### 添加依赖\n  在app module的build.gradle中增加如下依赖\n\n    dependencies {\n            ......\n\n            compile 'com.google.dagger:dagger:2.x'\n            annotationProcessor 'com.google.dagger:dagger-compiler:2.x'\n   }\n\n  ","slug":"Dagger2-入门","published":1,"updated":"2017-03-06T09:52:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjryltlaz0008ncaqpiww4t7c","content":"<h2 id=\"什么是Dagger2\"><a href=\"#什么是Dagger2\" class=\"headerlink\" title=\"什么是Dagger2\"></a>什么是Dagger2</h2><p>  A fast dependency injector for Android and Java.<br><br>  Dagger2起源于Dagger，是一款基于Java注解来实现的完全在编译阶段完成依赖注入的开源库，主要用于模块间解耦、提高代码的健壮性和可维护性。Dagger2在编译阶段通过apt利用Java注解自动生成Java代码，然后结合手写的代码来自动帮我们完成依赖注入的工作。</p>\n<h2 id=\"初步体验\"><a href=\"#初步体验\" class=\"headerlink\" title=\"初步体验\"></a>初步体验</h2><h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3><p>  在app module的build.gradle中增加如下依赖</p>\n<pre><code>dependencies {\n        ......\n\n        compile &apos;com.google.dagger:dagger:2.x&apos;\n        annotationProcessor &apos;com.google.dagger:dagger-compiler:2.x&apos;\n</code></pre><p>   }</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是Dagger2\"><a href=\"#什么是Dagger2\" class=\"headerlink\" title=\"什么是Dagger2\"></a>什么是Dagger2</h2><p>  A fast dependency injector for Android and Java.<br><br>  Dagger2起源于Dagger，是一款基于Java注解来实现的完全在编译阶段完成依赖注入的开源库，主要用于模块间解耦、提高代码的健壮性和可维护性。Dagger2在编译阶段通过apt利用Java注解自动生成Java代码，然后结合手写的代码来自动帮我们完成依赖注入的工作。</p>\n<h2 id=\"初步体验\"><a href=\"#初步体验\" class=\"headerlink\" title=\"初步体验\"></a>初步体验</h2><h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3><p>  在app module的build.gradle中增加如下依赖</p>\n<pre><code>dependencies {\n        ......\n\n        compile &apos;com.google.dagger:dagger:2.x&apos;\n        annotationProcessor &apos;com.google.dagger:dagger-compiler:2.x&apos;\n</code></pre><p>   }</p>\n"},{"title":"Dagger2（一）Dagger2的基本使用和原理","date":"2019-02-10T07:37:01.000Z","_content":"\n\n# Dagger2的基本使用\n\n#### 引入dagger2\n\n在build.gradle文件中添加依赖\n\n```\nimplementation 'com.google.dagger:dagger:2.20'\nannotationProcessor 'com.google.dagger:dagger-compiler:2.20'\n```\n\nAndroid gradle plugin 版本小于2.2时要引入 [apt插件](https://bitbucket.org/hvisser/android-apt)\n\n#### 使用 @Inject 注入依赖\n```java\npublic class MainActivity extends AppCompatActivity {\n    @Inject\n    PrintService printService;\n    //.......\n}\n```\n编译后 在build/generated/source/apt/ 下可以看到生成的代码\n\n```java\npublic final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {\n  private final Provider<PrintService> printServiceProvider;\n\n  public MainActivity_MembersInjector(Provider<PrintService> printServiceProvider) {\n    this.printServiceProvider = printServiceProvider;\n  }\n\n  public static MembersInjector<MainActivity> create(Provider<PrintService> printServiceProvider) {\n    return new MainActivity_MembersInjector(printServiceProvider);\n  }\n\n  @Override\n  public void injectMembers(MainActivity instance) {\n    injectPrintService(instance, printServiceProvider.get());\n  }\n  \n  public static void injectPrintService(MainActivity instance, PrintService printService) {\n    instance.printService = printService;\n  }\n}\n```\n* injectPrintService()方法注入依赖，从 instance.printService = printService;可以看出 @Inject 注入的成员变量不能为private\n\n#### 创建依赖对象的实例\n```java\npublic class PrintService {\n    private final Printer printer;\n\n    @Inject\n    public PrintService(Printer printer) {\n        this.printer = printer;\n    }\n\n    public void startWork() {\n        this.printer.print();\n    }\n}\n```\n\nDagger会生成一个PrintService_Factory类\n```java\npublic final class PrintService_Factory implements Factory<PrintService> {\n  private final Provider<Printer> printerProvider;\n\n  public PrintService_Factory(Provider<Printer> printerProvider) {\n    this.printerProvider = printerProvider;\n  }\n\n  @Override\n  public PrintService get() {\n    return provideInstance(printerProvider);\n  }\n\n  public static PrintService provideInstance(Provider<Printer> printerProvider) {\n    return new PrintService(printerProvider.get());\n  }\n\n  public static PrintService_Factory create(Provider<Printer> printerProvider) {\n    return new PrintService_Factory(printerProvider);\n  }\n\n  public static PrintService newPrintService(Printer printer) {\n    return new PrintService(printer);\n  }\n}\n```\n\n#### @Module @Provides 提供依赖\n\n使用@Inject标注构造方法提供依赖时有限制，比如：\n\n* 依赖对象为接口，而接口是没有构造方法\n* @Inject不能标注到第三方库\n* 构造方法中的参数是动态配置的\n\n这时就需要@Provides标注的方法提供依赖，而@Provides使用时，必须方法@Module标注的类中。\n\n```java\n@Module\npublic class PrinterModule {\n\n    @Provides\n    public Printer providePrinter() {\n        return new PdfPrinter();\n    }\n\n    @Provides\n    public Handler provideHandler() {\n        return new Handler();\n    }\n}\n\n```\n* Module的优先级比@Inject标注构造函数的高\n\ndagger会为每一个@Provides标注的方法生成一个Factory\n```java\nPrinterModule_ProvideHandlerFactory\nPrinterModule_ProvidePrinterFactory\n```\n\n```java\npublic final class PrinterModule_ProvidePrinterFactory implements Factory<Printer> {\n  private final PrinterModule module;\n\n  public PrinterModule_ProvidePrinterFactory(PrinterModule module) {\n    this.module = module;\n  }\n\n  @Override\n  public Printer get() {\n    return provideInstance(module);\n  }\n\n  public static Printer provideInstance(PrinterModule module) {\n    return proxyProvidePrinter(module);\n  }\n\n  public static PrinterModule_ProvidePrinterFactory create(PrinterModule module) {\n    return new PrinterModule_ProvidePrinterFactory(module);\n  }\n\n  public static Printer proxyProvidePrinter(PrinterModule instance) {\n    return Preconditions.checkNotNull(\n        instance.providePrinter(), \"Cannot return null from a non-@Nullable @Provides method\");\n  }\n}\n\n```\n\n#### @Component 作为桥梁，关联依赖和被依赖的对象\n\n```java\n@Component(modules = PrinterModule.class)\npublic interface PrintComponent {\n    void inject(MainActivity activity);\n\n}\n```\n\n* Component类必须是接口后者抽象类\n\n在MainActivity调用PrintComponent的inject方法完成注入\n```java\n DaggerPrintComponent.builder()\n                .build().inject(this);\n```\n\ndagger为PrintComponent生成的实现类如下：\n```java\npublic final class DaggerPrintComponent implements PrintComponent {\n  private PrinterModule printerModule;\n\n  private DaggerPrintComponent(Builder builder) {\n    this.printerModule = builder.printerModule;\n  }\n\n  public static Builder builder() {\n    return new Builder();\n  }\n\n  public static PrintComponent create() {\n    return new Builder().build();\n  }\n\n  private PrintService getPrintService() {\n    return new PrintService(PrinterModule_ProvidePrinterFactory.proxyProvidePrinter(printerModule));\n  }\n\n  @Override\n  public void inject(MainActivity activity) {\n    injectMainActivity(activity);\n  }\n\n  private MainActivity injectMainActivity(MainActivity instance) {\n    MainActivity_MembersInjector.injectPrintService(instance, getPrintService());\n    return instance;\n  }\n\n  public static final class Builder {\n    private PrinterModule printerModule;\n\n    private Builder() {}\n\n    public PrintComponent build() {\n      if (printerModule == null) {\n        this.printerModule = new PrinterModule();\n      }\n      return new DaggerPrintComponent(this);\n    }\n\n    public Builder printerModule(PrinterModule printerModule) {\n      this.printerModule = Preconditions.checkNotNull(printerModule);\n      return this;\n    }\n  }\n}\n\n```\n\n[Demo Github地址](https://github.com/zhy060307/dagger2)\n\n\n","source":"_posts/Dagger2（一）Dagger2的基本使用和原理.md","raw":"title: Dagger2（一）Dagger2的基本使用和原理\ndate: 2019-02-10 15:37:01\ncategories: Dagger2\ntags: Dagger2\n---\n\n\n# Dagger2的基本使用\n\n#### 引入dagger2\n\n在build.gradle文件中添加依赖\n\n```\nimplementation 'com.google.dagger:dagger:2.20'\nannotationProcessor 'com.google.dagger:dagger-compiler:2.20'\n```\n\nAndroid gradle plugin 版本小于2.2时要引入 [apt插件](https://bitbucket.org/hvisser/android-apt)\n\n#### 使用 @Inject 注入依赖\n```java\npublic class MainActivity extends AppCompatActivity {\n    @Inject\n    PrintService printService;\n    //.......\n}\n```\n编译后 在build/generated/source/apt/ 下可以看到生成的代码\n\n```java\npublic final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {\n  private final Provider<PrintService> printServiceProvider;\n\n  public MainActivity_MembersInjector(Provider<PrintService> printServiceProvider) {\n    this.printServiceProvider = printServiceProvider;\n  }\n\n  public static MembersInjector<MainActivity> create(Provider<PrintService> printServiceProvider) {\n    return new MainActivity_MembersInjector(printServiceProvider);\n  }\n\n  @Override\n  public void injectMembers(MainActivity instance) {\n    injectPrintService(instance, printServiceProvider.get());\n  }\n  \n  public static void injectPrintService(MainActivity instance, PrintService printService) {\n    instance.printService = printService;\n  }\n}\n```\n* injectPrintService()方法注入依赖，从 instance.printService = printService;可以看出 @Inject 注入的成员变量不能为private\n\n#### 创建依赖对象的实例\n```java\npublic class PrintService {\n    private final Printer printer;\n\n    @Inject\n    public PrintService(Printer printer) {\n        this.printer = printer;\n    }\n\n    public void startWork() {\n        this.printer.print();\n    }\n}\n```\n\nDagger会生成一个PrintService_Factory类\n```java\npublic final class PrintService_Factory implements Factory<PrintService> {\n  private final Provider<Printer> printerProvider;\n\n  public PrintService_Factory(Provider<Printer> printerProvider) {\n    this.printerProvider = printerProvider;\n  }\n\n  @Override\n  public PrintService get() {\n    return provideInstance(printerProvider);\n  }\n\n  public static PrintService provideInstance(Provider<Printer> printerProvider) {\n    return new PrintService(printerProvider.get());\n  }\n\n  public static PrintService_Factory create(Provider<Printer> printerProvider) {\n    return new PrintService_Factory(printerProvider);\n  }\n\n  public static PrintService newPrintService(Printer printer) {\n    return new PrintService(printer);\n  }\n}\n```\n\n#### @Module @Provides 提供依赖\n\n使用@Inject标注构造方法提供依赖时有限制，比如：\n\n* 依赖对象为接口，而接口是没有构造方法\n* @Inject不能标注到第三方库\n* 构造方法中的参数是动态配置的\n\n这时就需要@Provides标注的方法提供依赖，而@Provides使用时，必须方法@Module标注的类中。\n\n```java\n@Module\npublic class PrinterModule {\n\n    @Provides\n    public Printer providePrinter() {\n        return new PdfPrinter();\n    }\n\n    @Provides\n    public Handler provideHandler() {\n        return new Handler();\n    }\n}\n\n```\n* Module的优先级比@Inject标注构造函数的高\n\ndagger会为每一个@Provides标注的方法生成一个Factory\n```java\nPrinterModule_ProvideHandlerFactory\nPrinterModule_ProvidePrinterFactory\n```\n\n```java\npublic final class PrinterModule_ProvidePrinterFactory implements Factory<Printer> {\n  private final PrinterModule module;\n\n  public PrinterModule_ProvidePrinterFactory(PrinterModule module) {\n    this.module = module;\n  }\n\n  @Override\n  public Printer get() {\n    return provideInstance(module);\n  }\n\n  public static Printer provideInstance(PrinterModule module) {\n    return proxyProvidePrinter(module);\n  }\n\n  public static PrinterModule_ProvidePrinterFactory create(PrinterModule module) {\n    return new PrinterModule_ProvidePrinterFactory(module);\n  }\n\n  public static Printer proxyProvidePrinter(PrinterModule instance) {\n    return Preconditions.checkNotNull(\n        instance.providePrinter(), \"Cannot return null from a non-@Nullable @Provides method\");\n  }\n}\n\n```\n\n#### @Component 作为桥梁，关联依赖和被依赖的对象\n\n```java\n@Component(modules = PrinterModule.class)\npublic interface PrintComponent {\n    void inject(MainActivity activity);\n\n}\n```\n\n* Component类必须是接口后者抽象类\n\n在MainActivity调用PrintComponent的inject方法完成注入\n```java\n DaggerPrintComponent.builder()\n                .build().inject(this);\n```\n\ndagger为PrintComponent生成的实现类如下：\n```java\npublic final class DaggerPrintComponent implements PrintComponent {\n  private PrinterModule printerModule;\n\n  private DaggerPrintComponent(Builder builder) {\n    this.printerModule = builder.printerModule;\n  }\n\n  public static Builder builder() {\n    return new Builder();\n  }\n\n  public static PrintComponent create() {\n    return new Builder().build();\n  }\n\n  private PrintService getPrintService() {\n    return new PrintService(PrinterModule_ProvidePrinterFactory.proxyProvidePrinter(printerModule));\n  }\n\n  @Override\n  public void inject(MainActivity activity) {\n    injectMainActivity(activity);\n  }\n\n  private MainActivity injectMainActivity(MainActivity instance) {\n    MainActivity_MembersInjector.injectPrintService(instance, getPrintService());\n    return instance;\n  }\n\n  public static final class Builder {\n    private PrinterModule printerModule;\n\n    private Builder() {}\n\n    public PrintComponent build() {\n      if (printerModule == null) {\n        this.printerModule = new PrinterModule();\n      }\n      return new DaggerPrintComponent(this);\n    }\n\n    public Builder printerModule(PrinterModule printerModule) {\n      this.printerModule = Preconditions.checkNotNull(printerModule);\n      return this;\n    }\n  }\n}\n\n```\n\n[Demo Github地址](https://github.com/zhy060307/dagger2)\n\n\n","slug":"Dagger2（一）Dagger2的基本使用和原理","published":1,"updated":"2019-02-10T07:37:41.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjryltlb00009ncaqk24409ip","content":"<h1 id=\"Dagger2的基本使用\"><a href=\"#Dagger2的基本使用\" class=\"headerlink\" title=\"Dagger2的基本使用\"></a>Dagger2的基本使用</h1><h4 id=\"引入dagger2\"><a href=\"#引入dagger2\" class=\"headerlink\" title=\"引入dagger2\"></a>引入dagger2</h4><p>在build.gradle文件中添加依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">implementation &apos;com.google.dagger:dagger:2.20&apos;</div><div class=\"line\">annotationProcessor &apos;com.google.dagger:dagger-compiler:2.20&apos;</div></pre></td></tr></table></figure>\n<p>Android gradle plugin 版本小于2.2时要引入 <a href=\"https://bitbucket.org/hvisser/android-apt\" target=\"_blank\" rel=\"external\">apt插件</a></p>\n<h4 id=\"使用-Inject-注入依赖\"><a href=\"#使用-Inject-注入依赖\" class=\"headerlink\" title=\"使用 @Inject 注入依赖\"></a>使用 @Inject 注入依赖</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    PrintService printService;</div><div class=\"line\">    <span class=\"comment\">//.......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译后 在build/generated/source/apt/ 下可以看到生成的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity_MembersInjector</span> <span class=\"keyword\">implements</span> <span class=\"title\">MembersInjector</span>&lt;<span class=\"title\">MainActivity</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Provider&lt;PrintService&gt; printServiceProvider;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MainActivity_MembersInjector</span><span class=\"params\">(Provider&lt;PrintService&gt; printServiceProvider)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.printServiceProvider = printServiceProvider;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MembersInjector&lt;MainActivity&gt; <span class=\"title\">create</span><span class=\"params\">(Provider&lt;PrintService&gt; printServiceProvider)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MainActivity_MembersInjector(printServiceProvider);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">injectMembers</span><span class=\"params\">(MainActivity instance)</span> </span>&#123;</div><div class=\"line\">    injectPrintService(instance, printServiceProvider.get());</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">injectPrintService</span><span class=\"params\">(MainActivity instance, PrintService printService)</span> </span>&#123;</div><div class=\"line\">    instance.printService = printService;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>injectPrintService()方法注入依赖，从 instance.printService = printService;可以看出 @Inject 注入的成员变量不能为private</li>\n</ul>\n<h4 id=\"创建依赖对象的实例\"><a href=\"#创建依赖对象的实例\" class=\"headerlink\" title=\"创建依赖对象的实例\"></a>创建依赖对象的实例</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintService</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Printer printer;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PrintService</span><span class=\"params\">(Printer printer)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.printer = printer;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startWork</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.printer.print();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Dagger会生成一个PrintService_Factory类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintService_Factory</span> <span class=\"keyword\">implements</span> <span class=\"title\">Factory</span>&lt;<span class=\"title\">PrintService</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Provider&lt;Printer&gt; printerProvider;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PrintService_Factory</span><span class=\"params\">(Provider&lt;Printer&gt; printerProvider)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.printerProvider = printerProvider;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> PrintService <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> provideInstance(printerProvider);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PrintService <span class=\"title\">provideInstance</span><span class=\"params\">(Provider&lt;Printer&gt; printerProvider)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PrintService(printerProvider.get());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PrintService_Factory <span class=\"title\">create</span><span class=\"params\">(Provider&lt;Printer&gt; printerProvider)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PrintService_Factory(printerProvider);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PrintService <span class=\"title\">newPrintService</span><span class=\"params\">(Printer printer)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PrintService(printer);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Module-Provides-提供依赖\"><a href=\"#Module-Provides-提供依赖\" class=\"headerlink\" title=\"@Module @Provides 提供依赖\"></a>@Module @Provides 提供依赖</h4><p>使用@Inject标注构造方法提供依赖时有限制，比如：</p>\n<ul>\n<li>依赖对象为接口，而接口是没有构造方法</li>\n<li>@Inject不能标注到第三方库</li>\n<li>构造方法中的参数是动态配置的</li>\n</ul>\n<p>这时就需要@Provides标注的方法提供依赖，而@Provides使用时，必须方法@Module标注的类中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrinterModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Printer <span class=\"title\">providePrinter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PdfPrinter();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Handler <span class=\"title\">provideHandler</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Handler();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Module的优先级比@Inject标注构造函数的高</li>\n</ul>\n<p>dagger会为每一个@Provides标注的方法生成一个Factory<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">PrinterModule_ProvideHandlerFactory</div><div class=\"line\">PrinterModule_ProvidePrinterFactory</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrinterModule_ProvidePrinterFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">Factory</span>&lt;<span class=\"title\">Printer</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> PrinterModule <span class=\"keyword\">module</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PrinterModule_ProvidePrinterFactory</span><span class=\"params\">(PrinterModule <span class=\"keyword\">module</span>)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.<span class=\"keyword\">module</span> = <span class=\"keyword\">module</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Printer <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> provideInstance(<span class=\"keyword\">module</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Printer <span class=\"title\">provideInstance</span><span class=\"params\">(PrinterModule <span class=\"keyword\">module</span>)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> proxyProvidePrinter(<span class=\"keyword\">module</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PrinterModule_ProvidePrinterFactory <span class=\"title\">create</span><span class=\"params\">(PrinterModule <span class=\"keyword\">module</span>)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PrinterModule_ProvidePrinterFactory(<span class=\"keyword\">module</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Printer <span class=\"title\">proxyProvidePrinter</span><span class=\"params\">(PrinterModule instance)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Preconditions.checkNotNull(</div><div class=\"line\">        instance.providePrinter(), <span class=\"string\">\"Cannot return null from a non-@Nullable @Provides method\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Component-作为桥梁，关联依赖和被依赖的对象\"><a href=\"#Component-作为桥梁，关联依赖和被依赖的对象\" class=\"headerlink\" title=\"@Component 作为桥梁，关联依赖和被依赖的对象\"></a>@Component 作为桥梁，关联依赖和被依赖的对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span>(modules = PrinterModule.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PrintComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(MainActivity activity)</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Component类必须是接口后者抽象类</li>\n</ul>\n<p>在MainActivity调用PrintComponent的inject方法完成注入<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">DaggerPrintComponent.builder()</div><div class=\"line\">               .build().inject(<span class=\"keyword\">this</span>);</div></pre></td></tr></table></figure></p>\n<p>dagger为PrintComponent生成的实现类如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaggerPrintComponent</span> <span class=\"keyword\">implements</span> <span class=\"title\">PrintComponent</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> PrinterModule printerModule;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">DaggerPrintComponent</span><span class=\"params\">(Builder builder)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.printerModule = builder.printerModule;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Builder <span class=\"title\">builder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Builder();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PrintComponent <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Builder().build();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> PrintService <span class=\"title\">getPrintService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PrintService(PrinterModule_ProvidePrinterFactory.proxyProvidePrinter(printerModule));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(MainActivity activity)</span> </span>&#123;</div><div class=\"line\">    injectMainActivity(activity);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> MainActivity <span class=\"title\">injectMainActivity</span><span class=\"params\">(MainActivity instance)</span> </span>&#123;</div><div class=\"line\">    MainActivity_MembersInjector.injectPrintService(instance, getPrintService());</div><div class=\"line\">    <span class=\"keyword\">return</span> instance;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> PrinterModule printerModule;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Builder</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PrintComponent <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (printerModule == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.printerModule = <span class=\"keyword\">new</span> PrinterModule();</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DaggerPrintComponent(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">printerModule</span><span class=\"params\">(PrinterModule printerModule)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.printerModule = Preconditions.checkNotNull(printerModule);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/zhy060307/dagger2\" target=\"_blank\" rel=\"external\">Demo Github地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Dagger2的基本使用\"><a href=\"#Dagger2的基本使用\" class=\"headerlink\" title=\"Dagger2的基本使用\"></a>Dagger2的基本使用</h1><h4 id=\"引入dagger2\"><a href=\"#引入dagger2\" class=\"headerlink\" title=\"引入dagger2\"></a>引入dagger2</h4><p>在build.gradle文件中添加依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">implementation &apos;com.google.dagger:dagger:2.20&apos;</div><div class=\"line\">annotationProcessor &apos;com.google.dagger:dagger-compiler:2.20&apos;</div></pre></td></tr></table></figure>\n<p>Android gradle plugin 版本小于2.2时要引入 <a href=\"https://bitbucket.org/hvisser/android-apt\" target=\"_blank\" rel=\"external\">apt插件</a></p>\n<h4 id=\"使用-Inject-注入依赖\"><a href=\"#使用-Inject-注入依赖\" class=\"headerlink\" title=\"使用 @Inject 注入依赖\"></a>使用 @Inject 注入依赖</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    PrintService printService;</div><div class=\"line\">    <span class=\"comment\">//.......</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译后 在build/generated/source/apt/ 下可以看到生成的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity_MembersInjector</span> <span class=\"keyword\">implements</span> <span class=\"title\">MembersInjector</span>&lt;<span class=\"title\">MainActivity</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Provider&lt;PrintService&gt; printServiceProvider;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MainActivity_MembersInjector</span><span class=\"params\">(Provider&lt;PrintService&gt; printServiceProvider)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.printServiceProvider = printServiceProvider;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MembersInjector&lt;MainActivity&gt; <span class=\"title\">create</span><span class=\"params\">(Provider&lt;PrintService&gt; printServiceProvider)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MainActivity_MembersInjector(printServiceProvider);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">injectMembers</span><span class=\"params\">(MainActivity instance)</span> </span>&#123;</div><div class=\"line\">    injectPrintService(instance, printServiceProvider.get());</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">injectPrintService</span><span class=\"params\">(MainActivity instance, PrintService printService)</span> </span>&#123;</div><div class=\"line\">    instance.printService = printService;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>injectPrintService()方法注入依赖，从 instance.printService = printService;可以看出 @Inject 注入的成员变量不能为private</li>\n</ul>\n<h4 id=\"创建依赖对象的实例\"><a href=\"#创建依赖对象的实例\" class=\"headerlink\" title=\"创建依赖对象的实例\"></a>创建依赖对象的实例</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintService</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Printer printer;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PrintService</span><span class=\"params\">(Printer printer)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.printer = printer;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startWork</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.printer.print();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Dagger会生成一个PrintService_Factory类<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintService_Factory</span> <span class=\"keyword\">implements</span> <span class=\"title\">Factory</span>&lt;<span class=\"title\">PrintService</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Provider&lt;Printer&gt; printerProvider;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PrintService_Factory</span><span class=\"params\">(Provider&lt;Printer&gt; printerProvider)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.printerProvider = printerProvider;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> PrintService <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> provideInstance(printerProvider);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PrintService <span class=\"title\">provideInstance</span><span class=\"params\">(Provider&lt;Printer&gt; printerProvider)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PrintService(printerProvider.get());</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PrintService_Factory <span class=\"title\">create</span><span class=\"params\">(Provider&lt;Printer&gt; printerProvider)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PrintService_Factory(printerProvider);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PrintService <span class=\"title\">newPrintService</span><span class=\"params\">(Printer printer)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PrintService(printer);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Module-Provides-提供依赖\"><a href=\"#Module-Provides-提供依赖\" class=\"headerlink\" title=\"@Module @Provides 提供依赖\"></a>@Module @Provides 提供依赖</h4><p>使用@Inject标注构造方法提供依赖时有限制，比如：</p>\n<ul>\n<li>依赖对象为接口，而接口是没有构造方法</li>\n<li>@Inject不能标注到第三方库</li>\n<li>构造方法中的参数是动态配置的</li>\n</ul>\n<p>这时就需要@Provides标注的方法提供依赖，而@Provides使用时，必须方法@Module标注的类中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrinterModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Printer <span class=\"title\">providePrinter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PdfPrinter();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Handler <span class=\"title\">provideHandler</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Handler();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Module的优先级比@Inject标注构造函数的高</li>\n</ul>\n<p>dagger会为每一个@Provides标注的方法生成一个Factory<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">PrinterModule_ProvideHandlerFactory</div><div class=\"line\">PrinterModule_ProvidePrinterFactory</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrinterModule_ProvidePrinterFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">Factory</span>&lt;<span class=\"title\">Printer</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> PrinterModule <span class=\"keyword\">module</span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PrinterModule_ProvidePrinterFactory</span><span class=\"params\">(PrinterModule <span class=\"keyword\">module</span>)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.<span class=\"keyword\">module</span> = <span class=\"keyword\">module</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Printer <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> provideInstance(<span class=\"keyword\">module</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Printer <span class=\"title\">provideInstance</span><span class=\"params\">(PrinterModule <span class=\"keyword\">module</span>)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> proxyProvidePrinter(<span class=\"keyword\">module</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PrinterModule_ProvidePrinterFactory <span class=\"title\">create</span><span class=\"params\">(PrinterModule <span class=\"keyword\">module</span>)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PrinterModule_ProvidePrinterFactory(<span class=\"keyword\">module</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Printer <span class=\"title\">proxyProvidePrinter</span><span class=\"params\">(PrinterModule instance)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Preconditions.checkNotNull(</div><div class=\"line\">        instance.providePrinter(), <span class=\"string\">\"Cannot return null from a non-@Nullable @Provides method\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Component-作为桥梁，关联依赖和被依赖的对象\"><a href=\"#Component-作为桥梁，关联依赖和被依赖的对象\" class=\"headerlink\" title=\"@Component 作为桥梁，关联依赖和被依赖的对象\"></a>@Component 作为桥梁，关联依赖和被依赖的对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span>(modules = PrinterModule.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PrintComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(MainActivity activity)</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Component类必须是接口后者抽象类</li>\n</ul>\n<p>在MainActivity调用PrintComponent的inject方法完成注入<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">DaggerPrintComponent.builder()</div><div class=\"line\">               .build().inject(<span class=\"keyword\">this</span>);</div></pre></td></tr></table></figure></p>\n<p>dagger为PrintComponent生成的实现类如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaggerPrintComponent</span> <span class=\"keyword\">implements</span> <span class=\"title\">PrintComponent</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> PrinterModule printerModule;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">DaggerPrintComponent</span><span class=\"params\">(Builder builder)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.printerModule = builder.printerModule;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Builder <span class=\"title\">builder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Builder();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PrintComponent <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Builder().build();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> PrintService <span class=\"title\">getPrintService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PrintService(PrinterModule_ProvidePrinterFactory.proxyProvidePrinter(printerModule));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(MainActivity activity)</span> </span>&#123;</div><div class=\"line\">    injectMainActivity(activity);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> MainActivity <span class=\"title\">injectMainActivity</span><span class=\"params\">(MainActivity instance)</span> </span>&#123;</div><div class=\"line\">    MainActivity_MembersInjector.injectPrintService(instance, getPrintService());</div><div class=\"line\">    <span class=\"keyword\">return</span> instance;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> PrinterModule printerModule;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Builder</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PrintComponent <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (printerModule == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.printerModule = <span class=\"keyword\">new</span> PrinterModule();</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DaggerPrintComponent(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">printerModule</span><span class=\"params\">(PrinterModule printerModule)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.printerModule = Preconditions.checkNotNull(printerModule);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://github.com/zhy060307/dagger2\" target=\"_blank\" rel=\"external\">Demo Github地址</a></p>\n"},{"title":"Dagger2（三）Subcomponents","date":"2019-02-10T07:41:32.000Z","_content":"\nComponent之间除了dependencies依赖关系外，还可以有继承关系。\n* 依赖关系 \n> 一个 Component 依赖其他 Compoent 公开的依赖实例，用 Component 中的dependencies声明\n* 继承关系 \n> 一个 Component 继承（也可以叫扩展）某 Component 提供更多的依赖，SubComponent 就是继承关系的体现。\n\n#### 依赖关系 dependencies\nMainComponent依赖AppComponent。\n*  MainComponent要使用AppComponent的PrintService，MainComponent必须显示提供方法将其暴露出来。\n*  MainComponent和AppComponent的Scope不能相同，因为他们的生命周期不同。\n```\n@Singleton\n@Component(modules = {AppModule.class,\n        PrinterModule.class})\npublic interface AppComponent {\n\n    void inject(App app);\n\n    PrintService printService();\n\n}\n//使用dependencies\n@ActivityScope\n@Component(dependencies = AppComponent.class)\npublic interface MainComponent {\n    void inject(MainActivity activity);\n\n}\n\n```\n\n#### 继承关系 Subcomponents\n\n##### 声明subcomponent\n\n* 和Component类似，必须是abstract class 或者interface.使用@Subcomponent标注。\n* Subcomponent和parent component的Scope不能相同，所有用自定义Scope @ActivityScope\n* SubComponent 必须显式地声明 Subcomponent.Builder，parent Component 需要用 Builder 来创建 SubComponent\n\n```\n@ActivityScope\n@Subcomponent\npublic interface SubMainComponent {\n\n    @Subcomponent.Builder\n    interface Builder {\n\n        SubMainComponent build();\n    }\n\n    void inject(MainActivity mainActivity);\n}\n\n\n@Singleton\n@Component(modules = {AppModule.class, PrinterModule.class})\npublic interface AppComponent {\n\n    void inject(App app);// 继承关系中不用显式地提供暴露依赖实例的接口\n\n    SubMainComponent.Builder mainBuilder(); // 用来创建 Subcomponent\n\n    SubSecondComponent.Builder secondBuilder();\n}\n\n```\nSubComponent 编译时不会生成 DaggerXXComponent，需要通过 parent Component 的获取 SubComponent.Builder 方法获取 SubComponent 实例\n\n```\nMainActivity中注入依赖:\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    App.component().mainBuilder()\n            .build()\n            .inject(this);\n}\n```\nDagger生成的代码如下：\n```\npublic final class DaggerAppComponent implements AppComponent {\n  //....\n\n  @Override\n  public SubMainComponent.Builder mainBuilder() {\n    return new SubMainComponentBuilder();\n  }\n\n  @Override\n  public SubSecondComponent.Builder secondBuilder() {\n    return new SubSecondComponentBuilder();\n  }\n\n  private final class SubMainComponentBuilder implements SubMainComponent.Builder {\n    @Override\n    public SubMainComponent build() {\n      return new SubMainComponentImpl(this);\n    }\n  }\n\n  private final class SubMainComponentImpl implements SubMainComponent {\n    private SubMainComponentImpl(SubMainComponentBuilder builder) {}\n\n    @Override\n    public void inject(MainActivity mainActivity) {\n      injectMainActivity(mainActivity);\n    }\n\n    private MainActivity injectMainActivity(MainActivity instance) {\n      MainActivity_MembersInjector.injectPrintService(\n          instance, DaggerAppComponent.this.printServiceProvider.get());\n      return instance;\n    }\n  }\n\n  private final class SubSecondComponentBuilder implements SubSecondComponent.Builder {\n    @Override\n    public SubSecondComponent build() {\n      return new SubSecondComponentImpl(this);\n    }\n  }\n\n  private final class SubSecondComponentImpl implements SubSecondComponent {\n    private SubSecondComponentImpl(SubSecondComponentBuilder builder) {}\n\n    @Override\n    public void inject(SecondActivity secondActivity) {\n      injectSecondActivity(secondActivity);\n    }\n\n    private SecondActivity injectSecondActivity(SecondActivity instance) {\n      SecondActivity_MembersInjector.injectPrintService(\n          instance, DaggerAppComponent.this.printServiceProvider.get());\n      return instance;\n    }\n  }\n}\n```\n从代码中可以看出，SubMainComponentImpl中直接使用了DaggerAppComponent.this.printServiceProvider.get()，也就是说Subcomponent中可以使用ParentComponent提供 的依赖\n\n\n##### 依赖关系 vs 继承关系\n相同点：\n\n* 两者都能复用其他 Component 的依赖\n\n* 有依赖关系和继承关系的 Component 不能有相同的 Scope\n\n区别：\n\n* 依赖关系中被依赖的 Component 必须显式地提供公开依赖实例的接口，而 SubComponent 默认继承 parent Component 的依赖。\n\n* 依赖关系会生成两个独立的 DaggerXXComponent 类，而 SubComponent 不会生成 独立的 DaggerXXComponent 类。\n\n#### Repeated modules \n\n当相同的 Module 注入到 parent Component 和它的 SubComponent 中时，则每个 Component 都将自动使用这个 Module 的同一实例。也就是如果在 SubComponent.Builder 中调用相同的 Module 或者在返回 SubComponent 的抽象工厂方法中以重复 Module 作为参数时，会出现错误。（前者在编译时不能检测出，是运行时错误）\n\n```\n@Component(modules = {RepeatedModule.class, ...})\ninterface ComponentOne {\n  ComponentTwo componentTwo(RepeatedModule repeatedModule); // COMPILE ERROR!\n  ComponentThree.Builder componentThreeBuilder();\n}\n\n@Subcomponent(modules = {RepeatedModule.class, ...})\ninterface ComponentTwo { ... }\n\n@Subcomponent(modules = {RepeatedModule.class, ...})\ninterface ComponentThree {\n  @Subcomponent.Builder\n  interface Builder {\n    Builder repeatedModule(RepeatedModule repeatedModule);\n    ComponentThree build();\n  }\n}\n\nDaggerComponentOne.create().componentThreeBuilder()\n    .repeatedModule(new RepeatedModule()) // UnsupportedOperationException!\n    .build();\n```\n\n[Demo Github地址](https://github.com/zhy060307/dagger2)\n","source":"_posts/Dagger2（三）Subcomponents.md","raw":"title: Dagger2（三）Subcomponents\ndate: 2019-02-10 15:41:32\ncategories: Dagger2\ntags: Dagger2\n---\n\nComponent之间除了dependencies依赖关系外，还可以有继承关系。\n* 依赖关系 \n> 一个 Component 依赖其他 Compoent 公开的依赖实例，用 Component 中的dependencies声明\n* 继承关系 \n> 一个 Component 继承（也可以叫扩展）某 Component 提供更多的依赖，SubComponent 就是继承关系的体现。\n\n#### 依赖关系 dependencies\nMainComponent依赖AppComponent。\n*  MainComponent要使用AppComponent的PrintService，MainComponent必须显示提供方法将其暴露出来。\n*  MainComponent和AppComponent的Scope不能相同，因为他们的生命周期不同。\n```\n@Singleton\n@Component(modules = {AppModule.class,\n        PrinterModule.class})\npublic interface AppComponent {\n\n    void inject(App app);\n\n    PrintService printService();\n\n}\n//使用dependencies\n@ActivityScope\n@Component(dependencies = AppComponent.class)\npublic interface MainComponent {\n    void inject(MainActivity activity);\n\n}\n\n```\n\n#### 继承关系 Subcomponents\n\n##### 声明subcomponent\n\n* 和Component类似，必须是abstract class 或者interface.使用@Subcomponent标注。\n* Subcomponent和parent component的Scope不能相同，所有用自定义Scope @ActivityScope\n* SubComponent 必须显式地声明 Subcomponent.Builder，parent Component 需要用 Builder 来创建 SubComponent\n\n```\n@ActivityScope\n@Subcomponent\npublic interface SubMainComponent {\n\n    @Subcomponent.Builder\n    interface Builder {\n\n        SubMainComponent build();\n    }\n\n    void inject(MainActivity mainActivity);\n}\n\n\n@Singleton\n@Component(modules = {AppModule.class, PrinterModule.class})\npublic interface AppComponent {\n\n    void inject(App app);// 继承关系中不用显式地提供暴露依赖实例的接口\n\n    SubMainComponent.Builder mainBuilder(); // 用来创建 Subcomponent\n\n    SubSecondComponent.Builder secondBuilder();\n}\n\n```\nSubComponent 编译时不会生成 DaggerXXComponent，需要通过 parent Component 的获取 SubComponent.Builder 方法获取 SubComponent 实例\n\n```\nMainActivity中注入依赖:\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    App.component().mainBuilder()\n            .build()\n            .inject(this);\n}\n```\nDagger生成的代码如下：\n```\npublic final class DaggerAppComponent implements AppComponent {\n  //....\n\n  @Override\n  public SubMainComponent.Builder mainBuilder() {\n    return new SubMainComponentBuilder();\n  }\n\n  @Override\n  public SubSecondComponent.Builder secondBuilder() {\n    return new SubSecondComponentBuilder();\n  }\n\n  private final class SubMainComponentBuilder implements SubMainComponent.Builder {\n    @Override\n    public SubMainComponent build() {\n      return new SubMainComponentImpl(this);\n    }\n  }\n\n  private final class SubMainComponentImpl implements SubMainComponent {\n    private SubMainComponentImpl(SubMainComponentBuilder builder) {}\n\n    @Override\n    public void inject(MainActivity mainActivity) {\n      injectMainActivity(mainActivity);\n    }\n\n    private MainActivity injectMainActivity(MainActivity instance) {\n      MainActivity_MembersInjector.injectPrintService(\n          instance, DaggerAppComponent.this.printServiceProvider.get());\n      return instance;\n    }\n  }\n\n  private final class SubSecondComponentBuilder implements SubSecondComponent.Builder {\n    @Override\n    public SubSecondComponent build() {\n      return new SubSecondComponentImpl(this);\n    }\n  }\n\n  private final class SubSecondComponentImpl implements SubSecondComponent {\n    private SubSecondComponentImpl(SubSecondComponentBuilder builder) {}\n\n    @Override\n    public void inject(SecondActivity secondActivity) {\n      injectSecondActivity(secondActivity);\n    }\n\n    private SecondActivity injectSecondActivity(SecondActivity instance) {\n      SecondActivity_MembersInjector.injectPrintService(\n          instance, DaggerAppComponent.this.printServiceProvider.get());\n      return instance;\n    }\n  }\n}\n```\n从代码中可以看出，SubMainComponentImpl中直接使用了DaggerAppComponent.this.printServiceProvider.get()，也就是说Subcomponent中可以使用ParentComponent提供 的依赖\n\n\n##### 依赖关系 vs 继承关系\n相同点：\n\n* 两者都能复用其他 Component 的依赖\n\n* 有依赖关系和继承关系的 Component 不能有相同的 Scope\n\n区别：\n\n* 依赖关系中被依赖的 Component 必须显式地提供公开依赖实例的接口，而 SubComponent 默认继承 parent Component 的依赖。\n\n* 依赖关系会生成两个独立的 DaggerXXComponent 类，而 SubComponent 不会生成 独立的 DaggerXXComponent 类。\n\n#### Repeated modules \n\n当相同的 Module 注入到 parent Component 和它的 SubComponent 中时，则每个 Component 都将自动使用这个 Module 的同一实例。也就是如果在 SubComponent.Builder 中调用相同的 Module 或者在返回 SubComponent 的抽象工厂方法中以重复 Module 作为参数时，会出现错误。（前者在编译时不能检测出，是运行时错误）\n\n```\n@Component(modules = {RepeatedModule.class, ...})\ninterface ComponentOne {\n  ComponentTwo componentTwo(RepeatedModule repeatedModule); // COMPILE ERROR!\n  ComponentThree.Builder componentThreeBuilder();\n}\n\n@Subcomponent(modules = {RepeatedModule.class, ...})\ninterface ComponentTwo { ... }\n\n@Subcomponent(modules = {RepeatedModule.class, ...})\ninterface ComponentThree {\n  @Subcomponent.Builder\n  interface Builder {\n    Builder repeatedModule(RepeatedModule repeatedModule);\n    ComponentThree build();\n  }\n}\n\nDaggerComponentOne.create().componentThreeBuilder()\n    .repeatedModule(new RepeatedModule()) // UnsupportedOperationException!\n    .build();\n```\n\n[Demo Github地址](https://github.com/zhy060307/dagger2)\n","slug":"Dagger2（三）Subcomponents","published":1,"updated":"2019-02-10T07:42:03.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjryltlb1000ancaq7z31kfme","content":"<p>Component之间除了dependencies依赖关系外，还可以有继承关系。</p>\n<ul>\n<li>依赖关系 <blockquote>\n<p>一个 Component 依赖其他 Compoent 公开的依赖实例，用 Component 中的dependencies声明</p>\n</blockquote>\n</li>\n<li>继承关系 <blockquote>\n<p>一个 Component 继承（也可以叫扩展）某 Component 提供更多的依赖，SubComponent 就是继承关系的体现。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"依赖关系-dependencies\"><a href=\"#依赖关系-dependencies\" class=\"headerlink\" title=\"依赖关系 dependencies\"></a>依赖关系 dependencies</h4><p>MainComponent依赖AppComponent。</p>\n<ul>\n<li>MainComponent要使用AppComponent的PrintService，MainComponent必须显示提供方法将其暴露出来。</li>\n<li>MainComponent和AppComponent的Scope不能相同，因为他们的生命周期不同。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Singleton</div><div class=\"line\">@Component(modules = &#123;AppModule.class,</div><div class=\"line\">        PrinterModule.class&#125;)</div><div class=\"line\">public interface AppComponent &#123;</div><div class=\"line\"></div><div class=\"line\">    void inject(App app);</div><div class=\"line\"></div><div class=\"line\">    PrintService printService();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">//使用dependencies</div><div class=\"line\">@ActivityScope</div><div class=\"line\">@Component(dependencies = AppComponent.class)</div><div class=\"line\">public interface MainComponent &#123;</div><div class=\"line\">    void inject(MainActivity activity);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"继承关系-Subcomponents\"><a href=\"#继承关系-Subcomponents\" class=\"headerlink\" title=\"继承关系 Subcomponents\"></a>继承关系 Subcomponents</h4><h5 id=\"声明subcomponent\"><a href=\"#声明subcomponent\" class=\"headerlink\" title=\"声明subcomponent\"></a>声明subcomponent</h5><ul>\n<li>和Component类似，必须是abstract class 或者interface.使用@Subcomponent标注。</li>\n<li>Subcomponent和parent component的Scope不能相同，所有用自定义Scope @ActivityScope</li>\n<li>SubComponent 必须显式地声明 Subcomponent.Builder，parent Component 需要用 Builder 来创建 SubComponent</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">@ActivityScope</div><div class=\"line\">@Subcomponent</div><div class=\"line\">public interface SubMainComponent &#123;</div><div class=\"line\"></div><div class=\"line\">    @Subcomponent.Builder</div><div class=\"line\">    interface Builder &#123;</div><div class=\"line\"></div><div class=\"line\">        SubMainComponent build();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    void inject(MainActivity mainActivity);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">@Singleton</div><div class=\"line\">@Component(modules = &#123;AppModule.class, PrinterModule.class&#125;)</div><div class=\"line\">public interface AppComponent &#123;</div><div class=\"line\"></div><div class=\"line\">    void inject(App app);// 继承关系中不用显式地提供暴露依赖实例的接口</div><div class=\"line\"></div><div class=\"line\">    SubMainComponent.Builder mainBuilder(); // 用来创建 Subcomponent</div><div class=\"line\"></div><div class=\"line\">    SubSecondComponent.Builder secondBuilder();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>SubComponent 编译时不会生成 DaggerXXComponent，需要通过 parent Component 的获取 SubComponent.Builder 方法获取 SubComponent 实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">MainActivity中注入依赖:</div><div class=\"line\"></div><div class=\"line\">@Override</div><div class=\"line\">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">    super.onCreate(savedInstanceState);</div><div class=\"line\">    setContentView(R.layout.activity_main);</div><div class=\"line\">    App.component().mainBuilder()</div><div class=\"line\">            .build()</div><div class=\"line\">            .inject(this);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Dagger生成的代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final class DaggerAppComponent implements AppComponent &#123;</div><div class=\"line\">  //....</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public SubMainComponent.Builder mainBuilder() &#123;</div><div class=\"line\">    return new SubMainComponentBuilder();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public SubSecondComponent.Builder secondBuilder() &#123;</div><div class=\"line\">    return new SubSecondComponentBuilder();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  private final class SubMainComponentBuilder implements SubMainComponent.Builder &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public SubMainComponent build() &#123;</div><div class=\"line\">      return new SubMainComponentImpl(this);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  private final class SubMainComponentImpl implements SubMainComponent &#123;</div><div class=\"line\">    private SubMainComponentImpl(SubMainComponentBuilder builder) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void inject(MainActivity mainActivity) &#123;</div><div class=\"line\">      injectMainActivity(mainActivity);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private MainActivity injectMainActivity(MainActivity instance) &#123;</div><div class=\"line\">      MainActivity_MembersInjector.injectPrintService(</div><div class=\"line\">          instance, DaggerAppComponent.this.printServiceProvider.get());</div><div class=\"line\">      return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  private final class SubSecondComponentBuilder implements SubSecondComponent.Builder &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public SubSecondComponent build() &#123;</div><div class=\"line\">      return new SubSecondComponentImpl(this);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  private final class SubSecondComponentImpl implements SubSecondComponent &#123;</div><div class=\"line\">    private SubSecondComponentImpl(SubSecondComponentBuilder builder) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void inject(SecondActivity secondActivity) &#123;</div><div class=\"line\">      injectSecondActivity(secondActivity);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private SecondActivity injectSecondActivity(SecondActivity instance) &#123;</div><div class=\"line\">      SecondActivity_MembersInjector.injectPrintService(</div><div class=\"line\">          instance, DaggerAppComponent.this.printServiceProvider.get());</div><div class=\"line\">      return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从代码中可以看出，SubMainComponentImpl中直接使用了DaggerAppComponent.this.printServiceProvider.get()，也就是说Subcomponent中可以使用ParentComponent提供 的依赖</p>\n<h5 id=\"依赖关系-vs-继承关系\"><a href=\"#依赖关系-vs-继承关系\" class=\"headerlink\" title=\"依赖关系 vs 继承关系\"></a>依赖关系 vs 继承关系</h5><p>相同点：</p>\n<ul>\n<li><p>两者都能复用其他 Component 的依赖</p>\n</li>\n<li><p>有依赖关系和继承关系的 Component 不能有相同的 Scope</p>\n</li>\n</ul>\n<p>区别：</p>\n<ul>\n<li><p>依赖关系中被依赖的 Component 必须显式地提供公开依赖实例的接口，而 SubComponent 默认继承 parent Component 的依赖。</p>\n</li>\n<li><p>依赖关系会生成两个独立的 DaggerXXComponent 类，而 SubComponent 不会生成 独立的 DaggerXXComponent 类。</p>\n</li>\n</ul>\n<h4 id=\"Repeated-modules\"><a href=\"#Repeated-modules\" class=\"headerlink\" title=\"Repeated modules\"></a>Repeated modules</h4><p>当相同的 Module 注入到 parent Component 和它的 SubComponent 中时，则每个 Component 都将自动使用这个 Module 的同一实例。也就是如果在 SubComponent.Builder 中调用相同的 Module 或者在返回 SubComponent 的抽象工厂方法中以重复 Module 作为参数时，会出现错误。（前者在编译时不能检测出，是运行时错误）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Component(modules = &#123;RepeatedModule.class, ...&#125;)</div><div class=\"line\">interface ComponentOne &#123;</div><div class=\"line\">  ComponentTwo componentTwo(RepeatedModule repeatedModule); // COMPILE ERROR!</div><div class=\"line\">  ComponentThree.Builder componentThreeBuilder();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Subcomponent(modules = &#123;RepeatedModule.class, ...&#125;)</div><div class=\"line\">interface ComponentTwo &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\">@Subcomponent(modules = &#123;RepeatedModule.class, ...&#125;)</div><div class=\"line\">interface ComponentThree &#123;</div><div class=\"line\">  @Subcomponent.Builder</div><div class=\"line\">  interface Builder &#123;</div><div class=\"line\">    Builder repeatedModule(RepeatedModule repeatedModule);</div><div class=\"line\">    ComponentThree build();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">DaggerComponentOne.create().componentThreeBuilder()</div><div class=\"line\">    .repeatedModule(new RepeatedModule()) // UnsupportedOperationException!</div><div class=\"line\">    .build();</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/zhy060307/dagger2\" target=\"_blank\" rel=\"external\">Demo Github地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Component之间除了dependencies依赖关系外，还可以有继承关系。</p>\n<ul>\n<li>依赖关系 <blockquote>\n<p>一个 Component 依赖其他 Compoent 公开的依赖实例，用 Component 中的dependencies声明</p>\n</blockquote>\n</li>\n<li>继承关系 <blockquote>\n<p>一个 Component 继承（也可以叫扩展）某 Component 提供更多的依赖，SubComponent 就是继承关系的体现。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"依赖关系-dependencies\"><a href=\"#依赖关系-dependencies\" class=\"headerlink\" title=\"依赖关系 dependencies\"></a>依赖关系 dependencies</h4><p>MainComponent依赖AppComponent。</p>\n<ul>\n<li>MainComponent要使用AppComponent的PrintService，MainComponent必须显示提供方法将其暴露出来。</li>\n<li>MainComponent和AppComponent的Scope不能相同，因为他们的生命周期不同。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Singleton</div><div class=\"line\">@Component(modules = &#123;AppModule.class,</div><div class=\"line\">        PrinterModule.class&#125;)</div><div class=\"line\">public interface AppComponent &#123;</div><div class=\"line\"></div><div class=\"line\">    void inject(App app);</div><div class=\"line\"></div><div class=\"line\">    PrintService printService();</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">//使用dependencies</div><div class=\"line\">@ActivityScope</div><div class=\"line\">@Component(dependencies = AppComponent.class)</div><div class=\"line\">public interface MainComponent &#123;</div><div class=\"line\">    void inject(MainActivity activity);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"继承关系-Subcomponents\"><a href=\"#继承关系-Subcomponents\" class=\"headerlink\" title=\"继承关系 Subcomponents\"></a>继承关系 Subcomponents</h4><h5 id=\"声明subcomponent\"><a href=\"#声明subcomponent\" class=\"headerlink\" title=\"声明subcomponent\"></a>声明subcomponent</h5><ul>\n<li>和Component类似，必须是abstract class 或者interface.使用@Subcomponent标注。</li>\n<li>Subcomponent和parent component的Scope不能相同，所有用自定义Scope @ActivityScope</li>\n<li>SubComponent 必须显式地声明 Subcomponent.Builder，parent Component 需要用 Builder 来创建 SubComponent</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">@ActivityScope</div><div class=\"line\">@Subcomponent</div><div class=\"line\">public interface SubMainComponent &#123;</div><div class=\"line\"></div><div class=\"line\">    @Subcomponent.Builder</div><div class=\"line\">    interface Builder &#123;</div><div class=\"line\"></div><div class=\"line\">        SubMainComponent build();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    void inject(MainActivity mainActivity);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">@Singleton</div><div class=\"line\">@Component(modules = &#123;AppModule.class, PrinterModule.class&#125;)</div><div class=\"line\">public interface AppComponent &#123;</div><div class=\"line\"></div><div class=\"line\">    void inject(App app);// 继承关系中不用显式地提供暴露依赖实例的接口</div><div class=\"line\"></div><div class=\"line\">    SubMainComponent.Builder mainBuilder(); // 用来创建 Subcomponent</div><div class=\"line\"></div><div class=\"line\">    SubSecondComponent.Builder secondBuilder();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>SubComponent 编译时不会生成 DaggerXXComponent，需要通过 parent Component 的获取 SubComponent.Builder 方法获取 SubComponent 实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">MainActivity中注入依赖:</div><div class=\"line\"></div><div class=\"line\">@Override</div><div class=\"line\">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">    super.onCreate(savedInstanceState);</div><div class=\"line\">    setContentView(R.layout.activity_main);</div><div class=\"line\">    App.component().mainBuilder()</div><div class=\"line\">            .build()</div><div class=\"line\">            .inject(this);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Dagger生成的代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final class DaggerAppComponent implements AppComponent &#123;</div><div class=\"line\">  //....</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public SubMainComponent.Builder mainBuilder() &#123;</div><div class=\"line\">    return new SubMainComponentBuilder();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public SubSecondComponent.Builder secondBuilder() &#123;</div><div class=\"line\">    return new SubSecondComponentBuilder();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  private final class SubMainComponentBuilder implements SubMainComponent.Builder &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public SubMainComponent build() &#123;</div><div class=\"line\">      return new SubMainComponentImpl(this);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  private final class SubMainComponentImpl implements SubMainComponent &#123;</div><div class=\"line\">    private SubMainComponentImpl(SubMainComponentBuilder builder) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void inject(MainActivity mainActivity) &#123;</div><div class=\"line\">      injectMainActivity(mainActivity);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private MainActivity injectMainActivity(MainActivity instance) &#123;</div><div class=\"line\">      MainActivity_MembersInjector.injectPrintService(</div><div class=\"line\">          instance, DaggerAppComponent.this.printServiceProvider.get());</div><div class=\"line\">      return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  private final class SubSecondComponentBuilder implements SubSecondComponent.Builder &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public SubSecondComponent build() &#123;</div><div class=\"line\">      return new SubSecondComponentImpl(this);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  private final class SubSecondComponentImpl implements SubSecondComponent &#123;</div><div class=\"line\">    private SubSecondComponentImpl(SubSecondComponentBuilder builder) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void inject(SecondActivity secondActivity) &#123;</div><div class=\"line\">      injectSecondActivity(secondActivity);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private SecondActivity injectSecondActivity(SecondActivity instance) &#123;</div><div class=\"line\">      SecondActivity_MembersInjector.injectPrintService(</div><div class=\"line\">          instance, DaggerAppComponent.this.printServiceProvider.get());</div><div class=\"line\">      return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>从代码中可以看出，SubMainComponentImpl中直接使用了DaggerAppComponent.this.printServiceProvider.get()，也就是说Subcomponent中可以使用ParentComponent提供 的依赖</p>\n<h5 id=\"依赖关系-vs-继承关系\"><a href=\"#依赖关系-vs-继承关系\" class=\"headerlink\" title=\"依赖关系 vs 继承关系\"></a>依赖关系 vs 继承关系</h5><p>相同点：</p>\n<ul>\n<li><p>两者都能复用其他 Component 的依赖</p>\n</li>\n<li><p>有依赖关系和继承关系的 Component 不能有相同的 Scope</p>\n</li>\n</ul>\n<p>区别：</p>\n<ul>\n<li><p>依赖关系中被依赖的 Component 必须显式地提供公开依赖实例的接口，而 SubComponent 默认继承 parent Component 的依赖。</p>\n</li>\n<li><p>依赖关系会生成两个独立的 DaggerXXComponent 类，而 SubComponent 不会生成 独立的 DaggerXXComponent 类。</p>\n</li>\n</ul>\n<h4 id=\"Repeated-modules\"><a href=\"#Repeated-modules\" class=\"headerlink\" title=\"Repeated modules\"></a>Repeated modules</h4><p>当相同的 Module 注入到 parent Component 和它的 SubComponent 中时，则每个 Component 都将自动使用这个 Module 的同一实例。也就是如果在 SubComponent.Builder 中调用相同的 Module 或者在返回 SubComponent 的抽象工厂方法中以重复 Module 作为参数时，会出现错误。（前者在编译时不能检测出，是运行时错误）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Component(modules = &#123;RepeatedModule.class, ...&#125;)</div><div class=\"line\">interface ComponentOne &#123;</div><div class=\"line\">  ComponentTwo componentTwo(RepeatedModule repeatedModule); // COMPILE ERROR!</div><div class=\"line\">  ComponentThree.Builder componentThreeBuilder();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@Subcomponent(modules = &#123;RepeatedModule.class, ...&#125;)</div><div class=\"line\">interface ComponentTwo &#123; ... &#125;</div><div class=\"line\"></div><div class=\"line\">@Subcomponent(modules = &#123;RepeatedModule.class, ...&#125;)</div><div class=\"line\">interface ComponentThree &#123;</div><div class=\"line\">  @Subcomponent.Builder</div><div class=\"line\">  interface Builder &#123;</div><div class=\"line\">    Builder repeatedModule(RepeatedModule repeatedModule);</div><div class=\"line\">    ComponentThree build();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">DaggerComponentOne.create().componentThreeBuilder()</div><div class=\"line\">    .repeatedModule(new RepeatedModule()) // UnsupportedOperationException!</div><div class=\"line\">    .build();</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/zhy060307/dagger2\" target=\"_blank\" rel=\"external\">Demo Github地址</a></p>\n"},{"title":"Dagger2（二） Lazy、Qualifier、Scope等","date":"2019-02-10T07:40:15.000Z","_content":"\n\n\n#### Lazy 延迟加载\n\n使用 @Inject Lazy<xxx>来提供延迟加载,Lazy和Provider功类似\n\n```java\npublic interface Lazy<T> {\n  /**\n   * Return the underlying value, computing the value if necessary. All calls to\n   * the same {@code Lazy} instance will return the same result.\n   */\n  T get();\n}\n```\n\n\n\n\n```\n public class MainActivity extends AppCompatActivity {\n    @Inject\n    Lazy<PrintService> printService;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        DaggerPrintComponent.builder()\n                .build().inject(this);\n    }\n\n    public void print(View view) {\n        printService.get().startWork();\n    }\n\n```\n\ndagger生成的代码如下：\n```java\npublic final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {\n  private final Provider<PrintService> printServiceProvider;\n\n  public MainActivity_MembersInjector(Provider<PrintService> printServiceProvider) {\n    this.printServiceProvider = printServiceProvider;\n  }\n\n  public static MembersInjector<MainActivity> create(Provider<PrintService> printServiceProvider) {\n    return new MainActivity_MembersInjector(printServiceProvider);\n  }\n\n  @Override\n  public void injectMembers(MainActivity instance) {\n    injectPrintService(instance, DoubleCheck.lazy(printServiceProvider));\n  }\n\n  public static void injectPrintService(MainActivity instance, Lazy<PrintService> printService) {\n    instance.printService = printService;\n  }\n}\n```\n关键代码\n```java\n@Override\n  public void injectMembers(MainActivity instance) {\n    injectPrintService(instance, DoubleCheck.lazy(printServiceProvider));\n  }\n\n```\n\nDoubleCheck.lazy()是将Provider转化为DoubleCheck\n```java\npublic static <P extends Provider<T>, T> Lazy<T> lazy(P provider) {\n    if (provider instanceof Lazy) {\n      @SuppressWarnings(\"unchecked\")\n      final Lazy<T> lazy = (Lazy<T>) provider;\n      // Avoids memoizing a value that is already memoized.\n      // NOTE: There is a pathological case where Provider<P> may implement Lazy<L>, but P and L\n      // are different types using covariant return on get(). Right now this is used with\n      // DoubleCheck<T> exclusively, which is implemented such that P and L are always\n      // the same, so it will be fine for that case.\n      return lazy;\n    }\n    return new DoubleCheck<T>(checkNotNull(provider));\n  }\n```\n在调用Lazy.get()时，就是调用DoubleCheck.get(),代码如下，返回的是同一个对象\n\n```java\n@SuppressWarnings(\"unchecked\") // cast only happens when result comes from the provider\n  @Override\n  public T get() {\n    Object result = instance;\n    if (result == UNINITIALIZED) {\n      synchronized (this) {\n        result = instance;\n        if (result == UNINITIALIZED) {\n          result = provider.get();\n          instance = reentrantCheck(instance, result);\n          /* Null out the reference to the provider. We are never going to need it again, so we\n           * can make it eligible for GC. */\n          provider = null;\n        }\n      }\n    }\n    return (T) result;\n  }\n```\n* 使用 Lazy延迟加载时，get()方法返回同一个对象\n\n#### Provide 延迟加载\n\n和Lazy用法一致，但每次调用get()方法，返回不同的对象。\n\n\n#### Qualifier 限定符\n\n在Module中要提供接口的多个实现类，下面的写法编译器会报错\n \n ```java\n @Module(includes = {AppModule.class})\npublic class PrinterModule {\n\n    @Provides\n    public Printer providePrinter() {\n        return new PdfPrinter();\n    }\n\n\n    @Provides\n    public Printer provideSamplePrinter() {\n        return new SamplePrinter();\n    }\n\n}\n\nerror: [Dagger/DuplicateBindings] com.zhy.dagger2.printer.Printer is bound multiple times:\n\n ```\n 使用Qualifier可以解决此类问题。创建注解Sample,Pdf他们都被Qualifier标注\n ```java\n @Qualifier\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Pdf {\n}\n\n@Qualifier\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Sample {\n}\n\n ```\n 添加到对应的Provider中\n ```\n @Module(includes = {AppModule.class})\npublic class PrinterModule {\n\n    @Provides\n    @Pdf\n    public Printer providePrinter() {\n        return new PdfPrinter();\n    }\n\n\n    @Provides\n    @Sample\n    public Printer provideSamplePrinter() {\n        return new SamplePrinter();\n    }\n\n}\n```\n\n依赖注入时带上对应的Annotation，\n\n```\n@Inject\npublic PrintService(@Sample Printer printer) {\n    this.printer = printer;\n    System.out.println(\"Loading PrintService....\");\n}\n```\n\n#### @Named\n\nJSR330中内置的Qualifier，使用起来很方便\n\n```java\n@Module(includes = {AppModule.class})\npublic class PrinterModule {\n\n    @Provides\n//  @Pdf\n    @Named(\"pdf\")\n    public Printer providePrinter() {\n        return new PdfPrinter();\n    }\n\n\n    @Provides\n//  @Sample\n    @Named(\"sample\")\n    public Printer provideSamplePrinter() {\n        return new SamplePrinter();\n    }\n\n}\n\nPrintService//\n\n@Inject\npublic PrintService(@Named(\"pdf\") Printer printer) {\n     this.printer = printer;\n     System.out.println(\"Loading PrintService....\");\n}\n```\n\n\n#### @Scope  作用域\n> Scope 是用来确定注入的实例的生命周期的，如果没有使用 Scope 注解，Component 每次调用 Module 中的 provide 方法或 Inject 构造函数生成的工厂时都会创建一个新的实例，而使用 Scope 后可以复用之前的依赖实例\n \ndagger2中提供了@Singleton表示单例，它也是被@Scope所标注\n\n```java\n@Scope\n@Documented\n@Retention(RUNTIME)\npublic @interface Singleton {}\n```\n\n现在，我们有两个Activity,MainActivity和SecondActivity,两者都依赖PrintService\n\n```java\npublic class MainActivity extends AppCompatActivity {\n    @Inject\n    PrintService printService;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        DaggerMainComponent.builder()\n                .build().inject(this);\n    }\n\n    public void print(View view) {\n        printService.startWork();\n    }\n\n    public void testScope(View view) {\n        startActivity(new Intent(this, SecondActivity.class));\n    }\n}\n\n执行print()时，PrintService对象如下\ncom.zhy.dagger2 I/System.out: com.zhy.dagger2.printer.PrintService@38bb568\n\n```\n\nSecondActivity\n```java\npublic class SecondActivity extends AppCompatActivity {\n\n    @Inject\n    PrintService printService;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_second);\n        DaggerSecondComponent.builder()\n                .build()\n                .inject(this);\n    }\n\n    public void testScope(View view) {\n        System.out.println(printService.toString());\n    }\n}\n执行print()时，PrintService对象如下\nI/System.out: com.zhy.dagger2.printer.PrintService@1a9a612\n```\n\n如何让PrintService是单例呢？这时候就用到@Singleton注解了\n\n```java\n\n@Singleton\npublic class PrintService {\n//.....\n}\n\n然后在MainComponent和SecondComponent上标记@Singleton（必须也是@Singleton）\n\n@Singleton\n@Component(modules = PrinterModule.class)\npublic interface MainComponent {\n    void inject(MainActivity activity);\n\n}\nSingleton\n@Component(modules = PrinterModule.class)\npublic interface SecondComponent {\n\n    void inject(SecondActivity secondActivity);\n}\n\n```\n然而，PrintService依然还是不同的对象\n\nMainActivity:</br>\nI/System.out: com.zhy.dagger2.printer.PrintService@38bb568\n\nSecondActivity:</br>\nI/System.out: com.zhy.dagger2.printer.PrintService@a3fd874\n\n***为什么呢*？**\n\n> 这是因为Component 间接持有依赖实例的引用，把实例的作用域Component 绑定。也即是说同一个Component标注的@Singleton对象才是单例。\n\n有两种方法：\n###### 1.使用相同的Component\nMainActivity和SecondActivity使用同一个Component(AppComponent)\n\nAppComponent\n```java\n@Singleton\n@Component(modules = {AppModule.class, PrinterModule.class})\npublic interface AppComponent {\n\n    void inject(App app);\n\n    void inject(MainActivity mainActivity);\n\n    void inject(SecondActivity secondActivity);\n\n\n}\n\n```\n在Application中实例化AppComponent\n\n```java\npublic class App extends Application {\n\n\n    private static App app;\n    private AppComponent appComponent;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        app = this;\n        appComponent = DaggerAppComponent\n                .builder().build();\n        appComponent.inject(this);\n    }\n\n    public AppComponent getAppComponent() {\n        return appComponent;\n    }\n\n\n    public static AppComponent component() {\n        return app.getAppComponent();\n    }\n\n}\n\n```\n使用AppComponent\n```java\npublic class MainActivity extends AppCompatActivity {\n    @Inject\n    PrintService printService;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        App.component()\n                .inject(this);\n\n    }\n    //...\n}\n\npublic class SecondActivity extends AppCompatActivity {\n    @Inject\n    PrintService printService;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_second);\n        App.component()\n                .inject(this);\n    }\n    //...\n}\n```\nLogcat中输出的PrintService是同一个对象\n    \n    2019-02-05 23:00:30.640 26381-26381/com.zhy.dagger2 I/System.out: com.zhy.dagger2.printer.PrintService@f90971b\n    2019-02-05 23:00:30.640 26381-26381/com.zhy.dagger2 I/System.out: Pdf Printer work.....\n    2019-02-05 23:00:33.859 26381-26381/com.zhy.dagger2 I/System.out: com.zhy.dagger2.printer.PrintService@f90971b\n\n分析源码\n```\npublic final class DaggerAppComponent implements AppComponent {\n    //...\n     private DaggerAppComponent(Builder builder) {\n     initialize(builder);\n     }\n    \n    private void initialize(final Builder builder) {\n    this.providePrinterProvider = PrinterModule_ProvidePrinterFactory.create(builder.printerModule);\n    this.printServiceProvider =\n        DoubleCheck.provider(PrintService_Factory.create(providePrinterProvider));\n  }\n  //...\n}\n```\n\n this.printServiceProvider是DoubleCheck,而DoubleCheck每次get()的是同一个对象。\n \n ###### 2.依赖相同的Component\n \n创建自定义Scope\n```java\n@Scope\n@Documented\n@Retention(RUNTIME)\npublic @interface ActivityScope {\n}\n```\nAppComponet如下:\n```java\n@Singleton\n@Component(modules = {AppModule.class,\n        PrinterModule.class})\npublic interface AppComponent {\n\n    void inject(App app);\n    \n    PrintService printService();\n}\n\n```\n可以看到,在AppComponent中printService()返回PrintService。在一个Component中，方法的参数和返回值Dagger都会给你实例化。\n\nDagger生成的代码如下：\n```java\npublic final class DaggerAppComponent implements AppComponent {\n  private PrinterModule_ProvidePrinterFactory providePrinterProvider;\n\n  private Provider<PrintService> printServiceProvider;\n\n  private DaggerAppComponent(Builder builder) {\n\n    initialize(builder);\n  }\n\n  public static Builder builder() {\n    return new Builder();\n  }\n\n  public static AppComponent create() {\n    return new Builder().build();\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private void initialize(final Builder builder) {\n    this.providePrinterProvider = PrinterModule_ProvidePrinterFactory.create(builder.printerModule);\n    this.printServiceProvider =\n        DoubleCheck.provider(PrintService_Factory.create(providePrinterProvider));\n  }\n\n  @Override\n  public void inject(App app) {}\n\n  @Override\n  public PrintService printService() {\n    return printServiceProvider.get();\n  }\n\n  public static final class Builder {\n    private PrinterModule printerModule;\n\n    private Builder() {}\n\n    public AppComponent build() {\n      if (printerModule == null) {\n        this.printerModule = new PrinterModule();\n      }\n      return new DaggerAppComponent(this);\n    }\n\n    /**\n     * @deprecated This module is declared, but an instance is not used in the component. This\n     *     method is a no-op. For more, see https://google.github.io/dagger/unused-modules.\n     */\n    @Deprecated\n    public Builder appModule(AppModule appModule) {\n      Preconditions.checkNotNull(appModule);\n      return this;\n    }\n\n    public Builder printerModule(PrinterModule printerModule) {\n      this.printerModule = Preconditions.checkNotNull(printerModule);\n      return this;\n    }\n  }\n}\n\n```\n\nMainComponent和SecondComponent分别依赖AppComponent并且被ActivityScope标注\n```\n@ActivityScope\n@Component(dependencies = AppComponent.class)\npublic interface MainComponent {\n    void inject(MainActivity activity);\n\n}\n@ActivityScope\n@Component(dependencies = AppComponent.class)\npublic interface SecondComponent {\n    void inject(SecondActivity secondActivity);\n}\n\n```\n在MainAcitivy和SecondActivity注入依赖\n```java\nMainActivity的onCreate()中\n\nDaggerMainComponent.builder()\n                .appComponent(App.component())\n                .build()\n                .inject(this);\n```\n\nDagger代码为:\n```\npublic final class DaggerMainComponent implements MainComponent {\n  private AppComponent appComponent;\n\n  private DaggerMainComponent(Builder builder) {\n    this.appComponent = builder.appComponent;\n  }\n\n  public static Builder builder() {\n    return new Builder();\n  }\n\n  @Override\n  public void inject(MainActivity activity) {\n    injectMainActivity(activity);\n  }\n\n  private MainActivity injectMainActivity(MainActivity instance) {\n    MainActivity_MembersInjector.injectPrintService(\n        instance,\n        Preconditions.checkNotNull(\n            appComponent.printService(),\n            \"Cannot return null from a non-@Nullable component method\"));\n    return instance;\n  }\n\n  public static final class Builder {\n    private AppComponent appComponent;\n\n    private Builder() {}\n\n    public MainComponent build() {\n      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);\n      return new DaggerMainComponent(this);\n    }\n\n    public Builder appComponent(AppComponent appComponent) {\n      this.appComponent = Preconditions.checkNotNull(appComponent);\n      return this;\n    }\n  }\n}\n\n```\n\n我们看到injectMainActivity()方法中\nMainActivity_MembersInjector.injectPrintService()调用了appComponent.printService()，由此得到单例的PrintService对象。\n\n对比这两种方法，第二种是推荐的。\n\n##### 使用@Scope的一些经验\n\n* @Component关联的@Module中的任何一个@Provides有@scope，则该整个@Component要加上这个scope。\n* @Component的dependencies与@Component自身的scope不能相同，即组件之间的scope不能相同。\n* @Singleton的组件不能依赖其他scope的组件，但是其他scope的组件可以依赖@Singleton组件。\n* 没有scope组件不能依赖有scope的组件。\n* 一个component不能同时有多个scope(Subcomponent除外)\n\n\n#### Binding Instances\n\n通过前面作用域的讲解，可以清楚 Component 可以间接持有 Module 或 Inject 目标类构造函数提供的依赖实例，除了这两种方式，Component 还可以在创建 Component 的时候绑定依赖实例，用以注入。这就是@BindsInstance注解的作用，只能在 Component.Builder 中使用。\n\n```\n@Component\npublic interface ThirdComponent {\n\n    Login login();\n\n    @Component.Builder\n    interface Builder {\n        @BindsInstance\n        Builder login(Login login);\n\n        ThirdComponent build();\n    }\n\n    void inject(ThirdActivity thirdActivity);\n}\n\n//Component就可以拥有Login实例了\npublic class ThirdActivity extends AppCompatActivity {\n\n    private ThirdComponent component;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_third);\n        component = DaggerThirdComponent.builder()\n                .login(new Login(\"zhangsan\", \"lisi\"))\n                .build();\n        component\n                .inject(this);\n\n\n    }\n\n    public void login(View view) {\n        TextView tvMsg = findViewById(R.id.tv_msg);\n        Login login = component.login();\n        tvMsg.setText(String.format(\"%s %s login success.\", login.getUsername(), login.getPassword()));\n    }\n}\n```\n\n* 所有@BindsInstance方法必须在build()之前调用。\n* 如果@BindsInstance方法的参数可能为 null，需要再用@Nullable标记，同时标注 Inject 的地方也需要用@Nullable标记。这时 Builder 也可以不调用@BindsInstance方法，这样 Component 会默认设置 instance 为 null。\n\n\n[Demo Github地址](https://github.com/zhy060307/dagger2) \n\n","source":"_posts/Dagger2（二）-Lazy、Qualifier、Scope等.md","raw":"title: Dagger2（二） Lazy、Qualifier、Scope等\ndate: 2019-02-10 15:40:15\ncategories: Dagger2\ntags: Dagger2\n---\n\n\n\n#### Lazy 延迟加载\n\n使用 @Inject Lazy<xxx>来提供延迟加载,Lazy和Provider功类似\n\n```java\npublic interface Lazy<T> {\n  /**\n   * Return the underlying value, computing the value if necessary. All calls to\n   * the same {@code Lazy} instance will return the same result.\n   */\n  T get();\n}\n```\n\n\n\n\n```\n public class MainActivity extends AppCompatActivity {\n    @Inject\n    Lazy<PrintService> printService;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        DaggerPrintComponent.builder()\n                .build().inject(this);\n    }\n\n    public void print(View view) {\n        printService.get().startWork();\n    }\n\n```\n\ndagger生成的代码如下：\n```java\npublic final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {\n  private final Provider<PrintService> printServiceProvider;\n\n  public MainActivity_MembersInjector(Provider<PrintService> printServiceProvider) {\n    this.printServiceProvider = printServiceProvider;\n  }\n\n  public static MembersInjector<MainActivity> create(Provider<PrintService> printServiceProvider) {\n    return new MainActivity_MembersInjector(printServiceProvider);\n  }\n\n  @Override\n  public void injectMembers(MainActivity instance) {\n    injectPrintService(instance, DoubleCheck.lazy(printServiceProvider));\n  }\n\n  public static void injectPrintService(MainActivity instance, Lazy<PrintService> printService) {\n    instance.printService = printService;\n  }\n}\n```\n关键代码\n```java\n@Override\n  public void injectMembers(MainActivity instance) {\n    injectPrintService(instance, DoubleCheck.lazy(printServiceProvider));\n  }\n\n```\n\nDoubleCheck.lazy()是将Provider转化为DoubleCheck\n```java\npublic static <P extends Provider<T>, T> Lazy<T> lazy(P provider) {\n    if (provider instanceof Lazy) {\n      @SuppressWarnings(\"unchecked\")\n      final Lazy<T> lazy = (Lazy<T>) provider;\n      // Avoids memoizing a value that is already memoized.\n      // NOTE: There is a pathological case where Provider<P> may implement Lazy<L>, but P and L\n      // are different types using covariant return on get(). Right now this is used with\n      // DoubleCheck<T> exclusively, which is implemented such that P and L are always\n      // the same, so it will be fine for that case.\n      return lazy;\n    }\n    return new DoubleCheck<T>(checkNotNull(provider));\n  }\n```\n在调用Lazy.get()时，就是调用DoubleCheck.get(),代码如下，返回的是同一个对象\n\n```java\n@SuppressWarnings(\"unchecked\") // cast only happens when result comes from the provider\n  @Override\n  public T get() {\n    Object result = instance;\n    if (result == UNINITIALIZED) {\n      synchronized (this) {\n        result = instance;\n        if (result == UNINITIALIZED) {\n          result = provider.get();\n          instance = reentrantCheck(instance, result);\n          /* Null out the reference to the provider. We are never going to need it again, so we\n           * can make it eligible for GC. */\n          provider = null;\n        }\n      }\n    }\n    return (T) result;\n  }\n```\n* 使用 Lazy延迟加载时，get()方法返回同一个对象\n\n#### Provide 延迟加载\n\n和Lazy用法一致，但每次调用get()方法，返回不同的对象。\n\n\n#### Qualifier 限定符\n\n在Module中要提供接口的多个实现类，下面的写法编译器会报错\n \n ```java\n @Module(includes = {AppModule.class})\npublic class PrinterModule {\n\n    @Provides\n    public Printer providePrinter() {\n        return new PdfPrinter();\n    }\n\n\n    @Provides\n    public Printer provideSamplePrinter() {\n        return new SamplePrinter();\n    }\n\n}\n\nerror: [Dagger/DuplicateBindings] com.zhy.dagger2.printer.Printer is bound multiple times:\n\n ```\n 使用Qualifier可以解决此类问题。创建注解Sample,Pdf他们都被Qualifier标注\n ```java\n @Qualifier\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Pdf {\n}\n\n@Qualifier\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Sample {\n}\n\n ```\n 添加到对应的Provider中\n ```\n @Module(includes = {AppModule.class})\npublic class PrinterModule {\n\n    @Provides\n    @Pdf\n    public Printer providePrinter() {\n        return new PdfPrinter();\n    }\n\n\n    @Provides\n    @Sample\n    public Printer provideSamplePrinter() {\n        return new SamplePrinter();\n    }\n\n}\n```\n\n依赖注入时带上对应的Annotation，\n\n```\n@Inject\npublic PrintService(@Sample Printer printer) {\n    this.printer = printer;\n    System.out.println(\"Loading PrintService....\");\n}\n```\n\n#### @Named\n\nJSR330中内置的Qualifier，使用起来很方便\n\n```java\n@Module(includes = {AppModule.class})\npublic class PrinterModule {\n\n    @Provides\n//  @Pdf\n    @Named(\"pdf\")\n    public Printer providePrinter() {\n        return new PdfPrinter();\n    }\n\n\n    @Provides\n//  @Sample\n    @Named(\"sample\")\n    public Printer provideSamplePrinter() {\n        return new SamplePrinter();\n    }\n\n}\n\nPrintService//\n\n@Inject\npublic PrintService(@Named(\"pdf\") Printer printer) {\n     this.printer = printer;\n     System.out.println(\"Loading PrintService....\");\n}\n```\n\n\n#### @Scope  作用域\n> Scope 是用来确定注入的实例的生命周期的，如果没有使用 Scope 注解，Component 每次调用 Module 中的 provide 方法或 Inject 构造函数生成的工厂时都会创建一个新的实例，而使用 Scope 后可以复用之前的依赖实例\n \ndagger2中提供了@Singleton表示单例，它也是被@Scope所标注\n\n```java\n@Scope\n@Documented\n@Retention(RUNTIME)\npublic @interface Singleton {}\n```\n\n现在，我们有两个Activity,MainActivity和SecondActivity,两者都依赖PrintService\n\n```java\npublic class MainActivity extends AppCompatActivity {\n    @Inject\n    PrintService printService;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        DaggerMainComponent.builder()\n                .build().inject(this);\n    }\n\n    public void print(View view) {\n        printService.startWork();\n    }\n\n    public void testScope(View view) {\n        startActivity(new Intent(this, SecondActivity.class));\n    }\n}\n\n执行print()时，PrintService对象如下\ncom.zhy.dagger2 I/System.out: com.zhy.dagger2.printer.PrintService@38bb568\n\n```\n\nSecondActivity\n```java\npublic class SecondActivity extends AppCompatActivity {\n\n    @Inject\n    PrintService printService;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_second);\n        DaggerSecondComponent.builder()\n                .build()\n                .inject(this);\n    }\n\n    public void testScope(View view) {\n        System.out.println(printService.toString());\n    }\n}\n执行print()时，PrintService对象如下\nI/System.out: com.zhy.dagger2.printer.PrintService@1a9a612\n```\n\n如何让PrintService是单例呢？这时候就用到@Singleton注解了\n\n```java\n\n@Singleton\npublic class PrintService {\n//.....\n}\n\n然后在MainComponent和SecondComponent上标记@Singleton（必须也是@Singleton）\n\n@Singleton\n@Component(modules = PrinterModule.class)\npublic interface MainComponent {\n    void inject(MainActivity activity);\n\n}\nSingleton\n@Component(modules = PrinterModule.class)\npublic interface SecondComponent {\n\n    void inject(SecondActivity secondActivity);\n}\n\n```\n然而，PrintService依然还是不同的对象\n\nMainActivity:</br>\nI/System.out: com.zhy.dagger2.printer.PrintService@38bb568\n\nSecondActivity:</br>\nI/System.out: com.zhy.dagger2.printer.PrintService@a3fd874\n\n***为什么呢*？**\n\n> 这是因为Component 间接持有依赖实例的引用，把实例的作用域Component 绑定。也即是说同一个Component标注的@Singleton对象才是单例。\n\n有两种方法：\n###### 1.使用相同的Component\nMainActivity和SecondActivity使用同一个Component(AppComponent)\n\nAppComponent\n```java\n@Singleton\n@Component(modules = {AppModule.class, PrinterModule.class})\npublic interface AppComponent {\n\n    void inject(App app);\n\n    void inject(MainActivity mainActivity);\n\n    void inject(SecondActivity secondActivity);\n\n\n}\n\n```\n在Application中实例化AppComponent\n\n```java\npublic class App extends Application {\n\n\n    private static App app;\n    private AppComponent appComponent;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        app = this;\n        appComponent = DaggerAppComponent\n                .builder().build();\n        appComponent.inject(this);\n    }\n\n    public AppComponent getAppComponent() {\n        return appComponent;\n    }\n\n\n    public static AppComponent component() {\n        return app.getAppComponent();\n    }\n\n}\n\n```\n使用AppComponent\n```java\npublic class MainActivity extends AppCompatActivity {\n    @Inject\n    PrintService printService;\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        App.component()\n                .inject(this);\n\n    }\n    //...\n}\n\npublic class SecondActivity extends AppCompatActivity {\n    @Inject\n    PrintService printService;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_second);\n        App.component()\n                .inject(this);\n    }\n    //...\n}\n```\nLogcat中输出的PrintService是同一个对象\n    \n    2019-02-05 23:00:30.640 26381-26381/com.zhy.dagger2 I/System.out: com.zhy.dagger2.printer.PrintService@f90971b\n    2019-02-05 23:00:30.640 26381-26381/com.zhy.dagger2 I/System.out: Pdf Printer work.....\n    2019-02-05 23:00:33.859 26381-26381/com.zhy.dagger2 I/System.out: com.zhy.dagger2.printer.PrintService@f90971b\n\n分析源码\n```\npublic final class DaggerAppComponent implements AppComponent {\n    //...\n     private DaggerAppComponent(Builder builder) {\n     initialize(builder);\n     }\n    \n    private void initialize(final Builder builder) {\n    this.providePrinterProvider = PrinterModule_ProvidePrinterFactory.create(builder.printerModule);\n    this.printServiceProvider =\n        DoubleCheck.provider(PrintService_Factory.create(providePrinterProvider));\n  }\n  //...\n}\n```\n\n this.printServiceProvider是DoubleCheck,而DoubleCheck每次get()的是同一个对象。\n \n ###### 2.依赖相同的Component\n \n创建自定义Scope\n```java\n@Scope\n@Documented\n@Retention(RUNTIME)\npublic @interface ActivityScope {\n}\n```\nAppComponet如下:\n```java\n@Singleton\n@Component(modules = {AppModule.class,\n        PrinterModule.class})\npublic interface AppComponent {\n\n    void inject(App app);\n    \n    PrintService printService();\n}\n\n```\n可以看到,在AppComponent中printService()返回PrintService。在一个Component中，方法的参数和返回值Dagger都会给你实例化。\n\nDagger生成的代码如下：\n```java\npublic final class DaggerAppComponent implements AppComponent {\n  private PrinterModule_ProvidePrinterFactory providePrinterProvider;\n\n  private Provider<PrintService> printServiceProvider;\n\n  private DaggerAppComponent(Builder builder) {\n\n    initialize(builder);\n  }\n\n  public static Builder builder() {\n    return new Builder();\n  }\n\n  public static AppComponent create() {\n    return new Builder().build();\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  private void initialize(final Builder builder) {\n    this.providePrinterProvider = PrinterModule_ProvidePrinterFactory.create(builder.printerModule);\n    this.printServiceProvider =\n        DoubleCheck.provider(PrintService_Factory.create(providePrinterProvider));\n  }\n\n  @Override\n  public void inject(App app) {}\n\n  @Override\n  public PrintService printService() {\n    return printServiceProvider.get();\n  }\n\n  public static final class Builder {\n    private PrinterModule printerModule;\n\n    private Builder() {}\n\n    public AppComponent build() {\n      if (printerModule == null) {\n        this.printerModule = new PrinterModule();\n      }\n      return new DaggerAppComponent(this);\n    }\n\n    /**\n     * @deprecated This module is declared, but an instance is not used in the component. This\n     *     method is a no-op. For more, see https://google.github.io/dagger/unused-modules.\n     */\n    @Deprecated\n    public Builder appModule(AppModule appModule) {\n      Preconditions.checkNotNull(appModule);\n      return this;\n    }\n\n    public Builder printerModule(PrinterModule printerModule) {\n      this.printerModule = Preconditions.checkNotNull(printerModule);\n      return this;\n    }\n  }\n}\n\n```\n\nMainComponent和SecondComponent分别依赖AppComponent并且被ActivityScope标注\n```\n@ActivityScope\n@Component(dependencies = AppComponent.class)\npublic interface MainComponent {\n    void inject(MainActivity activity);\n\n}\n@ActivityScope\n@Component(dependencies = AppComponent.class)\npublic interface SecondComponent {\n    void inject(SecondActivity secondActivity);\n}\n\n```\n在MainAcitivy和SecondActivity注入依赖\n```java\nMainActivity的onCreate()中\n\nDaggerMainComponent.builder()\n                .appComponent(App.component())\n                .build()\n                .inject(this);\n```\n\nDagger代码为:\n```\npublic final class DaggerMainComponent implements MainComponent {\n  private AppComponent appComponent;\n\n  private DaggerMainComponent(Builder builder) {\n    this.appComponent = builder.appComponent;\n  }\n\n  public static Builder builder() {\n    return new Builder();\n  }\n\n  @Override\n  public void inject(MainActivity activity) {\n    injectMainActivity(activity);\n  }\n\n  private MainActivity injectMainActivity(MainActivity instance) {\n    MainActivity_MembersInjector.injectPrintService(\n        instance,\n        Preconditions.checkNotNull(\n            appComponent.printService(),\n            \"Cannot return null from a non-@Nullable component method\"));\n    return instance;\n  }\n\n  public static final class Builder {\n    private AppComponent appComponent;\n\n    private Builder() {}\n\n    public MainComponent build() {\n      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);\n      return new DaggerMainComponent(this);\n    }\n\n    public Builder appComponent(AppComponent appComponent) {\n      this.appComponent = Preconditions.checkNotNull(appComponent);\n      return this;\n    }\n  }\n}\n\n```\n\n我们看到injectMainActivity()方法中\nMainActivity_MembersInjector.injectPrintService()调用了appComponent.printService()，由此得到单例的PrintService对象。\n\n对比这两种方法，第二种是推荐的。\n\n##### 使用@Scope的一些经验\n\n* @Component关联的@Module中的任何一个@Provides有@scope，则该整个@Component要加上这个scope。\n* @Component的dependencies与@Component自身的scope不能相同，即组件之间的scope不能相同。\n* @Singleton的组件不能依赖其他scope的组件，但是其他scope的组件可以依赖@Singleton组件。\n* 没有scope组件不能依赖有scope的组件。\n* 一个component不能同时有多个scope(Subcomponent除外)\n\n\n#### Binding Instances\n\n通过前面作用域的讲解，可以清楚 Component 可以间接持有 Module 或 Inject 目标类构造函数提供的依赖实例，除了这两种方式，Component 还可以在创建 Component 的时候绑定依赖实例，用以注入。这就是@BindsInstance注解的作用，只能在 Component.Builder 中使用。\n\n```\n@Component\npublic interface ThirdComponent {\n\n    Login login();\n\n    @Component.Builder\n    interface Builder {\n        @BindsInstance\n        Builder login(Login login);\n\n        ThirdComponent build();\n    }\n\n    void inject(ThirdActivity thirdActivity);\n}\n\n//Component就可以拥有Login实例了\npublic class ThirdActivity extends AppCompatActivity {\n\n    private ThirdComponent component;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_third);\n        component = DaggerThirdComponent.builder()\n                .login(new Login(\"zhangsan\", \"lisi\"))\n                .build();\n        component\n                .inject(this);\n\n\n    }\n\n    public void login(View view) {\n        TextView tvMsg = findViewById(R.id.tv_msg);\n        Login login = component.login();\n        tvMsg.setText(String.format(\"%s %s login success.\", login.getUsername(), login.getPassword()));\n    }\n}\n```\n\n* 所有@BindsInstance方法必须在build()之前调用。\n* 如果@BindsInstance方法的参数可能为 null，需要再用@Nullable标记，同时标注 Inject 的地方也需要用@Nullable标记。这时 Builder 也可以不调用@BindsInstance方法，这样 Component 会默认设置 instance 为 null。\n\n\n[Demo Github地址](https://github.com/zhy060307/dagger2) \n\n","slug":"Dagger2（二）-Lazy、Qualifier、Scope等","published":1,"updated":"2019-02-10T07:40:46.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjryltlb2000encaq4pqq7vov","content":"<h4 id=\"Lazy-延迟加载\"><a href=\"#Lazy-延迟加载\" class=\"headerlink\" title=\"Lazy 延迟加载\"></a>Lazy 延迟加载</h4><p>使用 @Inject Lazy<xxx>来提供延迟加载,Lazy和Provider功类似</xxx></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Lazy</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * Return the underlying value, computing the value if necessary. All calls to</div><div class=\"line\">   * the same &#123;<span class=\"doctag\">@code</span> Lazy&#125; instance will return the same result.</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MainActivity extends AppCompatActivity &#123;</div><div class=\"line\">   @Inject</div><div class=\"line\">   Lazy&lt;PrintService&gt; printService;</div><div class=\"line\"></div><div class=\"line\">   @Override</div><div class=\"line\">   protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">       super.onCreate(savedInstanceState);</div><div class=\"line\">       setContentView(R.layout.activity_main);</div><div class=\"line\">       DaggerPrintComponent.builder()</div><div class=\"line\">               .build().inject(this);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   public void print(View view) &#123;</div><div class=\"line\">       printService.get().startWork();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>dagger生成的代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity_MembersInjector</span> <span class=\"keyword\">implements</span> <span class=\"title\">MembersInjector</span>&lt;<span class=\"title\">MainActivity</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Provider&lt;PrintService&gt; printServiceProvider;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MainActivity_MembersInjector</span><span class=\"params\">(Provider&lt;PrintService&gt; printServiceProvider)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.printServiceProvider = printServiceProvider;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MembersInjector&lt;MainActivity&gt; <span class=\"title\">create</span><span class=\"params\">(Provider&lt;PrintService&gt; printServiceProvider)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MainActivity_MembersInjector(printServiceProvider);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">injectMembers</span><span class=\"params\">(MainActivity instance)</span> </span>&#123;</div><div class=\"line\">    injectPrintService(instance, DoubleCheck.lazy(printServiceProvider));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">injectPrintService</span><span class=\"params\">(MainActivity instance, Lazy&lt;PrintService&gt; printService)</span> </span>&#123;</div><div class=\"line\">    instance.printService = printService;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>关键代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">injectMembers</span><span class=\"params\">(MainActivity instance)</span> </span>&#123;</div><div class=\"line\">    injectPrintService(instance, DoubleCheck.lazy(printServiceProvider));</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>DoubleCheck.lazy()是将Provider转化为DoubleCheck<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;P extends Provider&lt;T&gt;, T&gt; <span class=\"function\">Lazy&lt;T&gt; <span class=\"title\">lazy</span><span class=\"params\">(P provider)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (provider <span class=\"keyword\">instanceof</span> Lazy) &#123;</div><div class=\"line\">      <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">      <span class=\"keyword\">final</span> Lazy&lt;T&gt; lazy = (Lazy&lt;T&gt;) provider;</div><div class=\"line\">      <span class=\"comment\">// Avoids memoizing a value that is already memoized.</span></div><div class=\"line\">      <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> There is a pathological case where Provider&lt;P&gt; may implement Lazy&lt;L&gt;, but P and L</span></div><div class=\"line\">      <span class=\"comment\">// are different types using covariant return on get(). Right now this is used with</span></div><div class=\"line\">      <span class=\"comment\">// DoubleCheck&lt;T&gt; exclusively, which is implemented such that P and L are always</span></div><div class=\"line\">      <span class=\"comment\">// the same, so it will be fine for that case.</span></div><div class=\"line\">      <span class=\"keyword\">return</span> lazy;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DoubleCheck&lt;T&gt;(checkNotNull(provider));</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>在调用Lazy.get()时，就是调用DoubleCheck.get(),代码如下，返回的是同一个对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>) <span class=\"comment\">// cast only happens when result comes from the provider</span></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Object result = instance;</div><div class=\"line\">    <span class=\"keyword\">if</span> (result == UNINITIALIZED) &#123;</div><div class=\"line\">      <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        result = instance;</div><div class=\"line\">        <span class=\"keyword\">if</span> (result == UNINITIALIZED) &#123;</div><div class=\"line\">          result = provider.get();</div><div class=\"line\">          instance = reentrantCheck(instance, result);</div><div class=\"line\">          <span class=\"comment\">/* Null out the reference to the provider. We are never going to need it again, so we</span></div><div class=\"line\">           * can make it eligible for GC. */</div><div class=\"line\">          provider = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> (T) result;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>使用 Lazy延迟加载时，get()方法返回同一个对象</li>\n</ul>\n<h4 id=\"Provide-延迟加载\"><a href=\"#Provide-延迟加载\" class=\"headerlink\" title=\"Provide 延迟加载\"></a>Provide 延迟加载</h4><p>和Lazy用法一致，但每次调用get()方法，返回不同的对象。</p>\n<h4 id=\"Qualifier-限定符\"><a href=\"#Qualifier-限定符\" class=\"headerlink\" title=\"Qualifier 限定符\"></a>Qualifier 限定符</h4><p>在Module中要提供接口的多个实现类，下面的写法编译器会报错</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"meta\">@Module</span>(includes = &#123;AppModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrinterModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Printer <span class=\"title\">providePrinter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PdfPrinter();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Printer <span class=\"title\">provideSamplePrinter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SamplePrinter();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">error: [Dagger/DuplicateBindings] com.zhy.dagger2.printer.Printer is bound multiple times:</div></pre></td></tr></table></figure>\n<p> 使用Qualifier可以解决此类问题。创建注解Sample,Pdf他们都被Qualifier标注<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"meta\">@Qualifier</span></div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Pdf &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Qualifier</span></div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Sample &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 添加到对应的Provider中<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"> @Module(includes = &#123;AppModule.class&#125;)</div><div class=\"line\">public class PrinterModule &#123;</div><div class=\"line\"></div><div class=\"line\">    @Provides</div><div class=\"line\">    @Pdf</div><div class=\"line\">    public Printer providePrinter() &#123;</div><div class=\"line\">        return new PdfPrinter();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Provides</div><div class=\"line\">    @Sample</div><div class=\"line\">    public Printer provideSamplePrinter() &#123;</div><div class=\"line\">        return new SamplePrinter();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>依赖注入时带上对应的Annotation，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Inject</div><div class=\"line\">public PrintService(@Sample Printer printer) &#123;</div><div class=\"line\">    this.printer = printer;</div><div class=\"line\">    System.out.println(&quot;Loading PrintService....&quot;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Named\"><a href=\"#Named\" class=\"headerlink\" title=\"@Named\"></a>@Named</h4><p>JSR330中内置的Qualifier，使用起来很方便</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span>(includes = &#123;AppModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrinterModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\"><span class=\"comment\">//  @Pdf</span></div><div class=\"line\">    <span class=\"meta\">@Named</span>(<span class=\"string\">\"pdf\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Printer <span class=\"title\">providePrinter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PdfPrinter();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\"><span class=\"comment\">//  @Sample</span></div><div class=\"line\">    <span class=\"meta\">@Named</span>(<span class=\"string\">\"sample\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Printer <span class=\"title\">provideSamplePrinter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SamplePrinter();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">PrintService<span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Inject</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PrintService</span><span class=\"params\">(@Named(<span class=\"string\">\"pdf\"</span>)</span> Printer printer) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">this</span>.printer = printer;</div><div class=\"line\">     System.out.println(<span class=\"string\">\"Loading PrintService....\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Scope-作用域\"><a href=\"#Scope-作用域\" class=\"headerlink\" title=\"@Scope  作用域\"></a>@Scope  作用域</h4><blockquote>\n<p>Scope 是用来确定注入的实例的生命周期的，如果没有使用 Scope 注解，Component 每次调用 Module 中的 provide 方法或 Inject 构造函数生成的工厂时都会创建一个新的实例，而使用 Scope 后可以复用之前的依赖实例</p>\n</blockquote>\n<p>dagger2中提供了@Singleton表示单例，它也是被@Scope所标注</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Scope</span></div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Singleton &#123;&#125;</div></pre></td></tr></table></figure>\n<p>现在，我们有两个Activity,MainActivity和SecondActivity,两者都依赖PrintService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    PrintService printService;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        DaggerMainComponent.builder()</div><div class=\"line\">                .build().inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        printService.startWork();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testScope</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        startActivity(<span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, SecondActivity.class));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">执行print()时，PrintService对象如下</div><div class=\"line\">com.zhy.dagger2 I/System.out: com.zhy.dagger2.printer.PrintService@<span class=\"number\">38</span>bb568</div></pre></td></tr></table></figure>\n<p>SecondActivity<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecondActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    PrintService printService;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_second);</div><div class=\"line\">        DaggerSecondComponent.builder()</div><div class=\"line\">                .build()</div><div class=\"line\">                .inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testScope</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        System.out.println(printService.toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">执行print()时，PrintService对象如下</div><div class=\"line\">I/System.out: com.zhy.dagger2.printer.PrintService@<span class=\"number\">1</span>a9a612</div></pre></td></tr></table></figure></p>\n<p>如何让PrintService是单例呢？这时候就用到@Singleton注解了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintService</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//.....</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">然后在MainComponent和SecondComponent上标记<span class=\"meta\">@Singleton</span>（必须也是<span class=\"meta\">@Singleton</span>）</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules = PrinterModule.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MainComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(MainActivity activity)</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">Singleton</div><div class=\"line\"><span class=\"meta\">@Component</span>(modules = PrinterModule.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SecondComponent</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(SecondActivity secondActivity)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然而，PrintService依然还是不同的对象</p>\n<p>MainActivity:<br><br>I/System.out: com.zhy.dagger2.printer.PrintService@38bb568</p>\n<p>SecondActivity:<br><br>I/System.out: com.zhy.dagger2.printer.PrintService@a3fd874</p>\n<p><strong><em>为什么呢</em>？</strong></p>\n<blockquote>\n<p>这是因为Component 间接持有依赖实例的引用，把实例的作用域Component 绑定。也即是说同一个Component标注的@Singleton对象才是单例。</p>\n</blockquote>\n<p>有两种方法：</p>\n<h6 id=\"1-使用相同的Component\"><a href=\"#1-使用相同的Component\" class=\"headerlink\" title=\"1.使用相同的Component\"></a>1.使用相同的Component</h6><p>MainActivity和SecondActivity使用同一个Component(AppComponent)</p>\n<p>AppComponent<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules = &#123;AppModule.class, PrinterModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AppComponent</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(App app)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(MainActivity mainActivity)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(SecondActivity secondActivity)</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在Application中实例化AppComponent</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> App app;</div><div class=\"line\">    <span class=\"keyword\">private</span> AppComponent appComponent;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">        app = <span class=\"keyword\">this</span>;</div><div class=\"line\">        appComponent = DaggerAppComponent</div><div class=\"line\">                .builder().build();</div><div class=\"line\">        appComponent.inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AppComponent <span class=\"title\">getAppComponent</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> appComponent;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AppComponent <span class=\"title\">component</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> app.getAppComponent();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用AppComponent<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    PrintService printService;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        App.component()</div><div class=\"line\">                .inject(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecondActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    PrintService printService;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_second);</div><div class=\"line\">        App.component()</div><div class=\"line\">                .inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Logcat中输出的PrintService是同一个对象</p>\n<pre><code>2019-02-05 23:00:30.640 26381-26381/com.zhy.dagger2 I/System.out: com.zhy.dagger2.printer.PrintService@f90971b\n2019-02-05 23:00:30.640 26381-26381/com.zhy.dagger2 I/System.out: Pdf Printer work.....\n2019-02-05 23:00:33.859 26381-26381/com.zhy.dagger2 I/System.out: com.zhy.dagger2.printer.PrintService@f90971b\n</code></pre><p>分析源码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final class DaggerAppComponent implements AppComponent &#123;</div><div class=\"line\">    //...</div><div class=\"line\">     private DaggerAppComponent(Builder builder) &#123;</div><div class=\"line\">     initialize(builder);</div><div class=\"line\">     &#125;</div><div class=\"line\">    </div><div class=\"line\">    private void initialize(final Builder builder) &#123;</div><div class=\"line\">    this.providePrinterProvider = PrinterModule_ProvidePrinterFactory.create(builder.printerModule);</div><div class=\"line\">    this.printServiceProvider =</div><div class=\"line\">        DoubleCheck.provider(PrintService_Factory.create(providePrinterProvider));</div><div class=\"line\">  &#125;</div><div class=\"line\">  //...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> this.printServiceProvider是DoubleCheck,而DoubleCheck每次get()的是同一个对象。</p>\n<h6 id=\"2-依赖相同的Component\"><a href=\"#2-依赖相同的Component\" class=\"headerlink\" title=\"2.依赖相同的Component\"></a>2.依赖相同的Component</h6><p>创建自定义Scope<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Scope</span></div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ActivityScope &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>AppComponet如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules = &#123;AppModule.class,</div><div class=\"line\">        PrinterModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AppComponent</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(App app)</span></span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\">PrintService <span class=\"title\">printService</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到,在AppComponent中printService()返回PrintService。在一个Component中，方法的参数和返回值Dagger都会给你实例化。</p>\n<p>Dagger生成的代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaggerAppComponent</span> <span class=\"keyword\">implements</span> <span class=\"title\">AppComponent</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> PrinterModule_ProvidePrinterFactory providePrinterProvider;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> Provider&lt;PrintService&gt; printServiceProvider;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">DaggerAppComponent</span><span class=\"params\">(Builder builder)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    initialize(builder);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Builder <span class=\"title\">builder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Builder();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AppComponent <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Builder().build();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(<span class=\"keyword\">final</span> Builder builder)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.providePrinterProvider = PrinterModule_ProvidePrinterFactory.create(builder.printerModule);</div><div class=\"line\">    <span class=\"keyword\">this</span>.printServiceProvider =</div><div class=\"line\">        DoubleCheck.provider(PrintService_Factory.create(providePrinterProvider));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(App app)</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> PrintService <span class=\"title\">printService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> printServiceProvider.get();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> PrinterModule printerModule;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Builder</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AppComponent <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (printerModule == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.printerModule = <span class=\"keyword\">new</span> PrinterModule();</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DaggerAppComponent(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * <span class=\"doctag\">@deprecated</span> This module is declared, but an instance is not used in the component. This</div><div class=\"line\">     *     method is a no-op. For more, see https://google.github.io/dagger/unused-modules.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@Deprecated</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">appModule</span><span class=\"params\">(AppModule appModule)</span> </span>&#123;</div><div class=\"line\">      Preconditions.checkNotNull(appModule);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">printerModule</span><span class=\"params\">(PrinterModule printerModule)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.printerModule = Preconditions.checkNotNull(printerModule);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>MainComponent和SecondComponent分别依赖AppComponent并且被ActivityScope标注<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@ActivityScope</div><div class=\"line\">@Component(dependencies = AppComponent.class)</div><div class=\"line\">public interface MainComponent &#123;</div><div class=\"line\">    void inject(MainActivity activity);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">@ActivityScope</div><div class=\"line\">@Component(dependencies = AppComponent.class)</div><div class=\"line\">public interface SecondComponent &#123;</div><div class=\"line\">    void inject(SecondActivity secondActivity);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在MainAcitivy和SecondActivity注入依赖<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">MainActivity的onCreate()中</div><div class=\"line\"></div><div class=\"line\">DaggerMainComponent.builder()</div><div class=\"line\">                .appComponent(App.component())</div><div class=\"line\">                .build()</div><div class=\"line\">                .inject(<span class=\"keyword\">this</span>);</div></pre></td></tr></table></figure></p>\n<p>Dagger代码为:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final class DaggerMainComponent implements MainComponent &#123;</div><div class=\"line\">  private AppComponent appComponent;</div><div class=\"line\"></div><div class=\"line\">  private DaggerMainComponent(Builder builder) &#123;</div><div class=\"line\">    this.appComponent = builder.appComponent;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public static Builder builder() &#123;</div><div class=\"line\">    return new Builder();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public void inject(MainActivity activity) &#123;</div><div class=\"line\">    injectMainActivity(activity);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  private MainActivity injectMainActivity(MainActivity instance) &#123;</div><div class=\"line\">    MainActivity_MembersInjector.injectPrintService(</div><div class=\"line\">        instance,</div><div class=\"line\">        Preconditions.checkNotNull(</div><div class=\"line\">            appComponent.printService(),</div><div class=\"line\">            &quot;Cannot return null from a non-@Nullable component method&quot;));</div><div class=\"line\">    return instance;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public static final class Builder &#123;</div><div class=\"line\">    private AppComponent appComponent;</div><div class=\"line\"></div><div class=\"line\">    private Builder() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public MainComponent build() &#123;</div><div class=\"line\">      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);</div><div class=\"line\">      return new DaggerMainComponent(this);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Builder appComponent(AppComponent appComponent) &#123;</div><div class=\"line\">      this.appComponent = Preconditions.checkNotNull(appComponent);</div><div class=\"line\">      return this;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们看到injectMainActivity()方法中<br>MainActivity_MembersInjector.injectPrintService()调用了appComponent.printService()，由此得到单例的PrintService对象。</p>\n<p>对比这两种方法，第二种是推荐的。</p>\n<h5 id=\"使用-Scope的一些经验\"><a href=\"#使用-Scope的一些经验\" class=\"headerlink\" title=\"使用@Scope的一些经验\"></a>使用@Scope的一些经验</h5><ul>\n<li>@Component关联的@Module中的任何一个@Provides有@scope，则该整个@Component要加上这个scope。</li>\n<li>@Component的dependencies与@Component自身的scope不能相同，即组件之间的scope不能相同。</li>\n<li>@Singleton的组件不能依赖其他scope的组件，但是其他scope的组件可以依赖@Singleton组件。</li>\n<li>没有scope组件不能依赖有scope的组件。</li>\n<li>一个component不能同时有多个scope(Subcomponent除外)</li>\n</ul>\n<h4 id=\"Binding-Instances\"><a href=\"#Binding-Instances\" class=\"headerlink\" title=\"Binding Instances\"></a>Binding Instances</h4><p>通过前面作用域的讲解，可以清楚 Component 可以间接持有 Module 或 Inject 目标类构造函数提供的依赖实例，除了这两种方式，Component 还可以在创建 Component 的时候绑定依赖实例，用以注入。这就是@BindsInstance注解的作用，只能在 Component.Builder 中使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Component</div><div class=\"line\">public interface ThirdComponent &#123;</div><div class=\"line\"></div><div class=\"line\">    Login login();</div><div class=\"line\"></div><div class=\"line\">    @Component.Builder</div><div class=\"line\">    interface Builder &#123;</div><div class=\"line\">        @BindsInstance</div><div class=\"line\">        Builder login(Login login);</div><div class=\"line\"></div><div class=\"line\">        ThirdComponent build();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    void inject(ThirdActivity thirdActivity);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//Component就可以拥有Login实例了</div><div class=\"line\">public class ThirdActivity extends AppCompatActivity &#123;</div><div class=\"line\"></div><div class=\"line\">    private ThirdComponent component;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</div><div class=\"line\">        super.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_third);</div><div class=\"line\">        component = DaggerThirdComponent.builder()</div><div class=\"line\">                .login(new Login(&quot;zhangsan&quot;, &quot;lisi&quot;))</div><div class=\"line\">                .build();</div><div class=\"line\">        component</div><div class=\"line\">                .inject(this);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void login(View view) &#123;</div><div class=\"line\">        TextView tvMsg = findViewById(R.id.tv_msg);</div><div class=\"line\">        Login login = component.login();</div><div class=\"line\">        tvMsg.setText(String.format(&quot;%s %s login success.&quot;, login.getUsername(), login.getPassword()));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>所有@BindsInstance方法必须在build()之前调用。</li>\n<li>如果@BindsInstance方法的参数可能为 null，需要再用@Nullable标记，同时标注 Inject 的地方也需要用@Nullable标记。这时 Builder 也可以不调用@BindsInstance方法，这样 Component 会默认设置 instance 为 null。</li>\n</ul>\n<p><a href=\"https://github.com/zhy060307/dagger2\" target=\"_blank\" rel=\"external\">Demo Github地址</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Lazy-延迟加载\"><a href=\"#Lazy-延迟加载\" class=\"headerlink\" title=\"Lazy 延迟加载\"></a>Lazy 延迟加载</h4><p>使用 @Inject Lazy<xxx>来提供延迟加载,Lazy和Provider功类似</xxx></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Lazy</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"comment\">/**</span></div><div class=\"line\">   * Return the underlying value, computing the value if necessary. All calls to</div><div class=\"line\">   * the same &#123;<span class=\"doctag\">@code</span> Lazy&#125; instance will return the same result.</div><div class=\"line\">   */</div><div class=\"line\">  <span class=\"function\">T <span class=\"title\">get</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MainActivity extends AppCompatActivity &#123;</div><div class=\"line\">   @Inject</div><div class=\"line\">   Lazy&lt;PrintService&gt; printService;</div><div class=\"line\"></div><div class=\"line\">   @Override</div><div class=\"line\">   protected void onCreate(Bundle savedInstanceState) &#123;</div><div class=\"line\">       super.onCreate(savedInstanceState);</div><div class=\"line\">       setContentView(R.layout.activity_main);</div><div class=\"line\">       DaggerPrintComponent.builder()</div><div class=\"line\">               .build().inject(this);</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   public void print(View view) &#123;</div><div class=\"line\">       printService.get().startWork();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>dagger生成的代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity_MembersInjector</span> <span class=\"keyword\">implements</span> <span class=\"title\">MembersInjector</span>&lt;<span class=\"title\">MainActivity</span>&gt; </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Provider&lt;PrintService&gt; printServiceProvider;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MainActivity_MembersInjector</span><span class=\"params\">(Provider&lt;PrintService&gt; printServiceProvider)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.printServiceProvider = printServiceProvider;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> MembersInjector&lt;MainActivity&gt; <span class=\"title\">create</span><span class=\"params\">(Provider&lt;PrintService&gt; printServiceProvider)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MainActivity_MembersInjector(printServiceProvider);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">injectMembers</span><span class=\"params\">(MainActivity instance)</span> </span>&#123;</div><div class=\"line\">    injectPrintService(instance, DoubleCheck.lazy(printServiceProvider));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">injectPrintService</span><span class=\"params\">(MainActivity instance, Lazy&lt;PrintService&gt; printService)</span> </span>&#123;</div><div class=\"line\">    instance.printService = printService;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>关键代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">injectMembers</span><span class=\"params\">(MainActivity instance)</span> </span>&#123;</div><div class=\"line\">    injectPrintService(instance, DoubleCheck.lazy(printServiceProvider));</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>DoubleCheck.lazy()是将Provider转化为DoubleCheck<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;P extends Provider&lt;T&gt;, T&gt; <span class=\"function\">Lazy&lt;T&gt; <span class=\"title\">lazy</span><span class=\"params\">(P provider)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (provider <span class=\"keyword\">instanceof</span> Lazy) &#123;</div><div class=\"line\">      <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">      <span class=\"keyword\">final</span> Lazy&lt;T&gt; lazy = (Lazy&lt;T&gt;) provider;</div><div class=\"line\">      <span class=\"comment\">// Avoids memoizing a value that is already memoized.</span></div><div class=\"line\">      <span class=\"comment\">// <span class=\"doctag\">NOTE:</span> There is a pathological case where Provider&lt;P&gt; may implement Lazy&lt;L&gt;, but P and L</span></div><div class=\"line\">      <span class=\"comment\">// are different types using covariant return on get(). Right now this is used with</span></div><div class=\"line\">      <span class=\"comment\">// DoubleCheck&lt;T&gt; exclusively, which is implemented such that P and L are always</span></div><div class=\"line\">      <span class=\"comment\">// the same, so it will be fine for that case.</span></div><div class=\"line\">      <span class=\"keyword\">return</span> lazy;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DoubleCheck&lt;T&gt;(checkNotNull(provider));</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>在调用Lazy.get()时，就是调用DoubleCheck.get(),代码如下，返回的是同一个对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>) <span class=\"comment\">// cast only happens when result comes from the provider</span></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    Object result = instance;</div><div class=\"line\">    <span class=\"keyword\">if</span> (result == UNINITIALIZED) &#123;</div><div class=\"line\">      <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        result = instance;</div><div class=\"line\">        <span class=\"keyword\">if</span> (result == UNINITIALIZED) &#123;</div><div class=\"line\">          result = provider.get();</div><div class=\"line\">          instance = reentrantCheck(instance, result);</div><div class=\"line\">          <span class=\"comment\">/* Null out the reference to the provider. We are never going to need it again, so we</span></div><div class=\"line\">           * can make it eligible for GC. */</div><div class=\"line\">          provider = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> (T) result;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>使用 Lazy延迟加载时，get()方法返回同一个对象</li>\n</ul>\n<h4 id=\"Provide-延迟加载\"><a href=\"#Provide-延迟加载\" class=\"headerlink\" title=\"Provide 延迟加载\"></a>Provide 延迟加载</h4><p>和Lazy用法一致，但每次调用get()方法，返回不同的对象。</p>\n<h4 id=\"Qualifier-限定符\"><a href=\"#Qualifier-限定符\" class=\"headerlink\" title=\"Qualifier 限定符\"></a>Qualifier 限定符</h4><p>在Module中要提供接口的多个实现类，下面的写法编译器会报错</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"meta\">@Module</span>(includes = &#123;AppModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrinterModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Printer <span class=\"title\">providePrinter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PdfPrinter();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Printer <span class=\"title\">provideSamplePrinter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SamplePrinter();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">error: [Dagger/DuplicateBindings] com.zhy.dagger2.printer.Printer is bound multiple times:</div></pre></td></tr></table></figure>\n<p> 使用Qualifier可以解决此类问题。创建注解Sample,Pdf他们都被Qualifier标注<br> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"meta\">@Qualifier</span></div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Pdf &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Qualifier</span></div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Sample &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 添加到对应的Provider中<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"> @Module(includes = &#123;AppModule.class&#125;)</div><div class=\"line\">public class PrinterModule &#123;</div><div class=\"line\"></div><div class=\"line\">    @Provides</div><div class=\"line\">    @Pdf</div><div class=\"line\">    public Printer providePrinter() &#123;</div><div class=\"line\">        return new PdfPrinter();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    @Provides</div><div class=\"line\">    @Sample</div><div class=\"line\">    public Printer provideSamplePrinter() &#123;</div><div class=\"line\">        return new SamplePrinter();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>依赖注入时带上对应的Annotation，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Inject</div><div class=\"line\">public PrintService(@Sample Printer printer) &#123;</div><div class=\"line\">    this.printer = printer;</div><div class=\"line\">    System.out.println(&quot;Loading PrintService....&quot;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Named\"><a href=\"#Named\" class=\"headerlink\" title=\"@Named\"></a>@Named</h4><p>JSR330中内置的Qualifier，使用起来很方便</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span>(includes = &#123;AppModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrinterModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\"><span class=\"comment\">//  @Pdf</span></div><div class=\"line\">    <span class=\"meta\">@Named</span>(<span class=\"string\">\"pdf\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Printer <span class=\"title\">providePrinter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PdfPrinter();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\"><span class=\"comment\">//  @Sample</span></div><div class=\"line\">    <span class=\"meta\">@Named</span>(<span class=\"string\">\"sample\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Printer <span class=\"title\">provideSamplePrinter</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SamplePrinter();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">PrintService<span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Inject</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PrintService</span><span class=\"params\">(@Named(<span class=\"string\">\"pdf\"</span>)</span> Printer printer) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">this</span>.printer = printer;</div><div class=\"line\">     System.out.println(<span class=\"string\">\"Loading PrintService....\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Scope-作用域\"><a href=\"#Scope-作用域\" class=\"headerlink\" title=\"@Scope  作用域\"></a>@Scope  作用域</h4><blockquote>\n<p>Scope 是用来确定注入的实例的生命周期的，如果没有使用 Scope 注解，Component 每次调用 Module 中的 provide 方法或 Inject 构造函数生成的工厂时都会创建一个新的实例，而使用 Scope 后可以复用之前的依赖实例</p>\n</blockquote>\n<p>dagger2中提供了@Singleton表示单例，它也是被@Scope所标注</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Scope</span></div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Singleton &#123;&#125;</div></pre></td></tr></table></figure>\n<p>现在，我们有两个Activity,MainActivity和SecondActivity,两者都依赖PrintService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    PrintService printService;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        DaggerMainComponent.builder()</div><div class=\"line\">                .build().inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        printService.startWork();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testScope</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        startActivity(<span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, SecondActivity.class));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">执行print()时，PrintService对象如下</div><div class=\"line\">com.zhy.dagger2 I/System.out: com.zhy.dagger2.printer.PrintService@<span class=\"number\">38</span>bb568</div></pre></td></tr></table></figure>\n<p>SecondActivity<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecondActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    PrintService printService;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_second);</div><div class=\"line\">        DaggerSecondComponent.builder()</div><div class=\"line\">                .build()</div><div class=\"line\">                .inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testScope</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        System.out.println(printService.toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">执行print()时，PrintService对象如下</div><div class=\"line\">I/System.out: com.zhy.dagger2.printer.PrintService@<span class=\"number\">1</span>a9a612</div></pre></td></tr></table></figure></p>\n<p>如何让PrintService是单例呢？这时候就用到@Singleton注解了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintService</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//.....</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">然后在MainComponent和SecondComponent上标记<span class=\"meta\">@Singleton</span>（必须也是<span class=\"meta\">@Singleton</span>）</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules = PrinterModule.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MainComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(MainActivity activity)</span></span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">Singleton</div><div class=\"line\"><span class=\"meta\">@Component</span>(modules = PrinterModule.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SecondComponent</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(SecondActivity secondActivity)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然而，PrintService依然还是不同的对象</p>\n<p>MainActivity:<br><br>I/System.out: com.zhy.dagger2.printer.PrintService@38bb568</p>\n<p>SecondActivity:<br><br>I/System.out: com.zhy.dagger2.printer.PrintService@a3fd874</p>\n<p><strong><em>为什么呢</em>？</strong></p>\n<blockquote>\n<p>这是因为Component 间接持有依赖实例的引用，把实例的作用域Component 绑定。也即是说同一个Component标注的@Singleton对象才是单例。</p>\n</blockquote>\n<p>有两种方法：</p>\n<h6 id=\"1-使用相同的Component\"><a href=\"#1-使用相同的Component\" class=\"headerlink\" title=\"1.使用相同的Component\"></a>1.使用相同的Component</h6><p>MainActivity和SecondActivity使用同一个Component(AppComponent)</p>\n<p>AppComponent<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules = &#123;AppModule.class, PrinterModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AppComponent</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(App app)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(MainActivity mainActivity)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(SecondActivity secondActivity)</span></span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在Application中实例化AppComponent</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> App app;</div><div class=\"line\">    <span class=\"keyword\">private</span> AppComponent appComponent;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">        app = <span class=\"keyword\">this</span>;</div><div class=\"line\">        appComponent = DaggerAppComponent</div><div class=\"line\">                .builder().build();</div><div class=\"line\">        appComponent.inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AppComponent <span class=\"title\">getAppComponent</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> appComponent;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AppComponent <span class=\"title\">component</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> app.getAppComponent();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用AppComponent<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    PrintService printService;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        App.component()</div><div class=\"line\">                .inject(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecondActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    PrintService printService;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_second);</div><div class=\"line\">        App.component()</div><div class=\"line\">                .inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Logcat中输出的PrintService是同一个对象</p>\n<pre><code>2019-02-05 23:00:30.640 26381-26381/com.zhy.dagger2 I/System.out: com.zhy.dagger2.printer.PrintService@f90971b\n2019-02-05 23:00:30.640 26381-26381/com.zhy.dagger2 I/System.out: Pdf Printer work.....\n2019-02-05 23:00:33.859 26381-26381/com.zhy.dagger2 I/System.out: com.zhy.dagger2.printer.PrintService@f90971b\n</code></pre><p>分析源码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final class DaggerAppComponent implements AppComponent &#123;</div><div class=\"line\">    //...</div><div class=\"line\">     private DaggerAppComponent(Builder builder) &#123;</div><div class=\"line\">     initialize(builder);</div><div class=\"line\">     &#125;</div><div class=\"line\">    </div><div class=\"line\">    private void initialize(final Builder builder) &#123;</div><div class=\"line\">    this.providePrinterProvider = PrinterModule_ProvidePrinterFactory.create(builder.printerModule);</div><div class=\"line\">    this.printServiceProvider =</div><div class=\"line\">        DoubleCheck.provider(PrintService_Factory.create(providePrinterProvider));</div><div class=\"line\">  &#125;</div><div class=\"line\">  //...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> this.printServiceProvider是DoubleCheck,而DoubleCheck每次get()的是同一个对象。</p>\n<h6 id=\"2-依赖相同的Component\"><a href=\"#2-依赖相同的Component\" class=\"headerlink\" title=\"2.依赖相同的Component\"></a>2.依赖相同的Component</h6><p>创建自定义Scope<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Scope</span></div><div class=\"line\"><span class=\"meta\">@Documented</span></div><div class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ActivityScope &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>AppComponet如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules = &#123;AppModule.class,</div><div class=\"line\">        PrinterModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AppComponent</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(App app)</span></span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\">PrintService <span class=\"title\">printService</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到,在AppComponent中printService()返回PrintService。在一个Component中，方法的参数和返回值Dagger都会给你实例化。</p>\n<p>Dagger生成的代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaggerAppComponent</span> <span class=\"keyword\">implements</span> <span class=\"title\">AppComponent</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> PrinterModule_ProvidePrinterFactory providePrinterProvider;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span> Provider&lt;PrintService&gt; printServiceProvider;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">DaggerAppComponent</span><span class=\"params\">(Builder builder)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    initialize(builder);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Builder <span class=\"title\">builder</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Builder();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> AppComponent <span class=\"title\">create</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Builder().build();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(<span class=\"keyword\">final</span> Builder builder)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.providePrinterProvider = PrinterModule_ProvidePrinterFactory.create(builder.printerModule);</div><div class=\"line\">    <span class=\"keyword\">this</span>.printServiceProvider =</div><div class=\"line\">        DoubleCheck.provider(PrintService_Factory.create(providePrinterProvider));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(App app)</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> PrintService <span class=\"title\">printService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> printServiceProvider.get();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> PrinterModule printerModule;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Builder</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AppComponent <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (printerModule == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.printerModule = <span class=\"keyword\">new</span> PrinterModule();</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DaggerAppComponent(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * <span class=\"doctag\">@deprecated</span> This module is declared, but an instance is not used in the component. This</div><div class=\"line\">     *     method is a no-op. For more, see https://google.github.io/dagger/unused-modules.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@Deprecated</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">appModule</span><span class=\"params\">(AppModule appModule)</span> </span>&#123;</div><div class=\"line\">      Preconditions.checkNotNull(appModule);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Builder <span class=\"title\">printerModule</span><span class=\"params\">(PrinterModule printerModule)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.printerModule = Preconditions.checkNotNull(printerModule);</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>MainComponent和SecondComponent分别依赖AppComponent并且被ActivityScope标注<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@ActivityScope</div><div class=\"line\">@Component(dependencies = AppComponent.class)</div><div class=\"line\">public interface MainComponent &#123;</div><div class=\"line\">    void inject(MainActivity activity);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">@ActivityScope</div><div class=\"line\">@Component(dependencies = AppComponent.class)</div><div class=\"line\">public interface SecondComponent &#123;</div><div class=\"line\">    void inject(SecondActivity secondActivity);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在MainAcitivy和SecondActivity注入依赖<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">MainActivity的onCreate()中</div><div class=\"line\"></div><div class=\"line\">DaggerMainComponent.builder()</div><div class=\"line\">                .appComponent(App.component())</div><div class=\"line\">                .build()</div><div class=\"line\">                .inject(<span class=\"keyword\">this</span>);</div></pre></td></tr></table></figure></p>\n<p>Dagger代码为:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final class DaggerMainComponent implements MainComponent &#123;</div><div class=\"line\">  private AppComponent appComponent;</div><div class=\"line\"></div><div class=\"line\">  private DaggerMainComponent(Builder builder) &#123;</div><div class=\"line\">    this.appComponent = builder.appComponent;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public static Builder builder() &#123;</div><div class=\"line\">    return new Builder();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @Override</div><div class=\"line\">  public void inject(MainActivity activity) &#123;</div><div class=\"line\">    injectMainActivity(activity);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  private MainActivity injectMainActivity(MainActivity instance) &#123;</div><div class=\"line\">    MainActivity_MembersInjector.injectPrintService(</div><div class=\"line\">        instance,</div><div class=\"line\">        Preconditions.checkNotNull(</div><div class=\"line\">            appComponent.printService(),</div><div class=\"line\">            &quot;Cannot return null from a non-@Nullable component method&quot;));</div><div class=\"line\">    return instance;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public static final class Builder &#123;</div><div class=\"line\">    private AppComponent appComponent;</div><div class=\"line\"></div><div class=\"line\">    private Builder() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public MainComponent build() &#123;</div><div class=\"line\">      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);</div><div class=\"line\">      return new DaggerMainComponent(this);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Builder appComponent(AppComponent appComponent) &#123;</div><div class=\"line\">      this.appComponent = Preconditions.checkNotNull(appComponent);</div><div class=\"line\">      return this;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我们看到injectMainActivity()方法中<br>MainActivity_MembersInjector.injectPrintService()调用了appComponent.printService()，由此得到单例的PrintService对象。</p>\n<p>对比这两种方法，第二种是推荐的。</p>\n<h5 id=\"使用-Scope的一些经验\"><a href=\"#使用-Scope的一些经验\" class=\"headerlink\" title=\"使用@Scope的一些经验\"></a>使用@Scope的一些经验</h5><ul>\n<li>@Component关联的@Module中的任何一个@Provides有@scope，则该整个@Component要加上这个scope。</li>\n<li>@Component的dependencies与@Component自身的scope不能相同，即组件之间的scope不能相同。</li>\n<li>@Singleton的组件不能依赖其他scope的组件，但是其他scope的组件可以依赖@Singleton组件。</li>\n<li>没有scope组件不能依赖有scope的组件。</li>\n<li>一个component不能同时有多个scope(Subcomponent除外)</li>\n</ul>\n<h4 id=\"Binding-Instances\"><a href=\"#Binding-Instances\" class=\"headerlink\" title=\"Binding Instances\"></a>Binding Instances</h4><p>通过前面作用域的讲解，可以清楚 Component 可以间接持有 Module 或 Inject 目标类构造函数提供的依赖实例，除了这两种方式，Component 还可以在创建 Component 的时候绑定依赖实例，用以注入。这就是@BindsInstance注解的作用，只能在 Component.Builder 中使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Component</div><div class=\"line\">public interface ThirdComponent &#123;</div><div class=\"line\"></div><div class=\"line\">    Login login();</div><div class=\"line\"></div><div class=\"line\">    @Component.Builder</div><div class=\"line\">    interface Builder &#123;</div><div class=\"line\">        @BindsInstance</div><div class=\"line\">        Builder login(Login login);</div><div class=\"line\"></div><div class=\"line\">        ThirdComponent build();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    void inject(ThirdActivity thirdActivity);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//Component就可以拥有Login实例了</div><div class=\"line\">public class ThirdActivity extends AppCompatActivity &#123;</div><div class=\"line\"></div><div class=\"line\">    private ThirdComponent component;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</div><div class=\"line\">        super.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_third);</div><div class=\"line\">        component = DaggerThirdComponent.builder()</div><div class=\"line\">                .login(new Login(&quot;zhangsan&quot;, &quot;lisi&quot;))</div><div class=\"line\">                .build();</div><div class=\"line\">        component</div><div class=\"line\">                .inject(this);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void login(View view) &#123;</div><div class=\"line\">        TextView tvMsg = findViewById(R.id.tv_msg);</div><div class=\"line\">        Login login = component.login();</div><div class=\"line\">        tvMsg.setText(String.format(&quot;%s %s login success.&quot;, login.getUsername(), login.getPassword()));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>所有@BindsInstance方法必须在build()之前调用。</li>\n<li>如果@BindsInstance方法的参数可能为 null，需要再用@Nullable标记，同时标注 Inject 的地方也需要用@Nullable标记。这时 Builder 也可以不调用@BindsInstance方法，这样 Component 会默认设置 instance 为 null。</li>\n</ul>\n<p><a href=\"https://github.com/zhy060307/dagger2\" target=\"_blank\" rel=\"external\">Demo Github地址</a> </p>\n"},{"layout":"di","title":"Guice","date":"2019-02-10T07:34:45.000Z","_content":"\n\n### SOLID \n* Single responsibility   单一职责\n> a class should have only a single responsibility\n* Open/closed  开闭原则\n> software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification\n* Liskov substitution  里氏替换原则\n> objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.\n* Interface segregation  接口隔离\n> many client-specific interfaces are better than one general-purpose interface.\n* Dependency inversion   依赖倒置\n> one should depend upon abstractions, [not] concretions.\n### 依赖倒置 (Dependency inversion principle)\n* High-level modules should not depend on low-level modules. Both should depend on abstractions.\n* Abstractions should not depend on details.Details should depend on abstractions.\n\n\n### 依赖注入   DI (dependency injection)\n\n> Dependency injection is one form of the broader technique of inversion of control（IoC）.\n\n* Reduced Dependencies\n* More Reusable Code\n* More Testable Code\n* More Readable Code\n\n### [JSR330](https://jcp.org/en/jsr/detail?id=330) \n\n\nJSR330在javax.inject中规定了依赖注入的标准注解(Annotations)。包括：\n\n* @Inject : 标记为“可注入”。可用于构造器(constructors), 方法(methods)或字段(fields)\n* @Qualifier : 限定器\n* @Scope : 标记作用域\n* @Named : 基于 String 的限定器\n* @Singleton : 标记为单例\n\n\n\n\n### Guice \n> Guice (pronounced 'juice') is a lightweight dependency injection framework for Java 6 and above, brought to you by Google.\n\n\n#### Bindings\n\n* Linked Binding\n    ```java\n    @Override\n    protected void configure() {\n        bind(Printer.class).to(PdfPrinter.class);\n        bind(PdfPrinter.class).to(ColorPdfPrinter.class);\n    \n    }\n    ```\n\n* BindingAnnotations\n\n    ```java\n    @BindingAnnotation\n    @Target({FIELD, PARAMETER, METHOD})\n    @Retention(RUNTIME)\n    public @interface Alipay {\n    }\n    ```\n\n    ```java\n    bind(Pay.class)\n    .annotatedWith(Alipay.class)\n    .to(AlipayImpl.class);\n    ```\n    \n    ```java\n    @Inject\n    public BillService(@Alipay Pay pay) {\n        this.pay = pay;\n    }\n    ```\n\n* Named\n\n    ```java\n    bind(Pay.class)\n    .annotatedWith(Names.named(\"wechat\"))\n    .to(WechatPayImpl.class);\n    \n    @Inject\n    public void setPay(@Named(\"wechat\") Pay pay) {\n        this.pay = pay;\n    }\n    ```\n\n* Constant Bindings\n    ```java\n        \n    @Inject\n    public void connectDatabase(@Named(\"JBDC\") String dbUrl) {\n            //...\n    }\n    \n    bind(String.class).annotatedWith(Names.named(\"JBDC\")).toInstance(\"jdbc:mysql://localhost:5326/emp\");\n    \n    ```\n\n* ProvidesMethods\n    ```java\n    private static class CheckVersionModule extends AbstractModule {\n            @Override\n            protected void configure() {\n                bind(String.class)\n                        .annotatedWith(Names.named(\"update url\"))\n                        .toInstance(\"http://console.qa.roomis.com.cn/api/client-apps/latest\");\n    \n            }\n    \n            @Provides\n            public Request buildRequest(@Named(\"update url\") String url) {\n                return new Request.Builder()\n                        .url(url)\n                        .addHeader(\"X-Consumer-Custom-ID\", \"roomis-k12-own\")\n                        .addHeader(\"deviceSn\", \"000ffd4a014f\")\n                        .addHeader(\"apikey\", \"0001e01807cd4a9ebab4bbb5576f1815\")\n                        .build();\n    \n            }\n    \n            @Provides\n            public OkHttpClient provideClient() {\n                OkHttpClient.Builder builder = new OkHttpClient.Builder();\n                builder.connectTimeout(60, TimeUnit.SECONDS)\n                        .readTimeout(30, TimeUnit.SECONDS)\n                        .writeTimeout(30, TimeUnit.SECONDS);\n    \n                return builder.build();\n            }\n        }\n    ```\n\n* ProviderBindings\n    ```java\n    class PrinterModule extends AbstractModule {\n        @Override\n        protected void configure() {\n            bind(Printer.class)\n                    .toProvider(PrinterProvider.class);\n        }\n    }\n    \n    class PrinterProvider implements Provider<Printer> {\n    \n        @Override\n        public Printer get() {\n            return new PdfPrinter();\n        }\n    }\n    ```\n* Constructor Bindings\n    ```java\n    public class _06_ConstructorBindings {\n    \n        public static void main(String[] args) {\n            Injector injector = Guice.createInjector(new TextEditorModule());\n            TextEditor editor = injector.getInstance(TextEditor.class);\n            editor.makeSpellCheck();\n        }\n    }\n    \n    class TextEditor {\n        private SpellChecker spellChecker;\n    \n        @Inject\n        public TextEditor(SpellChecker spellChecker) {\n            this.spellChecker = spellChecker;\n        }\n    \n        public void makeSpellCheck() {\n            spellChecker.checkSpelling();\n        }\n    }\n    \n    //Binding Module\n    class TextEditorModule extends AbstractModule {\n        @Override\n    \n        protected void configure() {\n            try {\n                bind(SpellChecker.class)\n                        .toConstructor(SpellCheckerImpl.class.getConstructor(String.class));\n            } catch (NoSuchMethodException | SecurityException e) {\n                System.out.println(\"Required constructor missing\");\n            }\n            bind(String.class)\n                    .annotatedWith(Names.named(\"JDBC\"))\n                    .toInstance(\"jdbc:mysql://localhost:5326/emp\");\n        }\n    }\n    \n    //spell checker interface\n    interface SpellChecker {\n        void checkSpelling();\n    }\n    \n    //spell checker implementation\n    class SpellCheckerImpl implements SpellChecker {\n        private String dbUrl;\n    \n        public SpellCheckerImpl() {\n        }\n    \n        public SpellCheckerImpl(@Named(\"JDBC\") String dbUrl) {\n            this.dbUrl = dbUrl;\n        }\n    \n        @Override\n        public void checkSpelling() {\n            System.out.println(\"Start checkSpelling.\");\n            System.out.println(dbUrl);\n        }\n    }\n    ```\n#### Scopes\n\n默认创建新实例\n* @Singleton\n```java\n@Singleton\npublic class PrintService {\n//...\n}\n```\n或者\n```java\n@Singleton\n@Provides\npublic OkHttpClient provideClient() {\n    \n}\n```\n或者\n```java\nbind(Printer.class).to(PdfPrinter.class).in(Singleton.class);\n```\nEager Singletons\n立即加载\n```java\nbind(TransactionLog.class).to(InMemoryTransactionLog.class).asEagerSingleton();\n\n```\n* @SessionScoped\n* @RequestScoped\n\n\n#### Injections\n\n* Constructor Injection\n* Method Injection\n* Field Injection\n```java\n@Singleton\npublic class PrintService {\n\n\n    private final Printer printer;\n\n    @Inject\n    public PrintService(Printer printer) {\n        this.printer = printer;\n    }\n\n\n//    @Inject\n//    private Printer printer;\n\n//    private Printer printer;\n//\n//    @Inject\n//    public void setPrinter(Printer printer) {\n//        this.printer = printer;\n//    }\n\n    public void startWork() {\n        this.printer.print();\n    }\n}\n\n```\n\n\n---\n\n## Dagger2\n> Dagger is a fully static, compile-time dependency injection framework for both Java and Android. It is an adaptation of an earlier version created by Square and now maintained by Google.\n\nwhy reinvent the wheel? \n\n> Dagger 2 is the first to implement the full stack with generated code. \n\n\n#### Start\nbuild.gradle\n    \n     implementation 'com.google.dagger:dagger:2.20'\n    annotationProcessor 'com.google.dagger:dagger-compiler:2.20'\n\n#### \n\n\n* Inject\n* Module\n* Provides\n* Component\n* Scope\n* Qualifier\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n#\nhttps://en.wikipedia.org/wiki/SOLID </br>\nhttps://en.wikipedia.org/wiki/Dependency_inversion_principle </br>\nhttps://blog.csdn.net/briblue/article/details/75093382 </br>\nhttp://tutorials.jenkov.com/dependency-injection/dependency-injection-benefits.html </br>\nhttps://blog.csdn.net/xtayfjpk/article/details/40657781\n\n\nhttps://google.github.io/dagger/ </br>\nhttps://blog.csdn.net/qq_17766199/article/details/73030696\n","source":"_posts/Guice.md","raw":"---\nlayout: di\ntitle: Guice\ndate: 2019-02-10 15:34:45\ntags:\n---\n\n\n### SOLID \n* Single responsibility   单一职责\n> a class should have only a single responsibility\n* Open/closed  开闭原则\n> software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification\n* Liskov substitution  里氏替换原则\n> objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.\n* Interface segregation  接口隔离\n> many client-specific interfaces are better than one general-purpose interface.\n* Dependency inversion   依赖倒置\n> one should depend upon abstractions, [not] concretions.\n### 依赖倒置 (Dependency inversion principle)\n* High-level modules should not depend on low-level modules. Both should depend on abstractions.\n* Abstractions should not depend on details.Details should depend on abstractions.\n\n\n### 依赖注入   DI (dependency injection)\n\n> Dependency injection is one form of the broader technique of inversion of control（IoC）.\n\n* Reduced Dependencies\n* More Reusable Code\n* More Testable Code\n* More Readable Code\n\n### [JSR330](https://jcp.org/en/jsr/detail?id=330) \n\n\nJSR330在javax.inject中规定了依赖注入的标准注解(Annotations)。包括：\n\n* @Inject : 标记为“可注入”。可用于构造器(constructors), 方法(methods)或字段(fields)\n* @Qualifier : 限定器\n* @Scope : 标记作用域\n* @Named : 基于 String 的限定器\n* @Singleton : 标记为单例\n\n\n\n\n### Guice \n> Guice (pronounced 'juice') is a lightweight dependency injection framework for Java 6 and above, brought to you by Google.\n\n\n#### Bindings\n\n* Linked Binding\n    ```java\n    @Override\n    protected void configure() {\n        bind(Printer.class).to(PdfPrinter.class);\n        bind(PdfPrinter.class).to(ColorPdfPrinter.class);\n    \n    }\n    ```\n\n* BindingAnnotations\n\n    ```java\n    @BindingAnnotation\n    @Target({FIELD, PARAMETER, METHOD})\n    @Retention(RUNTIME)\n    public @interface Alipay {\n    }\n    ```\n\n    ```java\n    bind(Pay.class)\n    .annotatedWith(Alipay.class)\n    .to(AlipayImpl.class);\n    ```\n    \n    ```java\n    @Inject\n    public BillService(@Alipay Pay pay) {\n        this.pay = pay;\n    }\n    ```\n\n* Named\n\n    ```java\n    bind(Pay.class)\n    .annotatedWith(Names.named(\"wechat\"))\n    .to(WechatPayImpl.class);\n    \n    @Inject\n    public void setPay(@Named(\"wechat\") Pay pay) {\n        this.pay = pay;\n    }\n    ```\n\n* Constant Bindings\n    ```java\n        \n    @Inject\n    public void connectDatabase(@Named(\"JBDC\") String dbUrl) {\n            //...\n    }\n    \n    bind(String.class).annotatedWith(Names.named(\"JBDC\")).toInstance(\"jdbc:mysql://localhost:5326/emp\");\n    \n    ```\n\n* ProvidesMethods\n    ```java\n    private static class CheckVersionModule extends AbstractModule {\n            @Override\n            protected void configure() {\n                bind(String.class)\n                        .annotatedWith(Names.named(\"update url\"))\n                        .toInstance(\"http://console.qa.roomis.com.cn/api/client-apps/latest\");\n    \n            }\n    \n            @Provides\n            public Request buildRequest(@Named(\"update url\") String url) {\n                return new Request.Builder()\n                        .url(url)\n                        .addHeader(\"X-Consumer-Custom-ID\", \"roomis-k12-own\")\n                        .addHeader(\"deviceSn\", \"000ffd4a014f\")\n                        .addHeader(\"apikey\", \"0001e01807cd4a9ebab4bbb5576f1815\")\n                        .build();\n    \n            }\n    \n            @Provides\n            public OkHttpClient provideClient() {\n                OkHttpClient.Builder builder = new OkHttpClient.Builder();\n                builder.connectTimeout(60, TimeUnit.SECONDS)\n                        .readTimeout(30, TimeUnit.SECONDS)\n                        .writeTimeout(30, TimeUnit.SECONDS);\n    \n                return builder.build();\n            }\n        }\n    ```\n\n* ProviderBindings\n    ```java\n    class PrinterModule extends AbstractModule {\n        @Override\n        protected void configure() {\n            bind(Printer.class)\n                    .toProvider(PrinterProvider.class);\n        }\n    }\n    \n    class PrinterProvider implements Provider<Printer> {\n    \n        @Override\n        public Printer get() {\n            return new PdfPrinter();\n        }\n    }\n    ```\n* Constructor Bindings\n    ```java\n    public class _06_ConstructorBindings {\n    \n        public static void main(String[] args) {\n            Injector injector = Guice.createInjector(new TextEditorModule());\n            TextEditor editor = injector.getInstance(TextEditor.class);\n            editor.makeSpellCheck();\n        }\n    }\n    \n    class TextEditor {\n        private SpellChecker spellChecker;\n    \n        @Inject\n        public TextEditor(SpellChecker spellChecker) {\n            this.spellChecker = spellChecker;\n        }\n    \n        public void makeSpellCheck() {\n            spellChecker.checkSpelling();\n        }\n    }\n    \n    //Binding Module\n    class TextEditorModule extends AbstractModule {\n        @Override\n    \n        protected void configure() {\n            try {\n                bind(SpellChecker.class)\n                        .toConstructor(SpellCheckerImpl.class.getConstructor(String.class));\n            } catch (NoSuchMethodException | SecurityException e) {\n                System.out.println(\"Required constructor missing\");\n            }\n            bind(String.class)\n                    .annotatedWith(Names.named(\"JDBC\"))\n                    .toInstance(\"jdbc:mysql://localhost:5326/emp\");\n        }\n    }\n    \n    //spell checker interface\n    interface SpellChecker {\n        void checkSpelling();\n    }\n    \n    //spell checker implementation\n    class SpellCheckerImpl implements SpellChecker {\n        private String dbUrl;\n    \n        public SpellCheckerImpl() {\n        }\n    \n        public SpellCheckerImpl(@Named(\"JDBC\") String dbUrl) {\n            this.dbUrl = dbUrl;\n        }\n    \n        @Override\n        public void checkSpelling() {\n            System.out.println(\"Start checkSpelling.\");\n            System.out.println(dbUrl);\n        }\n    }\n    ```\n#### Scopes\n\n默认创建新实例\n* @Singleton\n```java\n@Singleton\npublic class PrintService {\n//...\n}\n```\n或者\n```java\n@Singleton\n@Provides\npublic OkHttpClient provideClient() {\n    \n}\n```\n或者\n```java\nbind(Printer.class).to(PdfPrinter.class).in(Singleton.class);\n```\nEager Singletons\n立即加载\n```java\nbind(TransactionLog.class).to(InMemoryTransactionLog.class).asEagerSingleton();\n\n```\n* @SessionScoped\n* @RequestScoped\n\n\n#### Injections\n\n* Constructor Injection\n* Method Injection\n* Field Injection\n```java\n@Singleton\npublic class PrintService {\n\n\n    private final Printer printer;\n\n    @Inject\n    public PrintService(Printer printer) {\n        this.printer = printer;\n    }\n\n\n//    @Inject\n//    private Printer printer;\n\n//    private Printer printer;\n//\n//    @Inject\n//    public void setPrinter(Printer printer) {\n//        this.printer = printer;\n//    }\n\n    public void startWork() {\n        this.printer.print();\n    }\n}\n\n```\n\n\n---\n\n## Dagger2\n> Dagger is a fully static, compile-time dependency injection framework for both Java and Android. It is an adaptation of an earlier version created by Square and now maintained by Google.\n\nwhy reinvent the wheel? \n\n> Dagger 2 is the first to implement the full stack with generated code. \n\n\n#### Start\nbuild.gradle\n    \n     implementation 'com.google.dagger:dagger:2.20'\n    annotationProcessor 'com.google.dagger:dagger-compiler:2.20'\n\n#### \n\n\n* Inject\n* Module\n* Provides\n* Component\n* Scope\n* Qualifier\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n#\nhttps://en.wikipedia.org/wiki/SOLID </br>\nhttps://en.wikipedia.org/wiki/Dependency_inversion_principle </br>\nhttps://blog.csdn.net/briblue/article/details/75093382 </br>\nhttp://tutorials.jenkov.com/dependency-injection/dependency-injection-benefits.html </br>\nhttps://blog.csdn.net/xtayfjpk/article/details/40657781\n\n\nhttps://google.github.io/dagger/ </br>\nhttps://blog.csdn.net/qq_17766199/article/details/73030696\n","slug":"Guice","published":1,"updated":"2019-02-10T07:35:39.368Z","comments":1,"photos":[],"link":"","_id":"cjryltlb3000gncaqjjfunkri","content":"<h3 id=\"SOLID\"><a href=\"#SOLID\" class=\"headerlink\" title=\"SOLID\"></a>SOLID</h3><ul>\n<li>Single responsibility   单一职责<blockquote>\n<p>a class should have only a single responsibility</p>\n</blockquote>\n</li>\n<li>Open/closed  开闭原则<blockquote>\n<p>software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification</p>\n</blockquote>\n</li>\n<li>Liskov substitution  里氏替换原则<blockquote>\n<p>objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.</p>\n</blockquote>\n</li>\n<li>Interface segregation  接口隔离<blockquote>\n<p>many client-specific interfaces are better than one general-purpose interface.</p>\n</blockquote>\n</li>\n<li>Dependency inversion   依赖倒置<blockquote>\n<p>one should depend upon abstractions, [not] concretions.</p>\n<h3 id=\"依赖倒置-Dependency-inversion-principle\"><a href=\"#依赖倒置-Dependency-inversion-principle\" class=\"headerlink\" title=\"依赖倒置 (Dependency inversion principle)\"></a>依赖倒置 (Dependency inversion principle)</h3></blockquote>\n</li>\n<li>High-level modules should not depend on low-level modules. Both should depend on abstractions.</li>\n<li>Abstractions should not depend on details.Details should depend on abstractions.</li>\n</ul>\n<h3 id=\"依赖注入-DI-dependency-injection\"><a href=\"#依赖注入-DI-dependency-injection\" class=\"headerlink\" title=\"依赖注入   DI (dependency injection)\"></a>依赖注入   DI (dependency injection)</h3><blockquote>\n<p>Dependency injection is one form of the broader technique of inversion of control（IoC）.</p>\n</blockquote>\n<ul>\n<li>Reduced Dependencies</li>\n<li>More Reusable Code</li>\n<li>More Testable Code</li>\n<li>More Readable Code</li>\n</ul>\n<h3 id=\"JSR330\"><a href=\"#JSR330\" class=\"headerlink\" title=\"JSR330\"></a><a href=\"https://jcp.org/en/jsr/detail?id=330\" target=\"_blank\" rel=\"external\">JSR330</a></h3><p>JSR330在javax.inject中规定了依赖注入的标准注解(Annotations)。包括：</p>\n<ul>\n<li>@Inject : 标记为“可注入”。可用于构造器(constructors), 方法(methods)或字段(fields)</li>\n<li>@Qualifier : 限定器</li>\n<li>@Scope : 标记作用域</li>\n<li>@Named : 基于 String 的限定器</li>\n<li>@Singleton : 标记为单例</li>\n</ul>\n<h3 id=\"Guice\"><a href=\"#Guice\" class=\"headerlink\" title=\"Guice\"></a>Guice</h3><blockquote>\n<p>Guice (pronounced ‘juice’) is a lightweight dependency injection framework for Java 6 and above, brought to you by Google.</p>\n</blockquote>\n<h4 id=\"Bindings\"><a href=\"#Bindings\" class=\"headerlink\" title=\"Bindings\"></a>Bindings</h4><ul>\n<li><p>Linked Binding</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    bind(Printer.class).to(PdfPrinter.class);</div><div class=\"line\">    bind(PdfPrinter.class).to(ColorPdfPrinter.class);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>BindingAnnotations</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@BindingAnnotation</span></div><div class=\"line\"><span class=\"meta\">@Target</span>(&#123;FIELD, PARAMETER, METHOD&#125;)</div><div class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Alipay &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">bind(Pay.class)</div><div class=\"line\">.annotatedWith(Alipay.class)</div><div class=\"line\">.to(AlipayImpl.class);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Inject</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BillService</span><span class=\"params\">(@Alipay Pay pay)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.pay = pay;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><ul>\n<li><p>Named</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">bind(Pay.class)</div><div class=\"line\">.annotatedWith(Names.named(<span class=\"string\">\"wechat\"</span>))</div><div class=\"line\">.to(WechatPayImpl.class);</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Inject</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPay</span><span class=\"params\">(@Named(<span class=\"string\">\"wechat\"</span>)</span> Pay pay) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.pay = pay;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Constant Bindings</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">    </div><div class=\"line\"><span class=\"meta\">@Inject</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connectDatabase</span><span class=\"params\">(@Named(<span class=\"string\">\"JBDC\"</span>)</span> String dbUrl) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">bind(String.class).annotatedWith(Names.named(<span class=\"string\">\"JBDC\"</span>)).toInstance(<span class=\"string\">\"jdbc:mysql://localhost:5326/emp\"</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>ProvidesMethods</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheckVersionModule</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractModule</span> </span>&#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            bind(String.class)</div><div class=\"line\">                    .annotatedWith(Names.named(<span class=\"string\">\"update url\"</span>))</div><div class=\"line\">                    .toInstance(<span class=\"string\">\"http://console.qa.roomis.com.cn/api/client-apps/latest\"</span>);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Provides</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Request <span class=\"title\">buildRequest</span><span class=\"params\">(@Named(<span class=\"string\">\"update url\"</span>)</span> String url) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">                    .url(url)</div><div class=\"line\">                    .addHeader(<span class=\"string\">\"X-Consumer-Custom-ID\"</span>, <span class=\"string\">\"roomis-k12-own\"</span>)</div><div class=\"line\">                    .addHeader(<span class=\"string\">\"deviceSn\"</span>, <span class=\"string\">\"000ffd4a014f\"</span>)</div><div class=\"line\">                    .addHeader(<span class=\"string\">\"apikey\"</span>, <span class=\"string\">\"0001e01807cd4a9ebab4bbb5576f1815\"</span>)</div><div class=\"line\">                    .build();</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Provides</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> OkHttpClient <span class=\"title\">provideClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            OkHttpClient.Builder builder = <span class=\"keyword\">new</span> OkHttpClient.Builder();</div><div class=\"line\">            builder.connectTimeout(<span class=\"number\">60</span>, TimeUnit.SECONDS)</div><div class=\"line\">                    .readTimeout(<span class=\"number\">30</span>, TimeUnit.SECONDS)</div><div class=\"line\">                    .writeTimeout(<span class=\"number\">30</span>, TimeUnit.SECONDS);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> builder.build();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>ProviderBindings</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrinterModule</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractModule</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        bind(Printer.class)</div><div class=\"line\">                .toProvider(PrinterProvider.class);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrinterProvider</span> <span class=\"keyword\">implements</span> <span class=\"title\">Provider</span>&lt;<span class=\"title\">Printer</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Printer <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PdfPrinter();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Constructor Bindings</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_06_ConstructorBindings</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Injector injector = Guice.createInjector(<span class=\"keyword\">new</span> TextEditorModule());</div><div class=\"line\">        TextEditor editor = injector.getInstance(TextEditor.class);</div><div class=\"line\">        editor.makeSpellCheck();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextEditor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> SpellChecker spellChecker;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TextEditor</span><span class=\"params\">(SpellChecker spellChecker)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.spellChecker = spellChecker;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">makeSpellCheck</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        spellChecker.checkSpelling();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Binding Module</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextEditorModule</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractModule</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            bind(SpellChecker.class)</div><div class=\"line\">                    .toConstructor(SpellCheckerImpl.class.getConstructor(String.class));</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException | SecurityException e) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"Required constructor missing\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        bind(String.class)</div><div class=\"line\">                .annotatedWith(Names.named(<span class=\"string\">\"JDBC\"</span>))</div><div class=\"line\">                .toInstance(<span class=\"string\">\"jdbc:mysql://localhost:5326/emp\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//spell checker interface</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SpellChecker</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">checkSpelling</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//spell checker implementation</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpellCheckerImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">SpellChecker</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String dbUrl;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SpellCheckerImpl</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SpellCheckerImpl</span><span class=\"params\">(@Named(<span class=\"string\">\"JDBC\"</span>)</span> String dbUrl) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.dbUrl = dbUrl;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkSpelling</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Start checkSpelling.\"</span>);</div><div class=\"line\">        System.out.println(dbUrl);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Scopes\"><a href=\"#Scopes\" class=\"headerlink\" title=\"Scopes\"></a>Scopes</h4><p>默认创建新实例</p>\n<ul>\n<li>@Singleton<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintService</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>或者<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Provides</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> OkHttpClient <span class=\"title\">provideClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bind(Printer.class).to(PdfPrinter.class).in(Singleton.class);</div></pre></td></tr></table></figure></p>\n<p>Eager Singletons<br>立即加载<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bind(TransactionLog.class).to(InMemoryTransactionLog.class).asEagerSingleton();</div></pre></td></tr></table></figure></p>\n<ul>\n<li>@SessionScoped</li>\n<li>@RequestScoped</li>\n</ul>\n<h4 id=\"Injections\"><a href=\"#Injections\" class=\"headerlink\" title=\"Injections\"></a>Injections</h4><ul>\n<li>Constructor Injection</li>\n<li>Method Injection</li>\n<li>Field Injection<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Printer printer;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PrintService</span><span class=\"params\">(Printer printer)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.printer = printer;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//    @Inject</span></div><div class=\"line\"><span class=\"comment\">//    private Printer printer;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//    private Printer printer;</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//    @Inject</span></div><div class=\"line\"><span class=\"comment\">//    public void setPrinter(Printer printer) &#123;</span></div><div class=\"line\"><span class=\"comment\">//        this.printer = printer;</span></div><div class=\"line\"><span class=\"comment\">//    &#125;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startWork</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.printer.print();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"Dagger2\"><a href=\"#Dagger2\" class=\"headerlink\" title=\"Dagger2\"></a>Dagger2</h2><blockquote>\n<p>Dagger is a fully static, compile-time dependency injection framework for both Java and Android. It is an adaptation of an earlier version created by Square and now maintained by Google.</p>\n</blockquote>\n<p>why reinvent the wheel? </p>\n<blockquote>\n<p>Dagger 2 is the first to implement the full stack with generated code. </p>\n</blockquote>\n<h4 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h4><p>build.gradle</p>\n<pre><code> implementation &apos;com.google.dagger:dagger:2.20&apos;\nannotationProcessor &apos;com.google.dagger:dagger-compiler:2.20&apos;\n</code></pre><p>#### </p>\n<ul>\n<li>Inject</li>\n<li>Module</li>\n<li>Provides</li>\n<li>Component</li>\n<li>Scope</li>\n<li>Qualifier</li>\n</ul>\n<p>#<br><a href=\"https://en.wikipedia.org/wiki/SOLID\" target=\"_blank\" rel=\"external\">https://en.wikipedia.org/wiki/SOLID</a> <br><br><a href=\"https://en.wikipedia.org/wiki/Dependency_inversion_principle\" target=\"_blank\" rel=\"external\">https://en.wikipedia.org/wiki/Dependency_inversion_principle</a> <br><br><a href=\"https://blog.csdn.net/briblue/article/details/75093382\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/briblue/article/details/75093382</a> <br><br><a href=\"http://tutorials.jenkov.com/dependency-injection/dependency-injection-benefits.html\" target=\"_blank\" rel=\"external\">http://tutorials.jenkov.com/dependency-injection/dependency-injection-benefits.html</a> <br><br><a href=\"https://blog.csdn.net/xtayfjpk/article/details/40657781\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/xtayfjpk/article/details/40657781</a></p>\n<p><a href=\"https://google.github.io/dagger/\" target=\"_blank\" rel=\"external\">https://google.github.io/dagger/</a> <br><br><a href=\"https://blog.csdn.net/qq_17766199/article/details/73030696\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/qq_17766199/article/details/73030696</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"SOLID\"><a href=\"#SOLID\" class=\"headerlink\" title=\"SOLID\"></a>SOLID</h3><ul>\n<li>Single responsibility   单一职责<blockquote>\n<p>a class should have only a single responsibility</p>\n</blockquote>\n</li>\n<li>Open/closed  开闭原则<blockquote>\n<p>software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification</p>\n</blockquote>\n</li>\n<li>Liskov substitution  里氏替换原则<blockquote>\n<p>objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.</p>\n</blockquote>\n</li>\n<li>Interface segregation  接口隔离<blockquote>\n<p>many client-specific interfaces are better than one general-purpose interface.</p>\n</blockquote>\n</li>\n<li>Dependency inversion   依赖倒置<blockquote>\n<p>one should depend upon abstractions, [not] concretions.</p>\n<h3 id=\"依赖倒置-Dependency-inversion-principle\"><a href=\"#依赖倒置-Dependency-inversion-principle\" class=\"headerlink\" title=\"依赖倒置 (Dependency inversion principle)\"></a>依赖倒置 (Dependency inversion principle)</h3></blockquote>\n</li>\n<li>High-level modules should not depend on low-level modules. Both should depend on abstractions.</li>\n<li>Abstractions should not depend on details.Details should depend on abstractions.</li>\n</ul>\n<h3 id=\"依赖注入-DI-dependency-injection\"><a href=\"#依赖注入-DI-dependency-injection\" class=\"headerlink\" title=\"依赖注入   DI (dependency injection)\"></a>依赖注入   DI (dependency injection)</h3><blockquote>\n<p>Dependency injection is one form of the broader technique of inversion of control（IoC）.</p>\n</blockquote>\n<ul>\n<li>Reduced Dependencies</li>\n<li>More Reusable Code</li>\n<li>More Testable Code</li>\n<li>More Readable Code</li>\n</ul>\n<h3 id=\"JSR330\"><a href=\"#JSR330\" class=\"headerlink\" title=\"JSR330\"></a><a href=\"https://jcp.org/en/jsr/detail?id=330\" target=\"_blank\" rel=\"external\">JSR330</a></h3><p>JSR330在javax.inject中规定了依赖注入的标准注解(Annotations)。包括：</p>\n<ul>\n<li>@Inject : 标记为“可注入”。可用于构造器(constructors), 方法(methods)或字段(fields)</li>\n<li>@Qualifier : 限定器</li>\n<li>@Scope : 标记作用域</li>\n<li>@Named : 基于 String 的限定器</li>\n<li>@Singleton : 标记为单例</li>\n</ul>\n<h3 id=\"Guice\"><a href=\"#Guice\" class=\"headerlink\" title=\"Guice\"></a>Guice</h3><blockquote>\n<p>Guice (pronounced ‘juice’) is a lightweight dependency injection framework for Java 6 and above, brought to you by Google.</p>\n</blockquote>\n<h4 id=\"Bindings\"><a href=\"#Bindings\" class=\"headerlink\" title=\"Bindings\"></a>Bindings</h4><ul>\n<li><p>Linked Binding</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    bind(Printer.class).to(PdfPrinter.class);</div><div class=\"line\">    bind(PdfPrinter.class).to(ColorPdfPrinter.class);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>BindingAnnotations</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@BindingAnnotation</span></div><div class=\"line\"><span class=\"meta\">@Target</span>(&#123;FIELD, PARAMETER, METHOD&#125;)</div><div class=\"line\"><span class=\"meta\">@Retention</span>(RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> Alipay &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">bind(Pay.class)</div><div class=\"line\">.annotatedWith(Alipay.class)</div><div class=\"line\">.to(AlipayImpl.class);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Inject</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BillService</span><span class=\"params\">(@Alipay Pay pay)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.pay = pay;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</code></pre><ul>\n<li><p>Named</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">bind(Pay.class)</div><div class=\"line\">.annotatedWith(Names.named(<span class=\"string\">\"wechat\"</span>))</div><div class=\"line\">.to(WechatPayImpl.class);</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Inject</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPay</span><span class=\"params\">(@Named(<span class=\"string\">\"wechat\"</span>)</span> Pay pay) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.pay = pay;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Constant Bindings</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">    </div><div class=\"line\"><span class=\"meta\">@Inject</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">connectDatabase</span><span class=\"params\">(@Named(<span class=\"string\">\"JBDC\"</span>)</span> String dbUrl) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">bind(String.class).annotatedWith(Names.named(<span class=\"string\">\"JBDC\"</span>)).toInstance(<span class=\"string\">\"jdbc:mysql://localhost:5326/emp\"</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>ProvidesMethods</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheckVersionModule</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractModule</span> </span>&#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            bind(String.class)</div><div class=\"line\">                    .annotatedWith(Names.named(<span class=\"string\">\"update url\"</span>))</div><div class=\"line\">                    .toInstance(<span class=\"string\">\"http://console.qa.roomis.com.cn/api/client-apps/latest\"</span>);</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Provides</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Request <span class=\"title\">buildRequest</span><span class=\"params\">(@Named(<span class=\"string\">\"update url\"</span>)</span> String url) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Request.Builder()</div><div class=\"line\">                    .url(url)</div><div class=\"line\">                    .addHeader(<span class=\"string\">\"X-Consumer-Custom-ID\"</span>, <span class=\"string\">\"roomis-k12-own\"</span>)</div><div class=\"line\">                    .addHeader(<span class=\"string\">\"deviceSn\"</span>, <span class=\"string\">\"000ffd4a014f\"</span>)</div><div class=\"line\">                    .addHeader(<span class=\"string\">\"apikey\"</span>, <span class=\"string\">\"0001e01807cd4a9ebab4bbb5576f1815\"</span>)</div><div class=\"line\">                    .build();</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Provides</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> OkHttpClient <span class=\"title\">provideClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            OkHttpClient.Builder builder = <span class=\"keyword\">new</span> OkHttpClient.Builder();</div><div class=\"line\">            builder.connectTimeout(<span class=\"number\">60</span>, TimeUnit.SECONDS)</div><div class=\"line\">                    .readTimeout(<span class=\"number\">30</span>, TimeUnit.SECONDS)</div><div class=\"line\">                    .writeTimeout(<span class=\"number\">30</span>, TimeUnit.SECONDS);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> builder.build();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>ProviderBindings</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrinterModule</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractModule</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        bind(Printer.class)</div><div class=\"line\">                .toProvider(PrinterProvider.class);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrinterProvider</span> <span class=\"keyword\">implements</span> <span class=\"title\">Provider</span>&lt;<span class=\"title\">Printer</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Printer <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PdfPrinter();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Constructor Bindings</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_06_ConstructorBindings</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        Injector injector = Guice.createInjector(<span class=\"keyword\">new</span> TextEditorModule());</div><div class=\"line\">        TextEditor editor = injector.getInstance(TextEditor.class);</div><div class=\"line\">        editor.makeSpellCheck();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextEditor</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> SpellChecker spellChecker;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TextEditor</span><span class=\"params\">(SpellChecker spellChecker)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.spellChecker = spellChecker;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">makeSpellCheck</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        spellChecker.checkSpelling();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Binding Module</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextEditorModule</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractModule</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">configure</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            bind(SpellChecker.class)</div><div class=\"line\">                    .toConstructor(SpellCheckerImpl.class.getConstructor(String.class));</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException | SecurityException e) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"Required constructor missing\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        bind(String.class)</div><div class=\"line\">                .annotatedWith(Names.named(<span class=\"string\">\"JDBC\"</span>))</div><div class=\"line\">                .toInstance(<span class=\"string\">\"jdbc:mysql://localhost:5326/emp\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//spell checker interface</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">SpellChecker</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">checkSpelling</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//spell checker implementation</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpellCheckerImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">SpellChecker</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String dbUrl;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SpellCheckerImpl</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SpellCheckerImpl</span><span class=\"params\">(@Named(<span class=\"string\">\"JDBC\"</span>)</span> String dbUrl) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.dbUrl = dbUrl;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkSpelling</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Start checkSpelling.\"</span>);</div><div class=\"line\">        System.out.println(dbUrl);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"Scopes\"><a href=\"#Scopes\" class=\"headerlink\" title=\"Scopes\"></a>Scopes</h4><p>默认创建新实例</p>\n<ul>\n<li>@Singleton<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintService</span> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>或者<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"meta\">@Provides</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> OkHttpClient <span class=\"title\">provideClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bind(Printer.class).to(PdfPrinter.class).in(Singleton.class);</div></pre></td></tr></table></figure></p>\n<p>Eager Singletons<br>立即加载<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bind(TransactionLog.class).to(InMemoryTransactionLog.class).asEagerSingleton();</div></pre></td></tr></table></figure></p>\n<ul>\n<li>@SessionScoped</li>\n<li>@RequestScoped</li>\n</ul>\n<h4 id=\"Injections\"><a href=\"#Injections\" class=\"headerlink\" title=\"Injections\"></a>Injections</h4><ul>\n<li>Constructor Injection</li>\n<li>Method Injection</li>\n<li>Field Injection<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Singleton</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrintService</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Printer printer;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PrintService</span><span class=\"params\">(Printer printer)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.printer = printer;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//    @Inject</span></div><div class=\"line\"><span class=\"comment\">//    private Printer printer;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//    private Printer printer;</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//    @Inject</span></div><div class=\"line\"><span class=\"comment\">//    public void setPrinter(Printer printer) &#123;</span></div><div class=\"line\"><span class=\"comment\">//        this.printer = printer;</span></div><div class=\"line\"><span class=\"comment\">//    &#125;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">startWork</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.printer.print();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"Dagger2\"><a href=\"#Dagger2\" class=\"headerlink\" title=\"Dagger2\"></a>Dagger2</h2><blockquote>\n<p>Dagger is a fully static, compile-time dependency injection framework for both Java and Android. It is an adaptation of an earlier version created by Square and now maintained by Google.</p>\n</blockquote>\n<p>why reinvent the wheel? </p>\n<blockquote>\n<p>Dagger 2 is the first to implement the full stack with generated code. </p>\n</blockquote>\n<h4 id=\"Start\"><a href=\"#Start\" class=\"headerlink\" title=\"Start\"></a>Start</h4><p>build.gradle</p>\n<pre><code> implementation &apos;com.google.dagger:dagger:2.20&apos;\nannotationProcessor &apos;com.google.dagger:dagger-compiler:2.20&apos;\n</code></pre><p>#### </p>\n<ul>\n<li>Inject</li>\n<li>Module</li>\n<li>Provides</li>\n<li>Component</li>\n<li>Scope</li>\n<li>Qualifier</li>\n</ul>\n<p>#<br><a href=\"https://en.wikipedia.org/wiki/SOLID\" target=\"_blank\" rel=\"external\">https://en.wikipedia.org/wiki/SOLID</a> <br><br><a href=\"https://en.wikipedia.org/wiki/Dependency_inversion_principle\" target=\"_blank\" rel=\"external\">https://en.wikipedia.org/wiki/Dependency_inversion_principle</a> <br><br><a href=\"https://blog.csdn.net/briblue/article/details/75093382\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/briblue/article/details/75093382</a> <br><br><a href=\"http://tutorials.jenkov.com/dependency-injection/dependency-injection-benefits.html\" target=\"_blank\" rel=\"external\">http://tutorials.jenkov.com/dependency-injection/dependency-injection-benefits.html</a> <br><br><a href=\"https://blog.csdn.net/xtayfjpk/article/details/40657781\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/xtayfjpk/article/details/40657781</a></p>\n<p><a href=\"https://google.github.io/dagger/\" target=\"_blank\" rel=\"external\">https://google.github.io/dagger/</a> <br><br><a href=\"https://blog.csdn.net/qq_17766199/article/details/73030696\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/qq_17766199/article/details/73030696</a></p>\n"},{"title":"Dagger2（五）Android中的扩展使用","date":"2019-02-10T07:45:03.000Z","_content":"\n> 在Android平台上使用Dagger的一个主要的不同是，很多类的实例化依赖于操作系统本身，像是Activity和Fragment，但是Dagger最理想的工作方式是它能够构造所有需要注入的类的实例。所以，你必须在它们（Activity、Fragment等）的生命周期中进行成员的注入。很多类看上去跟下面类似：\n\n```java\npublic class FrombulationActivity extends Activity {\n  @Inject Frombulator frombulator;\n\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    //先写如下代码， 否则frombulator可能为null!\n    ((SomeApplicationBaseType) getContext().getApplicationContext())\n        .getApplicationComponent()\n        .newActivityComponentBuilder()\n        .activity(this)\n        .build()\n        .inject(this);\n    // ...其它代码\n  }\n}\n```\n这么做有以下问题：\n\n1. 复制粘贴同样的代码使得以后想要重构变得困难。越来越多的这样复制粘贴的代码，开发者反而对这段代码的作用了解的更少。\n2. 更加重要的是，它需要被注入类（FrombulationActivity）知道它的注入类。即使这是通过接口实现的，而不是具体的类。但是，这仍然破坏了依赖注入的的核心原则：一个类不应该对它是如何被注入的有任何的了解.\n(a class shouldn’t know anything about how it is injected.)\n\ndagger.android 可以用来简化以上步骤。\n\n#### build.gradle添加依赖:\n```\nimplementation 'com.google.dagger:dagger-android:2.20'\nimplementation 'com.google.dagger:dagger-android-support:2.20'\n```\n####  Activity的注入\n1. 在你的Application Component中加入AndroidInjectionModule模块，以提供所有基本类型的绑定。\n\n```\n@Component(modules = {AndroidInjectionModule.class,\n        ...})\npublic interface ApplicationComponent {\n    ...\n}\n```\n\nAndroidInjectionModule是一个普通的Module,其中声明了两种Multibinds\n```java\n@Beta\n@Module\npublic abstract class AndroidInjectionModule {\n  @Multibinds\n  abstract Map<Class<?>, AndroidInjector.Factory<?>> classKeyedInjectorFactories();\n\n  @Multibinds\n  abstract Map<String, AndroidInjector.Factory<?>> stringKeyedInjectorFactories();\n\n  private AndroidInjectionModule() {}\n}\n\n```\n\n2. 声明subcomponent并且实现接口AndroidInjector<YourActivity>，该subcomponent需要有一个被@Subcomponent.Builder注解的并扩展自AndroidInjector.Builder<YourActivity>的构造器：\n\n```java\n@Subcomponent\npublic interface MainActivitySubComponent extends AndroidInjector<MainActivity> {\n    @Subcomponent.Builder\n    abstract class Builder extends AndroidInjector.Builder<MainActivity> {\n    }\n}\n\n```\n\n3. 声明过subcomponent之后，把它通过如下方式加入到主component体系中：定义一个提供该subcomponent builder的module，并且把该module加入到你的AppComponent中。\n\n```java\n@Module(subcomponents = MainActivitySubComponent.class)\npublic abstract class MainModule {\n\n    @Binds\n    @IntoMap\n    @ClassKey(MainActivity.class)\n    abstract AndroidInjector.Factory<?>\n    bindYourMainActivityInjectorFactory(MainActivitySubComponent.Builder builder);\n}\n```\n* 注意：如果你的subcomponent和它的builder除了第2步中提及的方法或者超类没有其它的内容，你可以用 @ContributesAndroidInjector生成2、3步中的一切。现在不需要步骤2和3，你只需声明一个abstract module，返回你所需的activity（用 @ContributesAndroidInjector注解），可以声明subcomponent需要的其它的module。如果这个subcomponent需要scope注解，也可以声明：\n\n\n```java\n\n@Module\npublic abstract class ActivityBuildersModule {\n    @ActivityScope\n    @ContributesAndroidInjector(modules = {/*subcomponent需要的module*/})\n    abstract MainActivity contributeMainActivity();\n}\n\n@Component(modules = {AndroidInjectionModule.class,\n        ActivityBuildersModule.class})\npublic interface ApplicationComponent {\n    ...\n}\n```\n\nContributesAndroidInjector注解会生成如下代码，和我们手写的是一样的。\n```java\n@Module(\n  subcomponents = ActivityBulidersModule_ContributeMainActivity.MainActivitySubcomponent.class\n)\npublic abstract class ActivityBulidersModule_ContributeMainActivity {\n  private ActivityBulidersModule_ContributeMainActivity() {}\n\n  @Binds\n  @IntoMap\n  @ClassKey(MainActivity.class)\n  abstract AndroidInjector.Factory<?> bindAndroidInjectorFactory(\n      MainActivitySubcomponent.Builder builder);\n\n  @Subcomponent\n  @ActivityScope\n  public interface MainActivitySubcomponent extends AndroidInjector<MainActivity> {\n    @Subcomponent.Builder\n    abstract class Builder extends AndroidInjector.Builder<MainActivity> {}\n  }\n}\n\n```\n\n4. 让你的Application实现HasActivityInjector并且@Inject DispatchingAndroidInjector<Activity>而后从方法activityInjector()（接口HasActivityInjector中的方法）返回：\n\n```java\npublic class App extends Application implements HasActivityInjector {\n\n    @Inject\n    DispatchingAndroidInjector<Activity> dispatchingActivityInjector;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        DaggerApplicationComponent.create().inject(this);\n    }\n\n    @Override\n    public AndroidInjector<Activity> activityInjector() {\n        return dispatchingActivityInjector;\n    }\n}\n\n```\n\n5. 最后，在 Activity.onCreate() 方法中在super.onCreate()之前调用AndroidInjection.inject(this)\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    private static final String TAG = MainActivity.class.getSimpleName();\n\n    @Inject\n    UserService userService;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        AndroidInjection.inject(this);\n\n        Log.d(TAG, userService.getUserName());\n    }\n}\n```\n\n#### How did that work? 如何工作？\n\n> AndroidInjection.inject() 从Application中获取了一个 DispatchingAndroidInjector<Activity>，并把activity实例传入方法 inject(Activity)中。 DispatchingAndroidInjector 根据activity的class来查找 AndroidInjector.Factory（即 YourActivitySubcomponent.Builder），创建 AndroidInjector (即YourActivitySubcomponent)， 然后把你的activity实例传入方法 inject(YourActivity)中。\n\nAndroidInjection.inject(),获取App对象的dispatchingActivityInjector，调用inject(MainAcitivty)\n\n```\npublic static void inject(Activity activity) {\n    checkNotNull(activity, \"activity\");\n    Application application = activity.getApplication();\n    if (!(application instanceof HasActivityInjector)) {\n      throw new RuntimeException(\n          String.format(\n              \"%s does not implement %s\",\n              application.getClass().getCanonicalName(),\n              HasActivityInjector.class.getCanonicalName()));\n    }\n\n    AndroidInjector<Activity> activityInjector =\n        ((HasActivityInjector) application).activityInjector();\n    checkNotNull(activityInjector, \"%s.activityInjector() returned null\", application.getClass());\n\n    activityInjector.inject(activity);\n  }\n```\n再看看DispatchingAndroidInjector的inject()方法，调用的是maybeInject()方法,\n让后根据activity的class来查找 AndroidInjector.Factory（即 YourActivitySubcomponent.Builder），创建 AndroidInjector (即YourActivitySubcomponent)， 然后把你的activity实例传入方法 inject(YourActivity)中。\n\n```\n@Override\npublic void inject(T instance) {\n    boolean wasInjected = maybeInject(instance);\n    if (!wasInjected) {\n      throw new IllegalArgumentException(errorMessageSuggestions(instance));\n    }\n}\n\npublic boolean maybeInject(T instance) {\n    \n    //获取MainActivitySubcomponentImpl\n    Provider<AndroidInjector.Factory<?>> factoryProvider =\n        injectorFactories.get(instance.getClass().getName());\n    if (factoryProvider == null) {\n      return false;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    AndroidInjector.Factory<T> factory = (AndroidInjector.Factory<T>) factoryProvider.get();\n    try {\n      AndroidInjector<T> injector =\n          checkNotNull(\n              factory.create(instance), \"%s.create(I) should not return null.\", factory.getClass());\n\n      //调用MainActivitySubcomponentImpl的inject(MainActivity)\n      injector.inject(instance);\n      return true;\n    } catch (ClassCastException e) {\n      throw new InvalidInjectorBindingException(\n          String.format(\n              \"%s does not implement AndroidInjector.Factory<%s>\",\n              factory.getClass().getCanonicalName(), instance.getClass().getCanonicalName()),\n          e);\n    }\n  }\n  \n  //MainActivitySubcomponentImpl\n  private final class MainActivitySubcomponentImpl\n      implements ActivityBulidersModule_ContributeMainActivity.MainActivitySubcomponent {\n    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {}\n\n    @Override\n    public void inject(MainActivity arg0) {\n      injectMainActivity(arg0);\n    }\n\n    private MainActivity injectMainActivity(MainActivity instance) {\n      MainActivity_MembersInjector.injectUserService(instance, new UserService());\n      return instance;\n    }\n  }\n```\n\n#### dagger.android.support 进一步简化\n\n1. ApplicationComponent继承AndroidInjector<App>，并且添加Component.Builder,Builder类继承AndroidInjector.Builder<App>\n```java\n@Component(modules = {AndroidInjectionModule.class,\n        ActivityBuildersModule.class})\npublic interface ApplicationComponent extends AndroidInjector<App> {\n\n    @Component.Builder\n    abstract class Builder extends AndroidInjector.Builder<App> {\n    }\n\n}\n```\n\n2. 我们的Application继承dagger.android.support.DaggerApplication，重写applicationInjector方法。\n```java\npublic class App extends DaggerApplication {\n  \n    @Override\n    protected AndroidInjector<App> applicationInjector() {\n        return DaggerApplicationComponent.builder().create(this);\n    }\n}\n```\n3. Activity继承DaggerAppCompatActivity,无需调用AndroidInjection.inject()\n```java\npublic class MainActivity extends DaggerAppCompatActivity {\n\n    private static final String TAG = MainActivity.class.getSimpleName();\n\n    @Inject\n    UserService userService;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        \n        Log.d(TAG, userService.getUserName());\n    }\n}\n\n```\n\n\n\n\n\n\n\n\n\n[Demo Github地址](https://github.com/zhy060307/dagger2)\n\n\n参考：\nhttps://www.jianshu.com/p/ad777c73b528\n","source":"_posts/Dagger2（五）Android中的扩展使用.md","raw":"title: Dagger2（五）Android中的扩展使用\ndate: 2019-02-10 15:45:03\ncategories: Dagger2\ntags: Dagger2\n---\n\n> 在Android平台上使用Dagger的一个主要的不同是，很多类的实例化依赖于操作系统本身，像是Activity和Fragment，但是Dagger最理想的工作方式是它能够构造所有需要注入的类的实例。所以，你必须在它们（Activity、Fragment等）的生命周期中进行成员的注入。很多类看上去跟下面类似：\n\n```java\npublic class FrombulationActivity extends Activity {\n  @Inject Frombulator frombulator;\n\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    //先写如下代码， 否则frombulator可能为null!\n    ((SomeApplicationBaseType) getContext().getApplicationContext())\n        .getApplicationComponent()\n        .newActivityComponentBuilder()\n        .activity(this)\n        .build()\n        .inject(this);\n    // ...其它代码\n  }\n}\n```\n这么做有以下问题：\n\n1. 复制粘贴同样的代码使得以后想要重构变得困难。越来越多的这样复制粘贴的代码，开发者反而对这段代码的作用了解的更少。\n2. 更加重要的是，它需要被注入类（FrombulationActivity）知道它的注入类。即使这是通过接口实现的，而不是具体的类。但是，这仍然破坏了依赖注入的的核心原则：一个类不应该对它是如何被注入的有任何的了解.\n(a class shouldn’t know anything about how it is injected.)\n\ndagger.android 可以用来简化以上步骤。\n\n#### build.gradle添加依赖:\n```\nimplementation 'com.google.dagger:dagger-android:2.20'\nimplementation 'com.google.dagger:dagger-android-support:2.20'\n```\n####  Activity的注入\n1. 在你的Application Component中加入AndroidInjectionModule模块，以提供所有基本类型的绑定。\n\n```\n@Component(modules = {AndroidInjectionModule.class,\n        ...})\npublic interface ApplicationComponent {\n    ...\n}\n```\n\nAndroidInjectionModule是一个普通的Module,其中声明了两种Multibinds\n```java\n@Beta\n@Module\npublic abstract class AndroidInjectionModule {\n  @Multibinds\n  abstract Map<Class<?>, AndroidInjector.Factory<?>> classKeyedInjectorFactories();\n\n  @Multibinds\n  abstract Map<String, AndroidInjector.Factory<?>> stringKeyedInjectorFactories();\n\n  private AndroidInjectionModule() {}\n}\n\n```\n\n2. 声明subcomponent并且实现接口AndroidInjector<YourActivity>，该subcomponent需要有一个被@Subcomponent.Builder注解的并扩展自AndroidInjector.Builder<YourActivity>的构造器：\n\n```java\n@Subcomponent\npublic interface MainActivitySubComponent extends AndroidInjector<MainActivity> {\n    @Subcomponent.Builder\n    abstract class Builder extends AndroidInjector.Builder<MainActivity> {\n    }\n}\n\n```\n\n3. 声明过subcomponent之后，把它通过如下方式加入到主component体系中：定义一个提供该subcomponent builder的module，并且把该module加入到你的AppComponent中。\n\n```java\n@Module(subcomponents = MainActivitySubComponent.class)\npublic abstract class MainModule {\n\n    @Binds\n    @IntoMap\n    @ClassKey(MainActivity.class)\n    abstract AndroidInjector.Factory<?>\n    bindYourMainActivityInjectorFactory(MainActivitySubComponent.Builder builder);\n}\n```\n* 注意：如果你的subcomponent和它的builder除了第2步中提及的方法或者超类没有其它的内容，你可以用 @ContributesAndroidInjector生成2、3步中的一切。现在不需要步骤2和3，你只需声明一个abstract module，返回你所需的activity（用 @ContributesAndroidInjector注解），可以声明subcomponent需要的其它的module。如果这个subcomponent需要scope注解，也可以声明：\n\n\n```java\n\n@Module\npublic abstract class ActivityBuildersModule {\n    @ActivityScope\n    @ContributesAndroidInjector(modules = {/*subcomponent需要的module*/})\n    abstract MainActivity contributeMainActivity();\n}\n\n@Component(modules = {AndroidInjectionModule.class,\n        ActivityBuildersModule.class})\npublic interface ApplicationComponent {\n    ...\n}\n```\n\nContributesAndroidInjector注解会生成如下代码，和我们手写的是一样的。\n```java\n@Module(\n  subcomponents = ActivityBulidersModule_ContributeMainActivity.MainActivitySubcomponent.class\n)\npublic abstract class ActivityBulidersModule_ContributeMainActivity {\n  private ActivityBulidersModule_ContributeMainActivity() {}\n\n  @Binds\n  @IntoMap\n  @ClassKey(MainActivity.class)\n  abstract AndroidInjector.Factory<?> bindAndroidInjectorFactory(\n      MainActivitySubcomponent.Builder builder);\n\n  @Subcomponent\n  @ActivityScope\n  public interface MainActivitySubcomponent extends AndroidInjector<MainActivity> {\n    @Subcomponent.Builder\n    abstract class Builder extends AndroidInjector.Builder<MainActivity> {}\n  }\n}\n\n```\n\n4. 让你的Application实现HasActivityInjector并且@Inject DispatchingAndroidInjector<Activity>而后从方法activityInjector()（接口HasActivityInjector中的方法）返回：\n\n```java\npublic class App extends Application implements HasActivityInjector {\n\n    @Inject\n    DispatchingAndroidInjector<Activity> dispatchingActivityInjector;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        DaggerApplicationComponent.create().inject(this);\n    }\n\n    @Override\n    public AndroidInjector<Activity> activityInjector() {\n        return dispatchingActivityInjector;\n    }\n}\n\n```\n\n5. 最后，在 Activity.onCreate() 方法中在super.onCreate()之前调用AndroidInjection.inject(this)\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    private static final String TAG = MainActivity.class.getSimpleName();\n\n    @Inject\n    UserService userService;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        AndroidInjection.inject(this);\n\n        Log.d(TAG, userService.getUserName());\n    }\n}\n```\n\n#### How did that work? 如何工作？\n\n> AndroidInjection.inject() 从Application中获取了一个 DispatchingAndroidInjector<Activity>，并把activity实例传入方法 inject(Activity)中。 DispatchingAndroidInjector 根据activity的class来查找 AndroidInjector.Factory（即 YourActivitySubcomponent.Builder），创建 AndroidInjector (即YourActivitySubcomponent)， 然后把你的activity实例传入方法 inject(YourActivity)中。\n\nAndroidInjection.inject(),获取App对象的dispatchingActivityInjector，调用inject(MainAcitivty)\n\n```\npublic static void inject(Activity activity) {\n    checkNotNull(activity, \"activity\");\n    Application application = activity.getApplication();\n    if (!(application instanceof HasActivityInjector)) {\n      throw new RuntimeException(\n          String.format(\n              \"%s does not implement %s\",\n              application.getClass().getCanonicalName(),\n              HasActivityInjector.class.getCanonicalName()));\n    }\n\n    AndroidInjector<Activity> activityInjector =\n        ((HasActivityInjector) application).activityInjector();\n    checkNotNull(activityInjector, \"%s.activityInjector() returned null\", application.getClass());\n\n    activityInjector.inject(activity);\n  }\n```\n再看看DispatchingAndroidInjector的inject()方法，调用的是maybeInject()方法,\n让后根据activity的class来查找 AndroidInjector.Factory（即 YourActivitySubcomponent.Builder），创建 AndroidInjector (即YourActivitySubcomponent)， 然后把你的activity实例传入方法 inject(YourActivity)中。\n\n```\n@Override\npublic void inject(T instance) {\n    boolean wasInjected = maybeInject(instance);\n    if (!wasInjected) {\n      throw new IllegalArgumentException(errorMessageSuggestions(instance));\n    }\n}\n\npublic boolean maybeInject(T instance) {\n    \n    //获取MainActivitySubcomponentImpl\n    Provider<AndroidInjector.Factory<?>> factoryProvider =\n        injectorFactories.get(instance.getClass().getName());\n    if (factoryProvider == null) {\n      return false;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    AndroidInjector.Factory<T> factory = (AndroidInjector.Factory<T>) factoryProvider.get();\n    try {\n      AndroidInjector<T> injector =\n          checkNotNull(\n              factory.create(instance), \"%s.create(I) should not return null.\", factory.getClass());\n\n      //调用MainActivitySubcomponentImpl的inject(MainActivity)\n      injector.inject(instance);\n      return true;\n    } catch (ClassCastException e) {\n      throw new InvalidInjectorBindingException(\n          String.format(\n              \"%s does not implement AndroidInjector.Factory<%s>\",\n              factory.getClass().getCanonicalName(), instance.getClass().getCanonicalName()),\n          e);\n    }\n  }\n  \n  //MainActivitySubcomponentImpl\n  private final class MainActivitySubcomponentImpl\n      implements ActivityBulidersModule_ContributeMainActivity.MainActivitySubcomponent {\n    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {}\n\n    @Override\n    public void inject(MainActivity arg0) {\n      injectMainActivity(arg0);\n    }\n\n    private MainActivity injectMainActivity(MainActivity instance) {\n      MainActivity_MembersInjector.injectUserService(instance, new UserService());\n      return instance;\n    }\n  }\n```\n\n#### dagger.android.support 进一步简化\n\n1. ApplicationComponent继承AndroidInjector<App>，并且添加Component.Builder,Builder类继承AndroidInjector.Builder<App>\n```java\n@Component(modules = {AndroidInjectionModule.class,\n        ActivityBuildersModule.class})\npublic interface ApplicationComponent extends AndroidInjector<App> {\n\n    @Component.Builder\n    abstract class Builder extends AndroidInjector.Builder<App> {\n    }\n\n}\n```\n\n2. 我们的Application继承dagger.android.support.DaggerApplication，重写applicationInjector方法。\n```java\npublic class App extends DaggerApplication {\n  \n    @Override\n    protected AndroidInjector<App> applicationInjector() {\n        return DaggerApplicationComponent.builder().create(this);\n    }\n}\n```\n3. Activity继承DaggerAppCompatActivity,无需调用AndroidInjection.inject()\n```java\npublic class MainActivity extends DaggerAppCompatActivity {\n\n    private static final String TAG = MainActivity.class.getSimpleName();\n\n    @Inject\n    UserService userService;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        \n        Log.d(TAG, userService.getUserName());\n    }\n}\n\n```\n\n\n\n\n\n\n\n\n\n[Demo Github地址](https://github.com/zhy060307/dagger2)\n\n\n参考：\nhttps://www.jianshu.com/p/ad777c73b528\n","slug":"Dagger2（五）Android中的扩展使用","published":1,"updated":"2019-02-10T07:45:28.642Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjryltlb5000jncaqivbnna9u","content":"<blockquote>\n<p>在Android平台上使用Dagger的一个主要的不同是，很多类的实例化依赖于操作系统本身，像是Activity和Fragment，但是Dagger最理想的工作方式是它能够构造所有需要注入的类的实例。所以，你必须在它们（Activity、Fragment等）的生命周期中进行成员的注入。很多类看上去跟下面类似：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FrombulationActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Inject</span> Frombulator frombulator;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    <span class=\"comment\">//先写如下代码， 否则frombulator可能为null!</span></div><div class=\"line\">    ((SomeApplicationBaseType) getContext().getApplicationContext())</div><div class=\"line\">        .getApplicationComponent()</div><div class=\"line\">        .newActivityComponentBuilder()</div><div class=\"line\">        .activity(<span class=\"keyword\">this</span>)</div><div class=\"line\">        .build()</div><div class=\"line\">        .inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"comment\">// ...其它代码</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这么做有以下问题：</p>\n<ol>\n<li>复制粘贴同样的代码使得以后想要重构变得困难。越来越多的这样复制粘贴的代码，开发者反而对这段代码的作用了解的更少。</li>\n<li>更加重要的是，它需要被注入类（FrombulationActivity）知道它的注入类。即使这是通过接口实现的，而不是具体的类。但是，这仍然破坏了依赖注入的的核心原则：一个类不应该对它是如何被注入的有任何的了解.<br>(a class shouldn’t know anything about how it is injected.)</li>\n</ol>\n<p>dagger.android 可以用来简化以上步骤。</p>\n<h4 id=\"build-gradle添加依赖\"><a href=\"#build-gradle添加依赖\" class=\"headerlink\" title=\"build.gradle添加依赖:\"></a>build.gradle添加依赖:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">implementation &apos;com.google.dagger:dagger-android:2.20&apos;</div><div class=\"line\">implementation &apos;com.google.dagger:dagger-android-support:2.20&apos;</div></pre></td></tr></table></figure>\n<h4 id=\"Activity的注入\"><a href=\"#Activity的注入\" class=\"headerlink\" title=\"Activity的注入\"></a>Activity的注入</h4><ol>\n<li>在你的Application Component中加入AndroidInjectionModule模块，以提供所有基本类型的绑定。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Component(modules = &#123;AndroidInjectionModule.class,</div><div class=\"line\">        ...&#125;)</div><div class=\"line\">public interface ApplicationComponent &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>AndroidInjectionModule是一个普通的Module,其中声明了两种Multibinds<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Beta</span></div><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndroidInjectionModule</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Multibinds</span></div><div class=\"line\">  <span class=\"keyword\">abstract</span> Map&lt;Class&lt;?&gt;, AndroidInjector.Factory&lt;?&gt;&gt; classKeyedInjectorFactories();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Multibinds</span></div><div class=\"line\">  <span class=\"keyword\">abstract</span> Map&lt;String, AndroidInjector.Factory&lt;?&gt;&gt; stringKeyedInjectorFactories();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">AndroidInjectionModule</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>声明subcomponent并且实现接口AndroidInjector<youractivity>，该subcomponent需要有一个被@Subcomponent.Builder注解的并扩展自AndroidInjector.Builder<youractivity>的构造器：</youractivity></youractivity></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Subcomponent</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MainActivitySubComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">AndroidInjector</span>&lt;<span class=\"title\">MainActivity</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Subcomponent</span>.Builder</div><div class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> <span class=\"keyword\">extends</span> <span class=\"title\">AndroidInjector</span>.<span class=\"title\">Builder</span>&lt;<span class=\"title\">MainActivity</span>&gt; </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>声明过subcomponent之后，把它通过如下方式加入到主component体系中：定义一个提供该subcomponent builder的module，并且把该module加入到你的AppComponent中。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span>(subcomponents = MainActivitySubComponent.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Binds</span></div><div class=\"line\">    <span class=\"meta\">@IntoMap</span></div><div class=\"line\">    <span class=\"meta\">@ClassKey</span>(MainActivity.class)</div><div class=\"line\">    <span class=\"keyword\">abstract</span> AndroidInjector.Factory&lt;?&gt;</div><div class=\"line\">    bindYourMainActivityInjectorFactory(MainActivitySubComponent.Builder builder);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>注意：如果你的subcomponent和它的builder除了第2步中提及的方法或者超类没有其它的内容，你可以用 @ContributesAndroidInjector生成2、3步中的一切。现在不需要步骤2和3，你只需声明一个abstract module，返回你所需的activity（用 @ContributesAndroidInjector注解），可以声明subcomponent需要的其它的module。如果这个subcomponent需要scope注解，也可以声明：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityBuildersModule</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@ActivityScope</span></div><div class=\"line\">    <span class=\"meta\">@ContributesAndroidInjector</span>(modules = &#123;<span class=\"comment\">/*subcomponent需要的module*/</span>&#125;)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> MainActivity <span class=\"title\">contributeMainActivity</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules = &#123;AndroidInjectionModule.class,</div><div class=\"line\">        ActivityBuildersModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ApplicationComponent</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ContributesAndroidInjector注解会生成如下代码，和我们手写的是一样的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span>(</div><div class=\"line\">  subcomponents = ActivityBulidersModule_ContributeMainActivity.MainActivitySubcomponent.class</div><div class=\"line\">)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityBulidersModule_ContributeMainActivity</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ActivityBulidersModule_ContributeMainActivity</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Binds</span></div><div class=\"line\">  <span class=\"meta\">@IntoMap</span></div><div class=\"line\">  <span class=\"meta\">@ClassKey</span>(MainActivity.class)</div><div class=\"line\">  <span class=\"keyword\">abstract</span> AndroidInjector.Factory&lt;?&gt; bindAndroidInjectorFactory(</div><div class=\"line\">      MainActivitySubcomponent.Builder builder);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Subcomponent</span></div><div class=\"line\">  <span class=\"meta\">@ActivityScope</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MainActivitySubcomponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">AndroidInjector</span>&lt;<span class=\"title\">MainActivity</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Subcomponent</span>.Builder</div><div class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> <span class=\"keyword\">extends</span> <span class=\"title\">AndroidInjector</span>.<span class=\"title\">Builder</span>&lt;<span class=\"title\">MainActivity</span>&gt; </span>&#123;&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>让你的Application实现HasActivityInjector并且@Inject DispatchingAndroidInjector<activity>而后从方法activityInjector()（接口HasActivityInjector中的方法）返回：</activity></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> <span class=\"keyword\">implements</span> <span class=\"title\">HasActivityInjector</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    DispatchingAndroidInjector&lt;Activity&gt; dispatchingActivityInjector;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">        DaggerApplicationComponent.create().inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AndroidInjector&lt;Activity&gt; <span class=\"title\">activityInjector</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> dispatchingActivityInjector;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>最后，在 Activity.onCreate() 方法中在super.onCreate()之前调用AndroidInjection.inject(this)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = MainActivity.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    UserService userService;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        AndroidInjection.inject(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">        Log.d(TAG, userService.getUserName());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"How-did-that-work-如何工作？\"><a href=\"#How-did-that-work-如何工作？\" class=\"headerlink\" title=\"How did that work? 如何工作？\"></a>How did that work? 如何工作？</h4><blockquote>\n<p>AndroidInjection.inject() 从Application中获取了一个 DispatchingAndroidInjector<activity>，并把activity实例传入方法 inject(Activity)中。 DispatchingAndroidInjector 根据activity的class来查找 AndroidInjector.Factory（即 YourActivitySubcomponent.Builder），创建 AndroidInjector (即YourActivitySubcomponent)， 然后把你的activity实例传入方法 inject(YourActivity)中。</activity></p>\n</blockquote>\n<p>AndroidInjection.inject(),获取App对象的dispatchingActivityInjector，调用inject(MainAcitivty)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void inject(Activity activity) &#123;</div><div class=\"line\">    checkNotNull(activity, &quot;activity&quot;);</div><div class=\"line\">    Application application = activity.getApplication();</div><div class=\"line\">    if (!(application instanceof HasActivityInjector)) &#123;</div><div class=\"line\">      throw new RuntimeException(</div><div class=\"line\">          String.format(</div><div class=\"line\">              &quot;%s does not implement %s&quot;,</div><div class=\"line\">              application.getClass().getCanonicalName(),</div><div class=\"line\">              HasActivityInjector.class.getCanonicalName()));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    AndroidInjector&lt;Activity&gt; activityInjector =</div><div class=\"line\">        ((HasActivityInjector) application).activityInjector();</div><div class=\"line\">    checkNotNull(activityInjector, &quot;%s.activityInjector() returned null&quot;, application.getClass());</div><div class=\"line\"></div><div class=\"line\">    activityInjector.inject(activity);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>再看看DispatchingAndroidInjector的inject()方法，调用的是maybeInject()方法,<br>让后根据activity的class来查找 AndroidInjector.Factory（即 YourActivitySubcomponent.Builder），创建 AndroidInjector (即YourActivitySubcomponent)， 然后把你的activity实例传入方法 inject(YourActivity)中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public void inject(T instance) &#123;</div><div class=\"line\">    boolean wasInjected = maybeInject(instance);</div><div class=\"line\">    if (!wasInjected) &#123;</div><div class=\"line\">      throw new IllegalArgumentException(errorMessageSuggestions(instance));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public boolean maybeInject(T instance) &#123;</div><div class=\"line\">    </div><div class=\"line\">    //获取MainActivitySubcomponentImpl</div><div class=\"line\">    Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt; factoryProvider =</div><div class=\"line\">        injectorFactories.get(instance.getClass().getName());</div><div class=\"line\">    if (factoryProvider == null) &#123;</div><div class=\"line\">      return false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</div><div class=\"line\">    AndroidInjector.Factory&lt;T&gt; factory = (AndroidInjector.Factory&lt;T&gt;) factoryProvider.get();</div><div class=\"line\">    try &#123;</div><div class=\"line\">      AndroidInjector&lt;T&gt; injector =</div><div class=\"line\">          checkNotNull(</div><div class=\"line\">              factory.create(instance), &quot;%s.create(I) should not return null.&quot;, factory.getClass());</div><div class=\"line\"></div><div class=\"line\">      //调用MainActivitySubcomponentImpl的inject(MainActivity)</div><div class=\"line\">      injector.inject(instance);</div><div class=\"line\">      return true;</div><div class=\"line\">    &#125; catch (ClassCastException e) &#123;</div><div class=\"line\">      throw new InvalidInjectorBindingException(</div><div class=\"line\">          String.format(</div><div class=\"line\">              &quot;%s does not implement AndroidInjector.Factory&lt;%s&gt;&quot;,</div><div class=\"line\">              factory.getClass().getCanonicalName(), instance.getClass().getCanonicalName()),</div><div class=\"line\">          e);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  //MainActivitySubcomponentImpl</div><div class=\"line\">  private final class MainActivitySubcomponentImpl</div><div class=\"line\">      implements ActivityBulidersModule_ContributeMainActivity.MainActivitySubcomponent &#123;</div><div class=\"line\">    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void inject(MainActivity arg0) &#123;</div><div class=\"line\">      injectMainActivity(arg0);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private MainActivity injectMainActivity(MainActivity instance) &#123;</div><div class=\"line\">      MainActivity_MembersInjector.injectUserService(instance, new UserService());</div><div class=\"line\">      return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"dagger-android-support-进一步简化\"><a href=\"#dagger-android-support-进一步简化\" class=\"headerlink\" title=\"dagger.android.support 进一步简化\"></a>dagger.android.support 进一步简化</h4><ol>\n<li><p>ApplicationComponent继承AndroidInjector<app>，并且添加Component.Builder,Builder类继承AndroidInjector.Builder<app></app></app></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span>(modules = &#123;AndroidInjectionModule.class,</div><div class=\"line\">        ActivityBuildersModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ApplicationComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">AndroidInjector</span>&lt;<span class=\"title\">App</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Component</span>.Builder</div><div class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> <span class=\"keyword\">extends</span> <span class=\"title\">AndroidInjector</span>.<span class=\"title\">Builder</span>&lt;<span class=\"title\">App</span>&gt; </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>我们的Application继承dagger.android.support.DaggerApplication，重写applicationInjector方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">DaggerApplication</span> </span>&#123;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> AndroidInjector&lt;App&gt; <span class=\"title\">applicationInjector</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> DaggerApplicationComponent.builder().create(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Activity继承DaggerAppCompatActivity,无需调用AndroidInjection.inject()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">DaggerAppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = MainActivity.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    UserService userService;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        </div><div class=\"line\">        Log.d(TAG, userService.getUserName());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a href=\"https://github.com/zhy060307/dagger2\" target=\"_blank\" rel=\"external\">Demo Github地址</a></p>\n<p>参考：<br><a href=\"https://www.jianshu.com/p/ad777c73b528\" target=\"_blank\" rel=\"external\">https://www.jianshu.com/p/ad777c73b528</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在Android平台上使用Dagger的一个主要的不同是，很多类的实例化依赖于操作系统本身，像是Activity和Fragment，但是Dagger最理想的工作方式是它能够构造所有需要注入的类的实例。所以，你必须在它们（Activity、Fragment等）的生命周期中进行成员的注入。很多类看上去跟下面类似：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FrombulationActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Inject</span> Frombulator frombulator;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">    <span class=\"comment\">//先写如下代码， 否则frombulator可能为null!</span></div><div class=\"line\">    ((SomeApplicationBaseType) getContext().getApplicationContext())</div><div class=\"line\">        .getApplicationComponent()</div><div class=\"line\">        .newActivityComponentBuilder()</div><div class=\"line\">        .activity(<span class=\"keyword\">this</span>)</div><div class=\"line\">        .build()</div><div class=\"line\">        .inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"comment\">// ...其它代码</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这么做有以下问题：</p>\n<ol>\n<li>复制粘贴同样的代码使得以后想要重构变得困难。越来越多的这样复制粘贴的代码，开发者反而对这段代码的作用了解的更少。</li>\n<li>更加重要的是，它需要被注入类（FrombulationActivity）知道它的注入类。即使这是通过接口实现的，而不是具体的类。但是，这仍然破坏了依赖注入的的核心原则：一个类不应该对它是如何被注入的有任何的了解.<br>(a class shouldn’t know anything about how it is injected.)</li>\n</ol>\n<p>dagger.android 可以用来简化以上步骤。</p>\n<h4 id=\"build-gradle添加依赖\"><a href=\"#build-gradle添加依赖\" class=\"headerlink\" title=\"build.gradle添加依赖:\"></a>build.gradle添加依赖:</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">implementation &apos;com.google.dagger:dagger-android:2.20&apos;</div><div class=\"line\">implementation &apos;com.google.dagger:dagger-android-support:2.20&apos;</div></pre></td></tr></table></figure>\n<h4 id=\"Activity的注入\"><a href=\"#Activity的注入\" class=\"headerlink\" title=\"Activity的注入\"></a>Activity的注入</h4><ol>\n<li>在你的Application Component中加入AndroidInjectionModule模块，以提供所有基本类型的绑定。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Component(modules = &#123;AndroidInjectionModule.class,</div><div class=\"line\">        ...&#125;)</div><div class=\"line\">public interface ApplicationComponent &#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>AndroidInjectionModule是一个普通的Module,其中声明了两种Multibinds<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Beta</span></div><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AndroidInjectionModule</span> </span>&#123;</div><div class=\"line\">  <span class=\"meta\">@Multibinds</span></div><div class=\"line\">  <span class=\"keyword\">abstract</span> Map&lt;Class&lt;?&gt;, AndroidInjector.Factory&lt;?&gt;&gt; classKeyedInjectorFactories();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Multibinds</span></div><div class=\"line\">  <span class=\"keyword\">abstract</span> Map&lt;String, AndroidInjector.Factory&lt;?&gt;&gt; stringKeyedInjectorFactories();</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">AndroidInjectionModule</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>声明subcomponent并且实现接口AndroidInjector<youractivity>，该subcomponent需要有一个被@Subcomponent.Builder注解的并扩展自AndroidInjector.Builder<youractivity>的构造器：</youractivity></youractivity></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Subcomponent</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MainActivitySubComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">AndroidInjector</span>&lt;<span class=\"title\">MainActivity</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Subcomponent</span>.Builder</div><div class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> <span class=\"keyword\">extends</span> <span class=\"title\">AndroidInjector</span>.<span class=\"title\">Builder</span>&lt;<span class=\"title\">MainActivity</span>&gt; </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>声明过subcomponent之后，把它通过如下方式加入到主component体系中：定义一个提供该subcomponent builder的module，并且把该module加入到你的AppComponent中。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span>(subcomponents = MainActivitySubComponent.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Binds</span></div><div class=\"line\">    <span class=\"meta\">@IntoMap</span></div><div class=\"line\">    <span class=\"meta\">@ClassKey</span>(MainActivity.class)</div><div class=\"line\">    <span class=\"keyword\">abstract</span> AndroidInjector.Factory&lt;?&gt;</div><div class=\"line\">    bindYourMainActivityInjectorFactory(MainActivitySubComponent.Builder builder);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>注意：如果你的subcomponent和它的builder除了第2步中提及的方法或者超类没有其它的内容，你可以用 @ContributesAndroidInjector生成2、3步中的一切。现在不需要步骤2和3，你只需声明一个abstract module，返回你所需的activity（用 @ContributesAndroidInjector注解），可以声明subcomponent需要的其它的module。如果这个subcomponent需要scope注解，也可以声明：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityBuildersModule</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@ActivityScope</span></div><div class=\"line\">    <span class=\"meta\">@ContributesAndroidInjector</span>(modules = &#123;<span class=\"comment\">/*subcomponent需要的module*/</span>&#125;)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> MainActivity <span class=\"title\">contributeMainActivity</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules = &#123;AndroidInjectionModule.class,</div><div class=\"line\">        ActivityBuildersModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ApplicationComponent</span> </span>&#123;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ContributesAndroidInjector注解会生成如下代码，和我们手写的是一样的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span>(</div><div class=\"line\">  subcomponents = ActivityBulidersModule_ContributeMainActivity.MainActivitySubcomponent.class</div><div class=\"line\">)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ActivityBulidersModule_ContributeMainActivity</span> </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ActivityBulidersModule_ContributeMainActivity</span><span class=\"params\">()</span> </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Binds</span></div><div class=\"line\">  <span class=\"meta\">@IntoMap</span></div><div class=\"line\">  <span class=\"meta\">@ClassKey</span>(MainActivity.class)</div><div class=\"line\">  <span class=\"keyword\">abstract</span> AndroidInjector.Factory&lt;?&gt; bindAndroidInjectorFactory(</div><div class=\"line\">      MainActivitySubcomponent.Builder builder);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Subcomponent</span></div><div class=\"line\">  <span class=\"meta\">@ActivityScope</span></div><div class=\"line\">  <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MainActivitySubcomponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">AndroidInjector</span>&lt;<span class=\"title\">MainActivity</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Subcomponent</span>.Builder</div><div class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> <span class=\"keyword\">extends</span> <span class=\"title\">AndroidInjector</span>.<span class=\"title\">Builder</span>&lt;<span class=\"title\">MainActivity</span>&gt; </span>&#123;&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>让你的Application实现HasActivityInjector并且@Inject DispatchingAndroidInjector<activity>而后从方法activityInjector()（接口HasActivityInjector中的方法）返回：</activity></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> <span class=\"keyword\">implements</span> <span class=\"title\">HasActivityInjector</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    DispatchingAndroidInjector&lt;Activity&gt; dispatchingActivityInjector;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">        DaggerApplicationComponent.create().inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> AndroidInjector&lt;Activity&gt; <span class=\"title\">activityInjector</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> dispatchingActivityInjector;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>最后，在 Activity.onCreate() 方法中在super.onCreate()之前调用AndroidInjection.inject(this)</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = MainActivity.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    UserService userService;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        AndroidInjection.inject(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">        Log.d(TAG, userService.getUserName());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"How-did-that-work-如何工作？\"><a href=\"#How-did-that-work-如何工作？\" class=\"headerlink\" title=\"How did that work? 如何工作？\"></a>How did that work? 如何工作？</h4><blockquote>\n<p>AndroidInjection.inject() 从Application中获取了一个 DispatchingAndroidInjector<activity>，并把activity实例传入方法 inject(Activity)中。 DispatchingAndroidInjector 根据activity的class来查找 AndroidInjector.Factory（即 YourActivitySubcomponent.Builder），创建 AndroidInjector (即YourActivitySubcomponent)， 然后把你的activity实例传入方法 inject(YourActivity)中。</activity></p>\n</blockquote>\n<p>AndroidInjection.inject(),获取App对象的dispatchingActivityInjector，调用inject(MainAcitivty)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void inject(Activity activity) &#123;</div><div class=\"line\">    checkNotNull(activity, &quot;activity&quot;);</div><div class=\"line\">    Application application = activity.getApplication();</div><div class=\"line\">    if (!(application instanceof HasActivityInjector)) &#123;</div><div class=\"line\">      throw new RuntimeException(</div><div class=\"line\">          String.format(</div><div class=\"line\">              &quot;%s does not implement %s&quot;,</div><div class=\"line\">              application.getClass().getCanonicalName(),</div><div class=\"line\">              HasActivityInjector.class.getCanonicalName()));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    AndroidInjector&lt;Activity&gt; activityInjector =</div><div class=\"line\">        ((HasActivityInjector) application).activityInjector();</div><div class=\"line\">    checkNotNull(activityInjector, &quot;%s.activityInjector() returned null&quot;, application.getClass());</div><div class=\"line\"></div><div class=\"line\">    activityInjector.inject(activity);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>再看看DispatchingAndroidInjector的inject()方法，调用的是maybeInject()方法,<br>让后根据activity的class来查找 AndroidInjector.Factory（即 YourActivitySubcomponent.Builder），创建 AndroidInjector (即YourActivitySubcomponent)， 然后把你的activity实例传入方法 inject(YourActivity)中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Override</div><div class=\"line\">public void inject(T instance) &#123;</div><div class=\"line\">    boolean wasInjected = maybeInject(instance);</div><div class=\"line\">    if (!wasInjected) &#123;</div><div class=\"line\">      throw new IllegalArgumentException(errorMessageSuggestions(instance));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public boolean maybeInject(T instance) &#123;</div><div class=\"line\">    </div><div class=\"line\">    //获取MainActivitySubcomponentImpl</div><div class=\"line\">    Provider&lt;AndroidInjector.Factory&lt;?&gt;&gt; factoryProvider =</div><div class=\"line\">        injectorFactories.get(instance.getClass().getName());</div><div class=\"line\">    if (factoryProvider == null) &#123;</div><div class=\"line\">      return false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</div><div class=\"line\">    AndroidInjector.Factory&lt;T&gt; factory = (AndroidInjector.Factory&lt;T&gt;) factoryProvider.get();</div><div class=\"line\">    try &#123;</div><div class=\"line\">      AndroidInjector&lt;T&gt; injector =</div><div class=\"line\">          checkNotNull(</div><div class=\"line\">              factory.create(instance), &quot;%s.create(I) should not return null.&quot;, factory.getClass());</div><div class=\"line\"></div><div class=\"line\">      //调用MainActivitySubcomponentImpl的inject(MainActivity)</div><div class=\"line\">      injector.inject(instance);</div><div class=\"line\">      return true;</div><div class=\"line\">    &#125; catch (ClassCastException e) &#123;</div><div class=\"line\">      throw new InvalidInjectorBindingException(</div><div class=\"line\">          String.format(</div><div class=\"line\">              &quot;%s does not implement AndroidInjector.Factory&lt;%s&gt;&quot;,</div><div class=\"line\">              factory.getClass().getCanonicalName(), instance.getClass().getCanonicalName()),</div><div class=\"line\">          e);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  </div><div class=\"line\">  //MainActivitySubcomponentImpl</div><div class=\"line\">  private final class MainActivitySubcomponentImpl</div><div class=\"line\">      implements ActivityBulidersModule_ContributeMainActivity.MainActivitySubcomponent &#123;</div><div class=\"line\">    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void inject(MainActivity arg0) &#123;</div><div class=\"line\">      injectMainActivity(arg0);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private MainActivity injectMainActivity(MainActivity instance) &#123;</div><div class=\"line\">      MainActivity_MembersInjector.injectUserService(instance, new UserService());</div><div class=\"line\">      return instance;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h4 id=\"dagger-android-support-进一步简化\"><a href=\"#dagger-android-support-进一步简化\" class=\"headerlink\" title=\"dagger.android.support 进一步简化\"></a>dagger.android.support 进一步简化</h4><ol>\n<li><p>ApplicationComponent继承AndroidInjector<app>，并且添加Component.Builder,Builder类继承AndroidInjector.Builder<app></app></app></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Component</span>(modules = &#123;AndroidInjectionModule.class,</div><div class=\"line\">        ActivityBuildersModule.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ApplicationComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">AndroidInjector</span>&lt;<span class=\"title\">App</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Component</span>.Builder</div><div class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> <span class=\"keyword\">extends</span> <span class=\"title\">AndroidInjector</span>.<span class=\"title\">Builder</span>&lt;<span class=\"title\">App</span>&gt; </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>我们的Application继承dagger.android.support.DaggerApplication，重写applicationInjector方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">DaggerApplication</span> </span>&#123;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> AndroidInjector&lt;App&gt; <span class=\"title\">applicationInjector</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> DaggerApplicationComponent.builder().create(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Activity继承DaggerAppCompatActivity,无需调用AndroidInjection.inject()</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">DaggerAppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = MainActivity.class.getSimpleName();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    UserService userService;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_main);</div><div class=\"line\">        </div><div class=\"line\">        Log.d(TAG, userService.getUserName());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><a href=\"https://github.com/zhy060307/dagger2\" target=\"_blank\" rel=\"external\">Demo Github地址</a></p>\n<p>参考：<br><a href=\"https://www.jianshu.com/p/ad777c73b528\" target=\"_blank\" rel=\"external\">https://www.jianshu.com/p/ad777c73b528</a></p>\n"},{"title":"Dagger2（四）Multibindings","date":"2019-02-10T07:43:05.000Z","_content":"\n### Multibindings\n\n> Dagger allows you to bind several objects into a collection even when the objects are bound in different modules using multibindings.\n\nDagger的Multibindings功能可以生成集合，无需直接依赖其他单独的绑定。  \n\n#### Set multibindings\n\n可以将一个或多个值绑定到一个Set中。\n\n* IntoSet,提供单一的值。\n* ElementsIntoSet，提供subset。\n```java\n@Module\npublic class SetModuleA {\n\n    @Provides\n    @IntoSet\n    public String provideOneString() {\n        return \"ABC\";\n    }\n\n    @Provides\n    @ElementsIntoSet\n    public Set<String> provideSomeStrings() {\n        return new HashSet<>(Arrays.asList(\"DEF\", \"GHI\"));\n    }\n\n}\n```\n然后注入Set\n```java\npublic class FourthActivity extends AppCompatActivity {\n\n    @Inject\n    Set<String> mySet;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_third);\n        DaggerMultiBindingsComponent\n                .create().inject(this);\n\n    }\n\n    public void setBindings(View view) {\n        Log.d(\"Inject mySet value is\", mySet.toString());\n    }\n}\nLogcat:com.zhy.dagger2 D/Inject mySet value is: [ABC, DEF, GHI]\n\n```\nDaager生成的代码：\n\nDaggerMultiBindingsComponent的关键代码：\n```java\npublic final class DaggerMultiBindingsComponent implements MultiBindingsComponent {\n  private SetModuleA setModuleA;\n  //....\n  private Set<String> getSetOfString() {\n    return SetBuilder.<String>newSetBuilder(2)\n        .add(SetModuleA_ProvideOneStringFactory.proxyProvideOneString(setModuleA))\n        .addAll(SetModuleA_ProvideSomeStringsFactory.proxyProvideSomeStrings(setModuleA))\n        .build();\n  }\n\n  @Override\n  public void inject(FourthActivity fourthActivity) {\n    injectFourthActivity(fourthActivity);\n  }\n\n  private FourthActivity injectFourthActivity(FourthActivity instance) {\n    FourthActivity_MembersInjector.injectMySet(instance, getSetOfString());\n    return instance;\n  }\n}\n\n```\n可以看到getSetOfString()用来组装Set.\n\n##### Qualifier限定要注入的Set\n```java\n@Module\npublic class SetModuleB {\n    \n    @Provides\n    @ElementsIntoSet\n    @MyQualifier\n    public Set<String> provideSpecialSomeStrings() {\n        return new HashSet<>(Arrays.asList(\"Hello\", \"Dagger2\"));\n    }\n}\n\npublic class FourthActivity extends AppCompatActivity {\n\n    private static final String TAG = FourthActivity.class.getSimpleName();\n    @Inject\n    Set<String> mySet;\n\n    @Inject\n    @MyQualifier\n    Lazy<Set<String>> myOnlySet;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_third);\n        DaggerMultiBindingsComponent\n                .create().inject(this);\n\n    }\n\n    public void setBindings(View view) {\n        Log.d(TAG, \"Inject mySet value is\" + mySet.toString());\n        Log.d(TAG, \"Inject myOnlySet value is\" + myOnlySet.get().toString());\n\n    }\n}\nLogcat:\n2019-02-10 07:06:22.761 17005-17005/com.zhy.dagger2 D/FourthActivity: Inject mySet value is[ABC, DEF, GHI]\n2019-02-10 07:06:22.761 17005-17005/com.zhy.dagger2 D/FourthActivity: Inject myOnlySet value is[Hello, Dagger2]\n\n```\n* Lazy<Set<String>>不能写成 Set<Lazy<String>>\n\n#### Map multibindings\n使用@IntoMap\n\n##### Simple map keys\n* String,Class<?>,boxed primitives 作为key。\n* 枚举Enmu，更具体参数化类 作为key。\n```java\n@Module\npublic class MapModuleA {\n\n    @Provides\n    @IntoMap\n    @StringKey(\"foo\")\n    public Long provideStringKeyValue() {\n        return 100L;\n    }\n\n\n    @Provides\n    @IntoMap\n    @LongKey(200)\n    public String providePrimitivesKeyValue() {\n        return \"value for LongKey\";\n    }\n\n    @Provides\n    @IntoMap\n    @ClassKey(MyClassKey.class)\n    public String provideClassKeyValue() {\n        return \"value for MyClassKey\";\n    }\n}\n\n@Component(modules = {SetModuleA.class,\n        SetModuleB.class,\n        MapModuleA.class})\npublic interface MultiBindingsComponent {\n\n    void inject(FourthActivity fourthActivity);\n\n    Map<String, Long> longsByString();\n\n    Map<Long, String> stringsByLong();\n\n    Map<Class<?>, String> stringsByClass();\n}\n\n//FourthActivity\npublic void mapBindings(View view) {\n        Log.d(TAG, \"component.longsByString is\" + component.longsByString());\n        Log.d(TAG, \"component.stringsByLong is\" + component.stringsByLong());\n        Log.d(TAG, \"component.stringsByClass is\" + component.stringsByClass());\n\n    }\nLogcat:\n2019-02-10 07:33:47.832 17796-17796/com.zhy.dagger2 D/FourthActivity: component.longsByString is{foo=100}\n2019-02-10 07:33:47.833 17796-17796/com.zhy.dagger2 D/FourthActivity: component.stringsByLong is{200=value for LongKey}\n2019-02-10 07:33:47.835 17796-17796/com.zhy.dagger2 D/FourthActivity: component.stringsByClass is{class com.zhy.dagger2.multibindings.MyClassKey=value for MyClassKey}\n\n```\n对于具有枚举键或更具体参数化类的映射，要自定义key，使用@MapKey注解标注。\n\n```java\npublic enum Color {\n    RED, GREEN, BLUE\n}\n\n@MapKey\npublic @interface ColorKey {\n    Color value();\n}\n\n@MapKey\npublic @interface MyNumberClassKey {\n    Class<? extends Number> value();\n}\n\n@Module\npublic class MapModuleB {\n    @Provides\n    @IntoMap\n    @ColorKey(Color.BLUE)\n    static String provideColorValue() {\n        return \"value for BLUE\";\n    }\n\n    @Provides\n    @IntoMap\n    @MyNumberClassKey(BigDecimal.class)\n    static String provideBigDecimalValue() {\n        return \"value for BigDecimal\";\n    }\n}\n\n@Component(modules = {MapModuleB.class})\npublic interface MultiBindingsComponent {\n\n    void inject(FourthActivity fourthActivity);\n\n    Map<Color, String> myEnumStringMap();\n\n    Map<Class<? extends Number>, String> stringsByNumberClass();\n}\n\n//FourthActivity\nLog.d(TAG, \"component.myEnumStringMap is\" + component.myEnumStringMap());\nLog.d(TAG, \"component.stringsByNumberClass is\" + component.stringsByNumberClass());\n\nLogcat:\n2019-02-10 07:56:39.563 18668-18668/com.zhy.dagger2 D/FourthActivity: component.myEnumStringMap is{BLUE=value for BLUE}\n2019-02-10 07:56:39.563 18668-18668/com.zhy.dagger2 D/FourthActivity: component.stringsByNumberClass is{class java.math.BigDecimal=value for BigDecimal}\n```\n\n##### Complex map keys\n\nKey可以是多种形式的组合，这个时候@MapKey(unwrapValue = false)，unwrapValue值要设为false。\n实际开发用到很少。\n\n\n#### Declaring multibindings\n\n使用@Multibinds在抽象类的Module中声明。\n\n```java\n@Module\npublic abstract class MultibindsModule {\n\n    @Multibinds\n    abstract Set<Foo> aSet();\n\n    @Multibinds\n    @MyQualifier\n    abstract Set<Foo> aQualifiedSet();\n\n    @Multibinds\n    abstract Map<String, Foo> aMap();\n\n    @Multibinds\n    @MyQualifier\n    abstract Map<String, Foo> aQualifiedMap();\n\n    @Provides\n    static Object usesMultibindings(Set<Foo> set, @MyQualifier Map<String, Foo> map) {\n        return \"\";\n    }\n}\n\n```\n\n#### Inherited subcomponent multibindings\n\n* ChildComponent包含ParentComponent中multibindings的set或map\n\n```java\n@Subcomponent(modules = ChildModule.class)\npublic interface ChildComponent {\n    Set<String> strings();\n\n    Map<String, String> stringMap();\n}\n\n@Module\npublic class ChildModule {\n    @Provides\n    @IntoSet\n    static String string3() {\n        return \"child string 3\";\n    }\n\n    @Provides\n    @IntoSet\n    static String string4() {\n        return \"child string 4\";\n    }\n\n    @Provides\n    @IntoMap\n    @StringKey(\"c\")\n    static String stringC() {\n        return \"child string C\";\n    }\n\n    @Provides\n    @IntoMap\n    @StringKey(\"d\")\n    static String stringD() {\n        return \"child string D\";\n    }\n}\n\n\n\n@Component(modules = ParentModule.class)\npublic interface ParentComponent {\n\n    Set<String> strings();\n\n    Map<String, String> stringMap();\n\n    ChildComponent childComponent();\n}\n\n@Module\nclass ParentModule {\n    @Provides\n    @IntoSet\n    static String string1() {\n        return \"parent string 1\";\n    }\n\n    @Provides\n    @IntoSet\n    static String string2() {\n        return \"parent string 2\";\n    }\n\n    @Provides\n    @IntoMap\n    @StringKey(\"a\")\n    static String stringA() {\n        return \"parent string A\";\n    }\n\n    @Provides\n    @IntoMap\n    @StringKey(\"b\")\n    static String stringB() {\n        return \"parent string B\";\n    }\n}\n\n//FourthActivity\npublic void subComponentsBindings(View view) {\n\n    ParentComponent parentComponent = DaggerParentComponent.create();\n    ChildComponent childComponent = parentComponent.childComponent();\n\n    Log.d(TAG, \" parentComponent.strings is\" + parentComponent.strings());\n    Log.d(TAG, \" parentComponent.stringMap is\" + parentComponent.stringMap());\n\n    Log.d(TAG, \" childComponent.strings is\" + childComponent.strings());\n    Log.d(TAG, \" childComponent.stringMap is\" +childComponent.stringMap());\n}\n\nLogcat:\ncom.zhy.dagger2 D/FourthActivity:  parentComponent.strings is[parent string 1, parent string 2]\ncom.zhy.dagger2 D/FourthActivity:  parentComponent.stringMap is{a=parent string A, b=parent string B}\ncom.zhy.dagger2 D/FourthActivity:  childComponent.strings is[parent string 1, parent string 2, child string 4, child string 3]\ncom.zhy.dagger2 D/FourthActivity:  childComponent.stringMap is{a=parent string A, b=parent string B, c=child string C, d=child string D}\n\n```\n\n\n[Demo Github地址](https://github.com/zhy060307/dagger2)\n","source":"_posts/Dagger2（四）Multibindings.md","raw":"title: Dagger2（四）Multibindings\ndate: 2019-02-10 15:43:05\ncategories: Dagger2\ntags:  Dagger2\n---\n\n### Multibindings\n\n> Dagger allows you to bind several objects into a collection even when the objects are bound in different modules using multibindings.\n\nDagger的Multibindings功能可以生成集合，无需直接依赖其他单独的绑定。  \n\n#### Set multibindings\n\n可以将一个或多个值绑定到一个Set中。\n\n* IntoSet,提供单一的值。\n* ElementsIntoSet，提供subset。\n```java\n@Module\npublic class SetModuleA {\n\n    @Provides\n    @IntoSet\n    public String provideOneString() {\n        return \"ABC\";\n    }\n\n    @Provides\n    @ElementsIntoSet\n    public Set<String> provideSomeStrings() {\n        return new HashSet<>(Arrays.asList(\"DEF\", \"GHI\"));\n    }\n\n}\n```\n然后注入Set\n```java\npublic class FourthActivity extends AppCompatActivity {\n\n    @Inject\n    Set<String> mySet;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_third);\n        DaggerMultiBindingsComponent\n                .create().inject(this);\n\n    }\n\n    public void setBindings(View view) {\n        Log.d(\"Inject mySet value is\", mySet.toString());\n    }\n}\nLogcat:com.zhy.dagger2 D/Inject mySet value is: [ABC, DEF, GHI]\n\n```\nDaager生成的代码：\n\nDaggerMultiBindingsComponent的关键代码：\n```java\npublic final class DaggerMultiBindingsComponent implements MultiBindingsComponent {\n  private SetModuleA setModuleA;\n  //....\n  private Set<String> getSetOfString() {\n    return SetBuilder.<String>newSetBuilder(2)\n        .add(SetModuleA_ProvideOneStringFactory.proxyProvideOneString(setModuleA))\n        .addAll(SetModuleA_ProvideSomeStringsFactory.proxyProvideSomeStrings(setModuleA))\n        .build();\n  }\n\n  @Override\n  public void inject(FourthActivity fourthActivity) {\n    injectFourthActivity(fourthActivity);\n  }\n\n  private FourthActivity injectFourthActivity(FourthActivity instance) {\n    FourthActivity_MembersInjector.injectMySet(instance, getSetOfString());\n    return instance;\n  }\n}\n\n```\n可以看到getSetOfString()用来组装Set.\n\n##### Qualifier限定要注入的Set\n```java\n@Module\npublic class SetModuleB {\n    \n    @Provides\n    @ElementsIntoSet\n    @MyQualifier\n    public Set<String> provideSpecialSomeStrings() {\n        return new HashSet<>(Arrays.asList(\"Hello\", \"Dagger2\"));\n    }\n}\n\npublic class FourthActivity extends AppCompatActivity {\n\n    private static final String TAG = FourthActivity.class.getSimpleName();\n    @Inject\n    Set<String> mySet;\n\n    @Inject\n    @MyQualifier\n    Lazy<Set<String>> myOnlySet;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_third);\n        DaggerMultiBindingsComponent\n                .create().inject(this);\n\n    }\n\n    public void setBindings(View view) {\n        Log.d(TAG, \"Inject mySet value is\" + mySet.toString());\n        Log.d(TAG, \"Inject myOnlySet value is\" + myOnlySet.get().toString());\n\n    }\n}\nLogcat:\n2019-02-10 07:06:22.761 17005-17005/com.zhy.dagger2 D/FourthActivity: Inject mySet value is[ABC, DEF, GHI]\n2019-02-10 07:06:22.761 17005-17005/com.zhy.dagger2 D/FourthActivity: Inject myOnlySet value is[Hello, Dagger2]\n\n```\n* Lazy<Set<String>>不能写成 Set<Lazy<String>>\n\n#### Map multibindings\n使用@IntoMap\n\n##### Simple map keys\n* String,Class<?>,boxed primitives 作为key。\n* 枚举Enmu，更具体参数化类 作为key。\n```java\n@Module\npublic class MapModuleA {\n\n    @Provides\n    @IntoMap\n    @StringKey(\"foo\")\n    public Long provideStringKeyValue() {\n        return 100L;\n    }\n\n\n    @Provides\n    @IntoMap\n    @LongKey(200)\n    public String providePrimitivesKeyValue() {\n        return \"value for LongKey\";\n    }\n\n    @Provides\n    @IntoMap\n    @ClassKey(MyClassKey.class)\n    public String provideClassKeyValue() {\n        return \"value for MyClassKey\";\n    }\n}\n\n@Component(modules = {SetModuleA.class,\n        SetModuleB.class,\n        MapModuleA.class})\npublic interface MultiBindingsComponent {\n\n    void inject(FourthActivity fourthActivity);\n\n    Map<String, Long> longsByString();\n\n    Map<Long, String> stringsByLong();\n\n    Map<Class<?>, String> stringsByClass();\n}\n\n//FourthActivity\npublic void mapBindings(View view) {\n        Log.d(TAG, \"component.longsByString is\" + component.longsByString());\n        Log.d(TAG, \"component.stringsByLong is\" + component.stringsByLong());\n        Log.d(TAG, \"component.stringsByClass is\" + component.stringsByClass());\n\n    }\nLogcat:\n2019-02-10 07:33:47.832 17796-17796/com.zhy.dagger2 D/FourthActivity: component.longsByString is{foo=100}\n2019-02-10 07:33:47.833 17796-17796/com.zhy.dagger2 D/FourthActivity: component.stringsByLong is{200=value for LongKey}\n2019-02-10 07:33:47.835 17796-17796/com.zhy.dagger2 D/FourthActivity: component.stringsByClass is{class com.zhy.dagger2.multibindings.MyClassKey=value for MyClassKey}\n\n```\n对于具有枚举键或更具体参数化类的映射，要自定义key，使用@MapKey注解标注。\n\n```java\npublic enum Color {\n    RED, GREEN, BLUE\n}\n\n@MapKey\npublic @interface ColorKey {\n    Color value();\n}\n\n@MapKey\npublic @interface MyNumberClassKey {\n    Class<? extends Number> value();\n}\n\n@Module\npublic class MapModuleB {\n    @Provides\n    @IntoMap\n    @ColorKey(Color.BLUE)\n    static String provideColorValue() {\n        return \"value for BLUE\";\n    }\n\n    @Provides\n    @IntoMap\n    @MyNumberClassKey(BigDecimal.class)\n    static String provideBigDecimalValue() {\n        return \"value for BigDecimal\";\n    }\n}\n\n@Component(modules = {MapModuleB.class})\npublic interface MultiBindingsComponent {\n\n    void inject(FourthActivity fourthActivity);\n\n    Map<Color, String> myEnumStringMap();\n\n    Map<Class<? extends Number>, String> stringsByNumberClass();\n}\n\n//FourthActivity\nLog.d(TAG, \"component.myEnumStringMap is\" + component.myEnumStringMap());\nLog.d(TAG, \"component.stringsByNumberClass is\" + component.stringsByNumberClass());\n\nLogcat:\n2019-02-10 07:56:39.563 18668-18668/com.zhy.dagger2 D/FourthActivity: component.myEnumStringMap is{BLUE=value for BLUE}\n2019-02-10 07:56:39.563 18668-18668/com.zhy.dagger2 D/FourthActivity: component.stringsByNumberClass is{class java.math.BigDecimal=value for BigDecimal}\n```\n\n##### Complex map keys\n\nKey可以是多种形式的组合，这个时候@MapKey(unwrapValue = false)，unwrapValue值要设为false。\n实际开发用到很少。\n\n\n#### Declaring multibindings\n\n使用@Multibinds在抽象类的Module中声明。\n\n```java\n@Module\npublic abstract class MultibindsModule {\n\n    @Multibinds\n    abstract Set<Foo> aSet();\n\n    @Multibinds\n    @MyQualifier\n    abstract Set<Foo> aQualifiedSet();\n\n    @Multibinds\n    abstract Map<String, Foo> aMap();\n\n    @Multibinds\n    @MyQualifier\n    abstract Map<String, Foo> aQualifiedMap();\n\n    @Provides\n    static Object usesMultibindings(Set<Foo> set, @MyQualifier Map<String, Foo> map) {\n        return \"\";\n    }\n}\n\n```\n\n#### Inherited subcomponent multibindings\n\n* ChildComponent包含ParentComponent中multibindings的set或map\n\n```java\n@Subcomponent(modules = ChildModule.class)\npublic interface ChildComponent {\n    Set<String> strings();\n\n    Map<String, String> stringMap();\n}\n\n@Module\npublic class ChildModule {\n    @Provides\n    @IntoSet\n    static String string3() {\n        return \"child string 3\";\n    }\n\n    @Provides\n    @IntoSet\n    static String string4() {\n        return \"child string 4\";\n    }\n\n    @Provides\n    @IntoMap\n    @StringKey(\"c\")\n    static String stringC() {\n        return \"child string C\";\n    }\n\n    @Provides\n    @IntoMap\n    @StringKey(\"d\")\n    static String stringD() {\n        return \"child string D\";\n    }\n}\n\n\n\n@Component(modules = ParentModule.class)\npublic interface ParentComponent {\n\n    Set<String> strings();\n\n    Map<String, String> stringMap();\n\n    ChildComponent childComponent();\n}\n\n@Module\nclass ParentModule {\n    @Provides\n    @IntoSet\n    static String string1() {\n        return \"parent string 1\";\n    }\n\n    @Provides\n    @IntoSet\n    static String string2() {\n        return \"parent string 2\";\n    }\n\n    @Provides\n    @IntoMap\n    @StringKey(\"a\")\n    static String stringA() {\n        return \"parent string A\";\n    }\n\n    @Provides\n    @IntoMap\n    @StringKey(\"b\")\n    static String stringB() {\n        return \"parent string B\";\n    }\n}\n\n//FourthActivity\npublic void subComponentsBindings(View view) {\n\n    ParentComponent parentComponent = DaggerParentComponent.create();\n    ChildComponent childComponent = parentComponent.childComponent();\n\n    Log.d(TAG, \" parentComponent.strings is\" + parentComponent.strings());\n    Log.d(TAG, \" parentComponent.stringMap is\" + parentComponent.stringMap());\n\n    Log.d(TAG, \" childComponent.strings is\" + childComponent.strings());\n    Log.d(TAG, \" childComponent.stringMap is\" +childComponent.stringMap());\n}\n\nLogcat:\ncom.zhy.dagger2 D/FourthActivity:  parentComponent.strings is[parent string 1, parent string 2]\ncom.zhy.dagger2 D/FourthActivity:  parentComponent.stringMap is{a=parent string A, b=parent string B}\ncom.zhy.dagger2 D/FourthActivity:  childComponent.strings is[parent string 1, parent string 2, child string 4, child string 3]\ncom.zhy.dagger2 D/FourthActivity:  childComponent.stringMap is{a=parent string A, b=parent string B, c=child string C, d=child string D}\n\n```\n\n\n[Demo Github地址](https://github.com/zhy060307/dagger2)\n","slug":"Dagger2（四）Multibindings","published":1,"updated":"2019-02-10T07:47:36.824Z","_id":"cjryltlb6000lncaqdduq5oog","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Multibindings\"><a href=\"#Multibindings\" class=\"headerlink\" title=\"Multibindings\"></a>Multibindings</h3><blockquote>\n<p>Dagger allows you to bind several objects into a collection even when the objects are bound in different modules using multibindings.</p>\n</blockquote>\n<p>Dagger的Multibindings功能可以生成集合，无需直接依赖其他单独的绑定。  </p>\n<h4 id=\"Set-multibindings\"><a href=\"#Set-multibindings\" class=\"headerlink\" title=\"Set multibindings\"></a>Set multibindings</h4><p>可以将一个或多个值绑定到一个Set中。</p>\n<ul>\n<li>IntoSet,提供单一的值。</li>\n<li>ElementsIntoSet，提供subset。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SetModuleA</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoSet</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">provideOneString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"ABC\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@ElementsIntoSet</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">provideSomeStrings</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HashSet&lt;&gt;(Arrays.asList(<span class=\"string\">\"DEF\"</span>, <span class=\"string\">\"GHI\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后注入Set<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FourthActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    Set&lt;String&gt; mySet;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_third);</div><div class=\"line\">        DaggerMultiBindingsComponent</div><div class=\"line\">                .create().inject(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBindings</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        Log.d(<span class=\"string\">\"Inject mySet value is\"</span>, mySet.toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Logcat:com.zhy.dagger2 D/Inject mySet value is: [ABC, DEF, GHI]</div></pre></td></tr></table></figure></p>\n<p>Daager生成的代码：</p>\n<p>DaggerMultiBindingsComponent的关键代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaggerMultiBindingsComponent</span> <span class=\"keyword\">implements</span> <span class=\"title\">MultiBindingsComponent</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> SetModuleA setModuleA;</div><div class=\"line\">  <span class=\"comment\">//....</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> Set&lt;String&gt; <span class=\"title\">getSetOfString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> SetBuilder.&lt;String&gt;newSetBuilder(<span class=\"number\">2</span>)</div><div class=\"line\">        .add(SetModuleA_ProvideOneStringFactory.proxyProvideOneString(setModuleA))</div><div class=\"line\">        .addAll(SetModuleA_ProvideSomeStringsFactory.proxyProvideSomeStrings(setModuleA))</div><div class=\"line\">        .build();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(FourthActivity fourthActivity)</span> </span>&#123;</div><div class=\"line\">    injectFourthActivity(fourthActivity);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> FourthActivity <span class=\"title\">injectFourthActivity</span><span class=\"params\">(FourthActivity instance)</span> </span>&#123;</div><div class=\"line\">    FourthActivity_MembersInjector.injectMySet(instance, getSetOfString());</div><div class=\"line\">    <span class=\"keyword\">return</span> instance;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到getSetOfString()用来组装Set.</p>\n<h5 id=\"Qualifier限定要注入的Set\"><a href=\"#Qualifier限定要注入的Set\" class=\"headerlink\" title=\"Qualifier限定要注入的Set\"></a>Qualifier限定要注入的Set</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SetModuleB</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@ElementsIntoSet</span></div><div class=\"line\">    <span class=\"meta\">@MyQualifier</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">provideSpecialSomeStrings</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HashSet&lt;&gt;(Arrays.asList(<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"Dagger2\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FourthActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = FourthActivity.class.getSimpleName();</div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    Set&lt;String&gt; mySet;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    <span class=\"meta\">@MyQualifier</span></div><div class=\"line\">    Lazy&lt;Set&lt;String&gt;&gt; myOnlySet;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_third);</div><div class=\"line\">        DaggerMultiBindingsComponent</div><div class=\"line\">                .create().inject(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBindings</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"Inject mySet value is\"</span> + mySet.toString());</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"Inject myOnlySet value is\"</span> + myOnlySet.get().toString());</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Logcat:</div><div class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">02</span>-<span class=\"number\">10</span> <span class=\"number\">07</span>:<span class=\"number\">06</span>:<span class=\"number\">22.761</span> <span class=\"number\">17005</span>-<span class=\"number\">17005</span>/com.zhy.dagger2 D/FourthActivity: Inject mySet value is[ABC, DEF, GHI]</div><div class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">02</span>-<span class=\"number\">10</span> <span class=\"number\">07</span>:<span class=\"number\">06</span>:<span class=\"number\">22.761</span> <span class=\"number\">17005</span>-<span class=\"number\">17005</span>/com.zhy.dagger2 D/FourthActivity: Inject myOnlySet value is[Hello, Dagger2]</div></pre></td></tr></table></figure>\n<ul>\n<li>Lazy<set<string>&gt;不能写成 Set<lazy<string>&gt;</lazy<string></set<string></li>\n</ul>\n<h4 id=\"Map-multibindings\"><a href=\"#Map-multibindings\" class=\"headerlink\" title=\"Map multibindings\"></a>Map multibindings</h4><p>使用@IntoMap</p>\n<h5 id=\"Simple-map-keys\"><a href=\"#Simple-map-keys\" class=\"headerlink\" title=\"Simple map keys\"></a>Simple map keys</h5><ul>\n<li>String,Class&lt;?&gt;,boxed primitives 作为key。</li>\n<li>枚举Enmu，更具体参数化类 作为key。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapModuleA</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoMap</span></div><div class=\"line\">    <span class=\"meta\">@StringKey</span>(<span class=\"string\">\"foo\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">provideStringKeyValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">100L</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoMap</span></div><div class=\"line\">    <span class=\"meta\">@LongKey</span>(<span class=\"number\">200</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">providePrimitivesKeyValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"value for LongKey\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoMap</span></div><div class=\"line\">    <span class=\"meta\">@ClassKey</span>(MyClassKey.class)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">provideClassKeyValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"value for MyClassKey\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules = &#123;SetModuleA.class,</div><div class=\"line\">        SetModuleB.class,</div><div class=\"line\">        MapModuleA.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MultiBindingsComponent</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(FourthActivity fourthActivity)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">Map&lt;String, Long&gt; <span class=\"title\">longsByString</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">Map&lt;Long, String&gt; <span class=\"title\">stringsByLong</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    Map&lt;Class&lt;?&gt;, String&gt; stringsByClass();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//FourthActivity</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mapBindings</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"component.longsByString is\"</span> + component.longsByString());</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"component.stringsByLong is\"</span> + component.stringsByLong());</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"component.stringsByClass is\"</span> + component.stringsByClass());</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">Logcat:</div><div class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">02</span>-<span class=\"number\">10</span> <span class=\"number\">07</span>:<span class=\"number\">33</span>:<span class=\"number\">47.832</span> <span class=\"number\">17796</span>-<span class=\"number\">17796</span>/com.zhy.dagger2 D/FourthActivity: component.longsByString is&#123;foo=<span class=\"number\">100</span>&#125;</div><div class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">02</span>-<span class=\"number\">10</span> <span class=\"number\">07</span>:<span class=\"number\">33</span>:<span class=\"number\">47.833</span> <span class=\"number\">17796</span>-<span class=\"number\">17796</span>/com.zhy.dagger2 D/FourthActivity: component.stringsByLong is&#123;<span class=\"number\">200</span>=value <span class=\"keyword\">for</span> LongKey&#125;</div><div class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">02</span>-<span class=\"number\">10</span> <span class=\"number\">07</span>:<span class=\"number\">33</span>:<span class=\"number\">47.835</span> <span class=\"number\">17796</span>-<span class=\"number\">17796</span>/com.zhy.dagger2 D/FourthActivity: component.stringsByClass is&#123;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">zhy</span>.<span class=\"title\">dagger2</span>.<span class=\"title\">multibindings</span>.<span class=\"title\">MyClassKey</span></span>=value <span class=\"keyword\">for</span> MyClassKey&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>对于具有枚举键或更具体参数化类的映射，要自定义key，使用@MapKey注解标注。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Color &#123;</div><div class=\"line\">    RED, GREEN, BLUE</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@MapKey</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ColorKey &#123;</div><div class=\"line\">    <span class=\"function\">Color <span class=\"title\">value</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@MapKey</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyNumberClassKey &#123;</div><div class=\"line\">    Class&lt;? extends Number&gt; value();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapModuleB</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoMap</span></div><div class=\"line\">    <span class=\"meta\">@ColorKey</span>(Color.BLUE)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">provideColorValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"value for BLUE\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoMap</span></div><div class=\"line\">    <span class=\"meta\">@MyNumberClassKey</span>(BigDecimal.class)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">provideBigDecimalValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"value for BigDecimal\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules = &#123;MapModuleB.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MultiBindingsComponent</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(FourthActivity fourthActivity)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">Map&lt;Color, String&gt; <span class=\"title\">myEnumStringMap</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    Map&lt;Class&lt;? extends Number&gt;, String&gt; stringsByNumberClass();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//FourthActivity</span></div><div class=\"line\">Log.d(TAG, <span class=\"string\">\"component.myEnumStringMap is\"</span> + component.myEnumStringMap());</div><div class=\"line\">Log.d(TAG, <span class=\"string\">\"component.stringsByNumberClass is\"</span> + component.stringsByNumberClass());</div><div class=\"line\"></div><div class=\"line\">Logcat:</div><div class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">02</span>-<span class=\"number\">10</span> <span class=\"number\">07</span>:<span class=\"number\">56</span>:<span class=\"number\">39.563</span> <span class=\"number\">18668</span>-<span class=\"number\">18668</span>/com.zhy.dagger2 D/FourthActivity: component.myEnumStringMap is&#123;BLUE=value <span class=\"keyword\">for</span> BLUE&#125;</div><div class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">02</span>-<span class=\"number\">10</span> <span class=\"number\">07</span>:<span class=\"number\">56</span>:<span class=\"number\">39.563</span> <span class=\"number\">18668</span>-<span class=\"number\">18668</span>/com.zhy.dagger2 D/FourthActivity: component.stringsByNumberClass is&#123;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">java</span>.<span class=\"title\">math</span>.<span class=\"title\">BigDecimal</span></span>=value <span class=\"keyword\">for</span> BigDecimal&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Complex-map-keys\"><a href=\"#Complex-map-keys\" class=\"headerlink\" title=\"Complex map keys\"></a>Complex map keys</h5><p>Key可以是多种形式的组合，这个时候@MapKey(unwrapValue = false)，unwrapValue值要设为false。<br>实际开发用到很少。</p>\n<h4 id=\"Declaring-multibindings\"><a href=\"#Declaring-multibindings\" class=\"headerlink\" title=\"Declaring multibindings\"></a>Declaring multibindings</h4><p>使用@Multibinds在抽象类的Module中声明。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultibindsModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Multibinds</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> Set&lt;Foo&gt; <span class=\"title\">aSet</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Multibinds</span></div><div class=\"line\">    <span class=\"meta\">@MyQualifier</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> Set&lt;Foo&gt; <span class=\"title\">aQualifiedSet</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Multibinds</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> Map&lt;String, Foo&gt; <span class=\"title\">aMap</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Multibinds</span></div><div class=\"line\">    <span class=\"meta\">@MyQualifier</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> Map&lt;String, Foo&gt; <span class=\"title\">aQualifiedMap</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Object <span class=\"title\">usesMultibindings</span><span class=\"params\">(Set&lt;Foo&gt; set, @MyQualifier Map&lt;String, Foo&gt; map)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Inherited-subcomponent-multibindings\"><a href=\"#Inherited-subcomponent-multibindings\" class=\"headerlink\" title=\"Inherited subcomponent multibindings\"></a>Inherited subcomponent multibindings</h4><ul>\n<li>ChildComponent包含ParentComponent中multibindings的set或map</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Subcomponent</span>(modules = ChildModule.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ChildComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\">Set&lt;String&gt; <span class=\"title\">strings</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">Map&lt;String, String&gt; <span class=\"title\">stringMap</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildModule</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoSet</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">string3</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"child string 3\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoSet</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">string4</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"child string 4\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoMap</span></div><div class=\"line\">    <span class=\"meta\">@StringKey</span>(<span class=\"string\">\"c\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">stringC</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"child string C\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoMap</span></div><div class=\"line\">    <span class=\"meta\">@StringKey</span>(<span class=\"string\">\"d\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">stringD</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"child string D\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules = ParentModule.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ParentComponent</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">Set&lt;String&gt; <span class=\"title\">strings</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">Map&lt;String, String&gt; <span class=\"title\">stringMap</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">ChildComponent <span class=\"title\">childComponent</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParentModule</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoSet</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">string1</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"parent string 1\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoSet</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">string2</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"parent string 2\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoMap</span></div><div class=\"line\">    <span class=\"meta\">@StringKey</span>(<span class=\"string\">\"a\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">stringA</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"parent string A\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoMap</span></div><div class=\"line\">    <span class=\"meta\">@StringKey</span>(<span class=\"string\">\"b\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">stringB</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"parent string B\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//FourthActivity</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subComponentsBindings</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    ParentComponent parentComponent = DaggerParentComponent.create();</div><div class=\"line\">    ChildComponent childComponent = parentComponent.childComponent();</div><div class=\"line\"></div><div class=\"line\">    Log.d(TAG, <span class=\"string\">\" parentComponent.strings is\"</span> + parentComponent.strings());</div><div class=\"line\">    Log.d(TAG, <span class=\"string\">\" parentComponent.stringMap is\"</span> + parentComponent.stringMap());</div><div class=\"line\"></div><div class=\"line\">    Log.d(TAG, <span class=\"string\">\" childComponent.strings is\"</span> + childComponent.strings());</div><div class=\"line\">    Log.d(TAG, <span class=\"string\">\" childComponent.stringMap is\"</span> +childComponent.stringMap());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Logcat:</div><div class=\"line\">com.zhy.dagger2 D/FourthActivity:  parentComponent.strings is[parent string <span class=\"number\">1</span>, parent string <span class=\"number\">2</span>]</div><div class=\"line\">com.zhy.dagger2 D/FourthActivity:  parentComponent.stringMap is&#123;a=parent string A, b=parent string B&#125;</div><div class=\"line\">com.zhy.dagger2 D/FourthActivity:  childComponent.strings is[parent string <span class=\"number\">1</span>, parent string <span class=\"number\">2</span>, child string <span class=\"number\">4</span>, child string <span class=\"number\">3</span>]</div><div class=\"line\">com.zhy.dagger2 D/FourthActivity:  childComponent.stringMap is&#123;a=parent string A, b=parent string B, c=child string C, d=child string D&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/zhy060307/dagger2\" target=\"_blank\" rel=\"external\">Demo Github地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Multibindings\"><a href=\"#Multibindings\" class=\"headerlink\" title=\"Multibindings\"></a>Multibindings</h3><blockquote>\n<p>Dagger allows you to bind several objects into a collection even when the objects are bound in different modules using multibindings.</p>\n</blockquote>\n<p>Dagger的Multibindings功能可以生成集合，无需直接依赖其他单独的绑定。  </p>\n<h4 id=\"Set-multibindings\"><a href=\"#Set-multibindings\" class=\"headerlink\" title=\"Set multibindings\"></a>Set multibindings</h4><p>可以将一个或多个值绑定到一个Set中。</p>\n<ul>\n<li>IntoSet,提供单一的值。</li>\n<li>ElementsIntoSet，提供subset。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SetModuleA</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoSet</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">provideOneString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"ABC\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@ElementsIntoSet</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">provideSomeStrings</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HashSet&lt;&gt;(Arrays.asList(<span class=\"string\">\"DEF\"</span>, <span class=\"string\">\"GHI\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>然后注入Set<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FourthActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    Set&lt;String&gt; mySet;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_third);</div><div class=\"line\">        DaggerMultiBindingsComponent</div><div class=\"line\">                .create().inject(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBindings</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        Log.d(<span class=\"string\">\"Inject mySet value is\"</span>, mySet.toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Logcat:com.zhy.dagger2 D/Inject mySet value is: [ABC, DEF, GHI]</div></pre></td></tr></table></figure></p>\n<p>Daager生成的代码：</p>\n<p>DaggerMultiBindingsComponent的关键代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DaggerMultiBindingsComponent</span> <span class=\"keyword\">implements</span> <span class=\"title\">MultiBindingsComponent</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">private</span> SetModuleA setModuleA;</div><div class=\"line\">  <span class=\"comment\">//....</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> Set&lt;String&gt; <span class=\"title\">getSetOfString</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> SetBuilder.&lt;String&gt;newSetBuilder(<span class=\"number\">2</span>)</div><div class=\"line\">        .add(SetModuleA_ProvideOneStringFactory.proxyProvideOneString(setModuleA))</div><div class=\"line\">        .addAll(SetModuleA_ProvideSomeStringsFactory.proxyProvideSomeStrings(setModuleA))</div><div class=\"line\">        .build();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(FourthActivity fourthActivity)</span> </span>&#123;</div><div class=\"line\">    injectFourthActivity(fourthActivity);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> FourthActivity <span class=\"title\">injectFourthActivity</span><span class=\"params\">(FourthActivity instance)</span> </span>&#123;</div><div class=\"line\">    FourthActivity_MembersInjector.injectMySet(instance, getSetOfString());</div><div class=\"line\">    <span class=\"keyword\">return</span> instance;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以看到getSetOfString()用来组装Set.</p>\n<h5 id=\"Qualifier限定要注入的Set\"><a href=\"#Qualifier限定要注入的Set\" class=\"headerlink\" title=\"Qualifier限定要注入的Set\"></a>Qualifier限定要注入的Set</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SetModuleB</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@ElementsIntoSet</span></div><div class=\"line\">    <span class=\"meta\">@MyQualifier</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Set&lt;String&gt; <span class=\"title\">provideSpecialSomeStrings</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HashSet&lt;&gt;(Arrays.asList(<span class=\"string\">\"Hello\"</span>, <span class=\"string\">\"Dagger2\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FourthActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = FourthActivity.class.getSimpleName();</div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    Set&lt;String&gt; mySet;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    <span class=\"meta\">@MyQualifier</span></div><div class=\"line\">    Lazy&lt;Set&lt;String&gt;&gt; myOnlySet;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_third);</div><div class=\"line\">        DaggerMultiBindingsComponent</div><div class=\"line\">                .create().inject(<span class=\"keyword\">this</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setBindings</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"Inject mySet value is\"</span> + mySet.toString());</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"Inject myOnlySet value is\"</span> + myOnlySet.get().toString());</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Logcat:</div><div class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">02</span>-<span class=\"number\">10</span> <span class=\"number\">07</span>:<span class=\"number\">06</span>:<span class=\"number\">22.761</span> <span class=\"number\">17005</span>-<span class=\"number\">17005</span>/com.zhy.dagger2 D/FourthActivity: Inject mySet value is[ABC, DEF, GHI]</div><div class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">02</span>-<span class=\"number\">10</span> <span class=\"number\">07</span>:<span class=\"number\">06</span>:<span class=\"number\">22.761</span> <span class=\"number\">17005</span>-<span class=\"number\">17005</span>/com.zhy.dagger2 D/FourthActivity: Inject myOnlySet value is[Hello, Dagger2]</div></pre></td></tr></table></figure>\n<ul>\n<li>Lazy<set<string>&gt;不能写成 Set<lazy<string>&gt;</lazy<string></set<string></li>\n</ul>\n<h4 id=\"Map-multibindings\"><a href=\"#Map-multibindings\" class=\"headerlink\" title=\"Map multibindings\"></a>Map multibindings</h4><p>使用@IntoMap</p>\n<h5 id=\"Simple-map-keys\"><a href=\"#Simple-map-keys\" class=\"headerlink\" title=\"Simple map keys\"></a>Simple map keys</h5><ul>\n<li>String,Class&lt;?&gt;,boxed primitives 作为key。</li>\n<li>枚举Enmu，更具体参数化类 作为key。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapModuleA</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoMap</span></div><div class=\"line\">    <span class=\"meta\">@StringKey</span>(<span class=\"string\">\"foo\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">provideStringKeyValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">100L</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoMap</span></div><div class=\"line\">    <span class=\"meta\">@LongKey</span>(<span class=\"number\">200</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">providePrimitivesKeyValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"value for LongKey\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoMap</span></div><div class=\"line\">    <span class=\"meta\">@ClassKey</span>(MyClassKey.class)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">provideClassKeyValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"value for MyClassKey\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules = &#123;SetModuleA.class,</div><div class=\"line\">        SetModuleB.class,</div><div class=\"line\">        MapModuleA.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MultiBindingsComponent</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(FourthActivity fourthActivity)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">Map&lt;String, Long&gt; <span class=\"title\">longsByString</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">Map&lt;Long, String&gt; <span class=\"title\">stringsByLong</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    Map&lt;Class&lt;?&gt;, String&gt; stringsByClass();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//FourthActivity</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mapBindings</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"component.longsByString is\"</span> + component.longsByString());</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"component.stringsByLong is\"</span> + component.stringsByLong());</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"component.stringsByClass is\"</span> + component.stringsByClass());</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">Logcat:</div><div class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">02</span>-<span class=\"number\">10</span> <span class=\"number\">07</span>:<span class=\"number\">33</span>:<span class=\"number\">47.832</span> <span class=\"number\">17796</span>-<span class=\"number\">17796</span>/com.zhy.dagger2 D/FourthActivity: component.longsByString is&#123;foo=<span class=\"number\">100</span>&#125;</div><div class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">02</span>-<span class=\"number\">10</span> <span class=\"number\">07</span>:<span class=\"number\">33</span>:<span class=\"number\">47.833</span> <span class=\"number\">17796</span>-<span class=\"number\">17796</span>/com.zhy.dagger2 D/FourthActivity: component.stringsByLong is&#123;<span class=\"number\">200</span>=value <span class=\"keyword\">for</span> LongKey&#125;</div><div class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">02</span>-<span class=\"number\">10</span> <span class=\"number\">07</span>:<span class=\"number\">33</span>:<span class=\"number\">47.835</span> <span class=\"number\">17796</span>-<span class=\"number\">17796</span>/com.zhy.dagger2 D/FourthActivity: component.stringsByClass is&#123;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">zhy</span>.<span class=\"title\">dagger2</span>.<span class=\"title\">multibindings</span>.<span class=\"title\">MyClassKey</span></span>=value <span class=\"keyword\">for</span> MyClassKey&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>对于具有枚举键或更具体参数化类的映射，要自定义key，使用@MapKey注解标注。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Color &#123;</div><div class=\"line\">    RED, GREEN, BLUE</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@MapKey</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> ColorKey &#123;</div><div class=\"line\">    <span class=\"function\">Color <span class=\"title\">value</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@MapKey</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyNumberClassKey &#123;</div><div class=\"line\">    Class&lt;? extends Number&gt; value();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MapModuleB</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoMap</span></div><div class=\"line\">    <span class=\"meta\">@ColorKey</span>(Color.BLUE)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">provideColorValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"value for BLUE\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoMap</span></div><div class=\"line\">    <span class=\"meta\">@MyNumberClassKey</span>(BigDecimal.class)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">provideBigDecimalValue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"value for BigDecimal\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules = &#123;MapModuleB.class&#125;)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MultiBindingsComponent</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(FourthActivity fourthActivity)</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">Map&lt;Color, String&gt; <span class=\"title\">myEnumStringMap</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    Map&lt;Class&lt;? extends Number&gt;, String&gt; stringsByNumberClass();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//FourthActivity</span></div><div class=\"line\">Log.d(TAG, <span class=\"string\">\"component.myEnumStringMap is\"</span> + component.myEnumStringMap());</div><div class=\"line\">Log.d(TAG, <span class=\"string\">\"component.stringsByNumberClass is\"</span> + component.stringsByNumberClass());</div><div class=\"line\"></div><div class=\"line\">Logcat:</div><div class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">02</span>-<span class=\"number\">10</span> <span class=\"number\">07</span>:<span class=\"number\">56</span>:<span class=\"number\">39.563</span> <span class=\"number\">18668</span>-<span class=\"number\">18668</span>/com.zhy.dagger2 D/FourthActivity: component.myEnumStringMap is&#123;BLUE=value <span class=\"keyword\">for</span> BLUE&#125;</div><div class=\"line\"><span class=\"number\">2019</span>-<span class=\"number\">02</span>-<span class=\"number\">10</span> <span class=\"number\">07</span>:<span class=\"number\">56</span>:<span class=\"number\">39.563</span> <span class=\"number\">18668</span>-<span class=\"number\">18668</span>/com.zhy.dagger2 D/FourthActivity: component.stringsByNumberClass is&#123;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">java</span>.<span class=\"title\">math</span>.<span class=\"title\">BigDecimal</span></span>=value <span class=\"keyword\">for</span> BigDecimal&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"Complex-map-keys\"><a href=\"#Complex-map-keys\" class=\"headerlink\" title=\"Complex map keys\"></a>Complex map keys</h5><p>Key可以是多种形式的组合，这个时候@MapKey(unwrapValue = false)，unwrapValue值要设为false。<br>实际开发用到很少。</p>\n<h4 id=\"Declaring-multibindings\"><a href=\"#Declaring-multibindings\" class=\"headerlink\" title=\"Declaring multibindings\"></a>Declaring multibindings</h4><p>使用@Multibinds在抽象类的Module中声明。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultibindsModule</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Multibinds</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> Set&lt;Foo&gt; <span class=\"title\">aSet</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Multibinds</span></div><div class=\"line\">    <span class=\"meta\">@MyQualifier</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> Set&lt;Foo&gt; <span class=\"title\">aQualifiedSet</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Multibinds</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> Map&lt;String, Foo&gt; <span class=\"title\">aMap</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Multibinds</span></div><div class=\"line\">    <span class=\"meta\">@MyQualifier</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> Map&lt;String, Foo&gt; <span class=\"title\">aQualifiedMap</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> Object <span class=\"title\">usesMultibindings</span><span class=\"params\">(Set&lt;Foo&gt; set, @MyQualifier Map&lt;String, Foo&gt; map)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Inherited-subcomponent-multibindings\"><a href=\"#Inherited-subcomponent-multibindings\" class=\"headerlink\" title=\"Inherited subcomponent multibindings\"></a>Inherited subcomponent multibindings</h4><ul>\n<li>ChildComponent包含ParentComponent中multibindings的set或map</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Subcomponent</span>(modules = ChildModule.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ChildComponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\">Set&lt;String&gt; <span class=\"title\">strings</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">Map&lt;String, String&gt; <span class=\"title\">stringMap</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildModule</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoSet</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">string3</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"child string 3\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoSet</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">string4</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"child string 4\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoMap</span></div><div class=\"line\">    <span class=\"meta\">@StringKey</span>(<span class=\"string\">\"c\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">stringC</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"child string C\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoMap</span></div><div class=\"line\">    <span class=\"meta\">@StringKey</span>(<span class=\"string\">\"d\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">stringD</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"child string D\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Component</span>(modules = ParentModule.class)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ParentComponent</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">Set&lt;String&gt; <span class=\"title\">strings</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">Map&lt;String, String&gt; <span class=\"title\">stringMap</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">ChildComponent <span class=\"title\">childComponent</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Module</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParentModule</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoSet</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">string1</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"parent string 1\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoSet</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">string2</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"parent string 2\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoMap</span></div><div class=\"line\">    <span class=\"meta\">@StringKey</span>(<span class=\"string\">\"a\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">stringA</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"parent string A\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"meta\">@IntoMap</span></div><div class=\"line\">    <span class=\"meta\">@StringKey</span>(<span class=\"string\">\"b\"</span>)</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">stringB</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"parent string B\"</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//FourthActivity</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subComponentsBindings</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    ParentComponent parentComponent = DaggerParentComponent.create();</div><div class=\"line\">    ChildComponent childComponent = parentComponent.childComponent();</div><div class=\"line\"></div><div class=\"line\">    Log.d(TAG, <span class=\"string\">\" parentComponent.strings is\"</span> + parentComponent.strings());</div><div class=\"line\">    Log.d(TAG, <span class=\"string\">\" parentComponent.stringMap is\"</span> + parentComponent.stringMap());</div><div class=\"line\"></div><div class=\"line\">    Log.d(TAG, <span class=\"string\">\" childComponent.strings is\"</span> + childComponent.strings());</div><div class=\"line\">    Log.d(TAG, <span class=\"string\">\" childComponent.stringMap is\"</span> +childComponent.stringMap());</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Logcat:</div><div class=\"line\">com.zhy.dagger2 D/FourthActivity:  parentComponent.strings is[parent string <span class=\"number\">1</span>, parent string <span class=\"number\">2</span>]</div><div class=\"line\">com.zhy.dagger2 D/FourthActivity:  parentComponent.stringMap is&#123;a=parent string A, b=parent string B&#125;</div><div class=\"line\">com.zhy.dagger2 D/FourthActivity:  childComponent.strings is[parent string <span class=\"number\">1</span>, parent string <span class=\"number\">2</span>, child string <span class=\"number\">4</span>, child string <span class=\"number\">3</span>]</div><div class=\"line\">com.zhy.dagger2 D/FourthActivity:  childComponent.stringMap is&#123;a=parent string A, b=parent string B, c=child string C, d=child string D&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/zhy060307/dagger2\" target=\"_blank\" rel=\"external\">Demo Github地址</a></p>\n"},{"title":"Mysql 连接查询","date":"2018-06-19T01:40:50.000Z","_content":"[Join 查询有三种](http://www.runoob.com/mysql/mysql-join.html)\n\n* INNER JOIN （内连接|等值连接） ： 获取连个表中 满足字段匹配关系的记录，相当取交集。\n* LEFT JOIN (左连接) ：查询左边所有值，满足所有匹配关系的记录，即使右表中没有对应的的匹配记录。\n* RIGHT JOIN （有连接）\n：和LEFT JOIN 相反，查询右边的所有值，即使左边中没有对应的匹配记录。\n\n两张表如下\n  \n    Database changed\n    MariaDB [test_db]> show tables;\n    +-------------------+\n    | Tables_in_test_db |\n    +-------------------+\n    | runoob_tbl        |\n    | tcount_tbl        |\n    +-------------------+\n    \n    \n    MariaDB [test_db]> select * from runoob_tbl;\n    +-----------+---------------+---------------+-----------------+\n    | runoob_id | runoob_title  | runoob_author | submission_date |\n    +-----------+---------------+---------------+-----------------+\n    |         1 | 学习 PHP      | 菜鸟教程      | 2017-04-12      |\n    |         2 | 学习 MySQL    | 菜鸟教程      | 2017-04-12      |\n    |         3 | 学习 Java     | RUNOOB.COM    | 2015-05-01      |\n    |         4 | 学习 Python   | RUNOOB.COM    | 2016-03-06      |\n    |         5 | 学习 C        | FK            | 2017-04-05      |\n    +-----------+---------------+---------------+-----------------+\n    \n    MariaDB [test_db]> select * from tcount_tbl;\n    +---------------+--------------+\n    | runoob_author | runoob_count |\n    +---------------+--------------+\n    | 菜鸟教程      |           10 |\n    | RUNOOB.COM    |           20 |\n    | Google        |           22 |\n    +---------------+--------------+\n\n#### INNER JOIN （可以使用INNER,直接使用JOIN）\n\n\n```\nselect a.runoob_id,a.runoob_title,a.runoob_author,b.runoob_count from runoob_tbl a inner join tcount_tbl b on a.runoob_author = b.runoob_author\n```\n\n    +-----------+---------------+---------------+--------------+\n    | runoob_id | runoob_title  | runoob_author | runoob_count |\n    +-----------+---------------+---------------+--------------+\n    |         1 | 学习 PHP      | 菜鸟教程      |           10 |\n    |         2 | 学习 MySQL    | 菜鸟教程      |           10 |\n    |         3 | 学习 Java     | RUNOOB.COM    |           20 |\n    |         4 | 学习 Python   | RUNOOB.COM    |           20 |\n    +-----------+---------------+---------------+--------------+\n\n可以看出查询的记录是满足 on a.runoob_author = b.runoob_author 的交集。\n\n* INNER JOIN 可以用等价的 WHERE子句替换。\n等价的SQL：\n\n```\nselect a.runoob_id,a.runoob_title,a.runoob_author,b.runoob_count from runoob_tbl a , tcount_tbl b where a.runoob_author = b.runoob_author;\n\n```\n    \n    MariaDB [test_db]> select \t\t a.runoob_id,a.runoob_title,a.runoob_author,b.runoob_count from runoob_tbl a , tcount_tbl b where a.runoob_author = b.runoob_author;\n    +-----------+---------------+---------------+--------------+\n    | runoob_id | runoob_title  | runoob_author | runoob_count |\n    +-----------+---------------+---------------+--------------+\n    |         1 | 学习 PHP      | 菜鸟教程      |           10 |\n    |         2 | 学习 MySQL    | 菜鸟教程      |           10 |\n    |         3 | 学习 Java     | RUNOOB.COM    |           20 |\n    |         4 | 学习 Python   | RUNOOB.COM    |           20 |\n    +-----------+---------------+---------------+--------------+\n\n#### LEFT JOIN\n\n```\nMariaDB [test_db]> select a.runoob_id,a.runoob_author,b.runoob_count from runoob_tbl a left join tcount_tbl b on  a.runoob_author = b.runoob_author;\n+-----------+---------------+--------------+\n| runoob_id | runoob_author | runoob_count |\n+-----------+---------------+--------------+\n|         1 | 菜鸟教程      |           10 |\n|         2 | 菜鸟教程      |           10 |\n|         3 | RUNOOB.COM    |           20 |\n|         4 | RUNOOB.COM    |           20 |\n|         5 | FK            |         NULL |\n+-----------+---------------+--------------+\n```\n\n####  RIGHT JOIN\n    \n    MariaDB [test_db]> select a.runoob_id,a.runoob_author,b.runoob_count from runoob_tbl a right join tcount_tbl b on  a.runoob_author = b.runoob_author;\n    +-----------+---------------+--------------+\n    | runoob_id | runoob_author | runoob_count |\n    +-----------+---------------+--------------+\n    |         1 | 菜鸟教程      |           10 |\n    |         2 | 菜鸟教程      |           10 |\n    |         3 | RUNOOB.COM    |           20 |\n    |         4 | RUNOOB.COM    |           20 |\n    |      NULL | NULL          |           22 |\n    +-----------+---------------+--------------+\n\n","source":"_posts/Mysql-连接查询.md","raw":"title: Mysql 连接查询\ndate: 2018-06-19 09:40:50\ncategories: SQL\ntags: Mysql\n---\n[Join 查询有三种](http://www.runoob.com/mysql/mysql-join.html)\n\n* INNER JOIN （内连接|等值连接） ： 获取连个表中 满足字段匹配关系的记录，相当取交集。\n* LEFT JOIN (左连接) ：查询左边所有值，满足所有匹配关系的记录，即使右表中没有对应的的匹配记录。\n* RIGHT JOIN （有连接）\n：和LEFT JOIN 相反，查询右边的所有值，即使左边中没有对应的匹配记录。\n\n两张表如下\n  \n    Database changed\n    MariaDB [test_db]> show tables;\n    +-------------------+\n    | Tables_in_test_db |\n    +-------------------+\n    | runoob_tbl        |\n    | tcount_tbl        |\n    +-------------------+\n    \n    \n    MariaDB [test_db]> select * from runoob_tbl;\n    +-----------+---------------+---------------+-----------------+\n    | runoob_id | runoob_title  | runoob_author | submission_date |\n    +-----------+---------------+---------------+-----------------+\n    |         1 | 学习 PHP      | 菜鸟教程      | 2017-04-12      |\n    |         2 | 学习 MySQL    | 菜鸟教程      | 2017-04-12      |\n    |         3 | 学习 Java     | RUNOOB.COM    | 2015-05-01      |\n    |         4 | 学习 Python   | RUNOOB.COM    | 2016-03-06      |\n    |         5 | 学习 C        | FK            | 2017-04-05      |\n    +-----------+---------------+---------------+-----------------+\n    \n    MariaDB [test_db]> select * from tcount_tbl;\n    +---------------+--------------+\n    | runoob_author | runoob_count |\n    +---------------+--------------+\n    | 菜鸟教程      |           10 |\n    | RUNOOB.COM    |           20 |\n    | Google        |           22 |\n    +---------------+--------------+\n\n#### INNER JOIN （可以使用INNER,直接使用JOIN）\n\n\n```\nselect a.runoob_id,a.runoob_title,a.runoob_author,b.runoob_count from runoob_tbl a inner join tcount_tbl b on a.runoob_author = b.runoob_author\n```\n\n    +-----------+---------------+---------------+--------------+\n    | runoob_id | runoob_title  | runoob_author | runoob_count |\n    +-----------+---------------+---------------+--------------+\n    |         1 | 学习 PHP      | 菜鸟教程      |           10 |\n    |         2 | 学习 MySQL    | 菜鸟教程      |           10 |\n    |         3 | 学习 Java     | RUNOOB.COM    |           20 |\n    |         4 | 学习 Python   | RUNOOB.COM    |           20 |\n    +-----------+---------------+---------------+--------------+\n\n可以看出查询的记录是满足 on a.runoob_author = b.runoob_author 的交集。\n\n* INNER JOIN 可以用等价的 WHERE子句替换。\n等价的SQL：\n\n```\nselect a.runoob_id,a.runoob_title,a.runoob_author,b.runoob_count from runoob_tbl a , tcount_tbl b where a.runoob_author = b.runoob_author;\n\n```\n    \n    MariaDB [test_db]> select \t\t a.runoob_id,a.runoob_title,a.runoob_author,b.runoob_count from runoob_tbl a , tcount_tbl b where a.runoob_author = b.runoob_author;\n    +-----------+---------------+---------------+--------------+\n    | runoob_id | runoob_title  | runoob_author | runoob_count |\n    +-----------+---------------+---------------+--------------+\n    |         1 | 学习 PHP      | 菜鸟教程      |           10 |\n    |         2 | 学习 MySQL    | 菜鸟教程      |           10 |\n    |         3 | 学习 Java     | RUNOOB.COM    |           20 |\n    |         4 | 学习 Python   | RUNOOB.COM    |           20 |\n    +-----------+---------------+---------------+--------------+\n\n#### LEFT JOIN\n\n```\nMariaDB [test_db]> select a.runoob_id,a.runoob_author,b.runoob_count from runoob_tbl a left join tcount_tbl b on  a.runoob_author = b.runoob_author;\n+-----------+---------------+--------------+\n| runoob_id | runoob_author | runoob_count |\n+-----------+---------------+--------------+\n|         1 | 菜鸟教程      |           10 |\n|         2 | 菜鸟教程      |           10 |\n|         3 | RUNOOB.COM    |           20 |\n|         4 | RUNOOB.COM    |           20 |\n|         5 | FK            |         NULL |\n+-----------+---------------+--------------+\n```\n\n####  RIGHT JOIN\n    \n    MariaDB [test_db]> select a.runoob_id,a.runoob_author,b.runoob_count from runoob_tbl a right join tcount_tbl b on  a.runoob_author = b.runoob_author;\n    +-----------+---------------+--------------+\n    | runoob_id | runoob_author | runoob_count |\n    +-----------+---------------+--------------+\n    |         1 | 菜鸟教程      |           10 |\n    |         2 | 菜鸟教程      |           10 |\n    |         3 | RUNOOB.COM    |           20 |\n    |         4 | RUNOOB.COM    |           20 |\n    |      NULL | NULL          |           22 |\n    +-----------+---------------+--------------+\n\n","slug":"Mysql-连接查询","published":1,"updated":"2018-06-19T01:43:10.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjryltlb8000qncaqcpe2nlu8","content":"<p><a href=\"http://www.runoob.com/mysql/mysql-join.html\" target=\"_blank\" rel=\"external\">Join 查询有三种</a></p>\n<ul>\n<li>INNER JOIN （内连接|等值连接） ： 获取连个表中 满足字段匹配关系的记录，相当取交集。</li>\n<li>LEFT JOIN (左连接) ：查询左边所有值，满足所有匹配关系的记录，即使右表中没有对应的的匹配记录。</li>\n<li>RIGHT JOIN （有连接）<br>：和LEFT JOIN 相反，查询右边的所有值，即使左边中没有对应的匹配记录。</li>\n</ul>\n<p>两张表如下</p>\n<pre><code>Database changed\nMariaDB [test_db]&gt; show tables;\n+-------------------+\n| Tables_in_test_db |\n+-------------------+\n| runoob_tbl        |\n| tcount_tbl        |\n+-------------------+\n\n\nMariaDB [test_db]&gt; select * from runoob_tbl;\n+-----------+---------------+---------------+-----------------+\n| runoob_id | runoob_title  | runoob_author | submission_date |\n+-----------+---------------+---------------+-----------------+\n|         1 | 学习 PHP      | 菜鸟教程      | 2017-04-12      |\n|         2 | 学习 MySQL    | 菜鸟教程      | 2017-04-12      |\n|         3 | 学习 Java     | RUNOOB.COM    | 2015-05-01      |\n|         4 | 学习 Python   | RUNOOB.COM    | 2016-03-06      |\n|         5 | 学习 C        | FK            | 2017-04-05      |\n+-----------+---------------+---------------+-----------------+\n\nMariaDB [test_db]&gt; select * from tcount_tbl;\n+---------------+--------------+\n| runoob_author | runoob_count |\n+---------------+--------------+\n| 菜鸟教程      |           10 |\n| RUNOOB.COM    |           20 |\n| Google        |           22 |\n+---------------+--------------+\n</code></pre><h4 id=\"INNER-JOIN-（可以使用INNER-直接使用JOIN）\"><a href=\"#INNER-JOIN-（可以使用INNER-直接使用JOIN）\" class=\"headerlink\" title=\"INNER JOIN （可以使用INNER,直接使用JOIN）\"></a>INNER JOIN （可以使用INNER,直接使用JOIN）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">select a.runoob_id,a.runoob_title,a.runoob_author,b.runoob_count from runoob_tbl a inner join tcount_tbl b on a.runoob_author = b.runoob_author</div></pre></td></tr></table></figure>\n<pre><code>+-----------+---------------+---------------+--------------+\n| runoob_id | runoob_title  | runoob_author | runoob_count |\n+-----------+---------------+---------------+--------------+\n|         1 | 学习 PHP      | 菜鸟教程      |           10 |\n|         2 | 学习 MySQL    | 菜鸟教程      |           10 |\n|         3 | 学习 Java     | RUNOOB.COM    |           20 |\n|         4 | 学习 Python   | RUNOOB.COM    |           20 |\n+-----------+---------------+---------------+--------------+\n</code></pre><p>可以看出查询的记录是满足 on a.runoob_author = b.runoob_author 的交集。</p>\n<ul>\n<li>INNER JOIN 可以用等价的 WHERE子句替换。<br>等价的SQL：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">select a.runoob_id,a.runoob_title,a.runoob_author,b.runoob_count from runoob_tbl a , tcount_tbl b where a.runoob_author = b.runoob_author;</div></pre></td></tr></table></figure>\n<pre><code>MariaDB [test_db]&gt; select          a.runoob_id,a.runoob_title,a.runoob_author,b.runoob_count from runoob_tbl a , tcount_tbl b where a.runoob_author = b.runoob_author;\n+-----------+---------------+---------------+--------------+\n| runoob_id | runoob_title  | runoob_author | runoob_count |\n+-----------+---------------+---------------+--------------+\n|         1 | 学习 PHP      | 菜鸟教程      |           10 |\n|         2 | 学习 MySQL    | 菜鸟教程      |           10 |\n|         3 | 学习 Java     | RUNOOB.COM    |           20 |\n|         4 | 学习 Python   | RUNOOB.COM    |           20 |\n+-----------+---------------+---------------+--------------+\n</code></pre><h4 id=\"LEFT-JOIN\"><a href=\"#LEFT-JOIN\" class=\"headerlink\" title=\"LEFT JOIN\"></a>LEFT JOIN</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">MariaDB [test_db]&gt; select a.runoob_id,a.runoob_author,b.runoob_count from runoob_tbl a left join tcount_tbl b on  a.runoob_author = b.runoob_author;</div><div class=\"line\">+-----------+---------------+--------------+</div><div class=\"line\">| runoob_id | runoob_author | runoob_count |</div><div class=\"line\">+-----------+---------------+--------------+</div><div class=\"line\">|         1 | 菜鸟教程      |           10 |</div><div class=\"line\">|         2 | 菜鸟教程      |           10 |</div><div class=\"line\">|         3 | RUNOOB.COM    |           20 |</div><div class=\"line\">|         4 | RUNOOB.COM    |           20 |</div><div class=\"line\">|         5 | FK            |         NULL |</div><div class=\"line\">+-----------+---------------+--------------+</div></pre></td></tr></table></figure>\n<h4 id=\"RIGHT-JOIN\"><a href=\"#RIGHT-JOIN\" class=\"headerlink\" title=\"RIGHT JOIN\"></a>RIGHT JOIN</h4><pre><code>MariaDB [test_db]&gt; select a.runoob_id,a.runoob_author,b.runoob_count from runoob_tbl a right join tcount_tbl b on  a.runoob_author = b.runoob_author;\n+-----------+---------------+--------------+\n| runoob_id | runoob_author | runoob_count |\n+-----------+---------------+--------------+\n|         1 | 菜鸟教程      |           10 |\n|         2 | 菜鸟教程      |           10 |\n|         3 | RUNOOB.COM    |           20 |\n|         4 | RUNOOB.COM    |           20 |\n|      NULL | NULL          |           22 |\n+-----------+---------------+--------------+\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.runoob.com/mysql/mysql-join.html\" target=\"_blank\" rel=\"external\">Join 查询有三种</a></p>\n<ul>\n<li>INNER JOIN （内连接|等值连接） ： 获取连个表中 满足字段匹配关系的记录，相当取交集。</li>\n<li>LEFT JOIN (左连接) ：查询左边所有值，满足所有匹配关系的记录，即使右表中没有对应的的匹配记录。</li>\n<li>RIGHT JOIN （有连接）<br>：和LEFT JOIN 相反，查询右边的所有值，即使左边中没有对应的匹配记录。</li>\n</ul>\n<p>两张表如下</p>\n<pre><code>Database changed\nMariaDB [test_db]&gt; show tables;\n+-------------------+\n| Tables_in_test_db |\n+-------------------+\n| runoob_tbl        |\n| tcount_tbl        |\n+-------------------+\n\n\nMariaDB [test_db]&gt; select * from runoob_tbl;\n+-----------+---------------+---------------+-----------------+\n| runoob_id | runoob_title  | runoob_author | submission_date |\n+-----------+---------------+---------------+-----------------+\n|         1 | 学习 PHP      | 菜鸟教程      | 2017-04-12      |\n|         2 | 学习 MySQL    | 菜鸟教程      | 2017-04-12      |\n|         3 | 学习 Java     | RUNOOB.COM    | 2015-05-01      |\n|         4 | 学习 Python   | RUNOOB.COM    | 2016-03-06      |\n|         5 | 学习 C        | FK            | 2017-04-05      |\n+-----------+---------------+---------------+-----------------+\n\nMariaDB [test_db]&gt; select * from tcount_tbl;\n+---------------+--------------+\n| runoob_author | runoob_count |\n+---------------+--------------+\n| 菜鸟教程      |           10 |\n| RUNOOB.COM    |           20 |\n| Google        |           22 |\n+---------------+--------------+\n</code></pre><h4 id=\"INNER-JOIN-（可以使用INNER-直接使用JOIN）\"><a href=\"#INNER-JOIN-（可以使用INNER-直接使用JOIN）\" class=\"headerlink\" title=\"INNER JOIN （可以使用INNER,直接使用JOIN）\"></a>INNER JOIN （可以使用INNER,直接使用JOIN）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">select a.runoob_id,a.runoob_title,a.runoob_author,b.runoob_count from runoob_tbl a inner join tcount_tbl b on a.runoob_author = b.runoob_author</div></pre></td></tr></table></figure>\n<pre><code>+-----------+---------------+---------------+--------------+\n| runoob_id | runoob_title  | runoob_author | runoob_count |\n+-----------+---------------+---------------+--------------+\n|         1 | 学习 PHP      | 菜鸟教程      |           10 |\n|         2 | 学习 MySQL    | 菜鸟教程      |           10 |\n|         3 | 学习 Java     | RUNOOB.COM    |           20 |\n|         4 | 学习 Python   | RUNOOB.COM    |           20 |\n+-----------+---------------+---------------+--------------+\n</code></pre><p>可以看出查询的记录是满足 on a.runoob_author = b.runoob_author 的交集。</p>\n<ul>\n<li>INNER JOIN 可以用等价的 WHERE子句替换。<br>等价的SQL：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">select a.runoob_id,a.runoob_title,a.runoob_author,b.runoob_count from runoob_tbl a , tcount_tbl b where a.runoob_author = b.runoob_author;</div></pre></td></tr></table></figure>\n<pre><code>MariaDB [test_db]&gt; select          a.runoob_id,a.runoob_title,a.runoob_author,b.runoob_count from runoob_tbl a , tcount_tbl b where a.runoob_author = b.runoob_author;\n+-----------+---------------+---------------+--------------+\n| runoob_id | runoob_title  | runoob_author | runoob_count |\n+-----------+---------------+---------------+--------------+\n|         1 | 学习 PHP      | 菜鸟教程      |           10 |\n|         2 | 学习 MySQL    | 菜鸟教程      |           10 |\n|         3 | 学习 Java     | RUNOOB.COM    |           20 |\n|         4 | 学习 Python   | RUNOOB.COM    |           20 |\n+-----------+---------------+---------------+--------------+\n</code></pre><h4 id=\"LEFT-JOIN\"><a href=\"#LEFT-JOIN\" class=\"headerlink\" title=\"LEFT JOIN\"></a>LEFT JOIN</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">MariaDB [test_db]&gt; select a.runoob_id,a.runoob_author,b.runoob_count from runoob_tbl a left join tcount_tbl b on  a.runoob_author = b.runoob_author;</div><div class=\"line\">+-----------+---------------+--------------+</div><div class=\"line\">| runoob_id | runoob_author | runoob_count |</div><div class=\"line\">+-----------+---------------+--------------+</div><div class=\"line\">|         1 | 菜鸟教程      |           10 |</div><div class=\"line\">|         2 | 菜鸟教程      |           10 |</div><div class=\"line\">|         3 | RUNOOB.COM    |           20 |</div><div class=\"line\">|         4 | RUNOOB.COM    |           20 |</div><div class=\"line\">|         5 | FK            |         NULL |</div><div class=\"line\">+-----------+---------------+--------------+</div></pre></td></tr></table></figure>\n<h4 id=\"RIGHT-JOIN\"><a href=\"#RIGHT-JOIN\" class=\"headerlink\" title=\"RIGHT JOIN\"></a>RIGHT JOIN</h4><pre><code>MariaDB [test_db]&gt; select a.runoob_id,a.runoob_author,b.runoob_count from runoob_tbl a right join tcount_tbl b on  a.runoob_author = b.runoob_author;\n+-----------+---------------+--------------+\n| runoob_id | runoob_author | runoob_count |\n+-----------+---------------+--------------+\n|         1 | 菜鸟教程      |           10 |\n|         2 | 菜鸟教程      |           10 |\n|         3 | RUNOOB.COM    |           20 |\n|         4 | RUNOOB.COM    |           20 |\n|      NULL | NULL          |           22 |\n+-----------+---------------+--------------+\n</code></pre>"},{"title":"react native基础(一)","date":"2017-07-12T08:47:55.000Z","_content":"\n\n# react native\n\n## 使用StyleSheet创建样式\n```\n\t <View style={styles.container}>\n     </View>\n\n\n    const styles = StyleSheet.create({\n    container: {\n        backgroundColor: '#ff0000',\n        flex: 1\n    }\n});\n```\n## 常用属性\n\n```\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: '#ff0000',//背景\n        flex: 1,//填满屏幕\n        margin: 30,//外边距\n        borderWidth: 10,//边框宽度\n        borderColor: '#00ff00',//边框颜色\n        borderRadius: 16,//圆角半径\n        shadowColor: '#0000ff',//阴影颜色\n        shadowOpacity: 0.6,//阴影透明度\n        shadowRadius: 5,//阴影角度\n        shadowOffset: { //x,y偏移\n            height: 1,\n            width: 0\n        }\n\n    }\n});\n```\n![常用属性](http://7xppgb.com1.z0.glb.clouddn.com/style_common_properties.png?imageView2/2/w/500/h/800/q/100)\n\n<!-- more -->\n## 文字样式\n\n```\n  <View style={styles.container}>\n    <Text style={styles.text}>\n      forevercoder.com\n    </Text>\n  </View>\n\n   text: {\n            fontSize: 26,\n            color: '#6435c9',\n            textAlign: 'center',\n            fontStyle: 'italic',\n            letterSpacing: 2,//字间距\n            lineHeight: 33,//行间距\n            fontFamily: 'Helvetica Neue',//字体\n            fontWeight: 'bold',//粗细\n            textDecorationLine: 'underline',//下划线 \n            textDecorationStyle: 'dashed',//  虚线\n            textDecorationColor: '#00ffff'\n        }\n```\n![文字样式](http://7xppgb.com1.z0.glb.clouddn.com/text_style.png?imageView2/2/w/500/h/800/q/100)\n","source":"_posts/ReacNative(一)基础篇.md","raw":"title: react native基础(一)\ndate: 2017-07-12 16:47:55\ncategories: react native\ntags:  react native\n---\n\n\n# react native\n\n## 使用StyleSheet创建样式\n```\n\t <View style={styles.container}>\n     </View>\n\n\n    const styles = StyleSheet.create({\n    container: {\n        backgroundColor: '#ff0000',\n        flex: 1\n    }\n});\n```\n## 常用属性\n\n```\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: '#ff0000',//背景\n        flex: 1,//填满屏幕\n        margin: 30,//外边距\n        borderWidth: 10,//边框宽度\n        borderColor: '#00ff00',//边框颜色\n        borderRadius: 16,//圆角半径\n        shadowColor: '#0000ff',//阴影颜色\n        shadowOpacity: 0.6,//阴影透明度\n        shadowRadius: 5,//阴影角度\n        shadowOffset: { //x,y偏移\n            height: 1,\n            width: 0\n        }\n\n    }\n});\n```\n![常用属性](http://7xppgb.com1.z0.glb.clouddn.com/style_common_properties.png?imageView2/2/w/500/h/800/q/100)\n\n<!-- more -->\n## 文字样式\n\n```\n  <View style={styles.container}>\n    <Text style={styles.text}>\n      forevercoder.com\n    </Text>\n  </View>\n\n   text: {\n            fontSize: 26,\n            color: '#6435c9',\n            textAlign: 'center',\n            fontStyle: 'italic',\n            letterSpacing: 2,//字间距\n            lineHeight: 33,//行间距\n            fontFamily: 'Helvetica Neue',//字体\n            fontWeight: 'bold',//粗细\n            textDecorationLine: 'underline',//下划线 \n            textDecorationStyle: 'dashed',//  虚线\n            textDecorationColor: '#00ffff'\n        }\n```\n![文字样式](http://7xppgb.com1.z0.glb.clouddn.com/text_style.png?imageView2/2/w/500/h/800/q/100)\n","slug":"ReacNative(一)基础篇","published":1,"updated":"2018-04-22T03:23:56.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjryltlb9000sncaqxhnh38pf","content":"<h1 id=\"react-native\"><a href=\"#react-native\" class=\"headerlink\" title=\"react native\"></a>react native</h1><h2 id=\"使用StyleSheet创建样式\"><a href=\"#使用StyleSheet创建样式\" class=\"headerlink\" title=\"使用StyleSheet创建样式\"></a>使用StyleSheet创建样式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t &lt;View style=&#123;styles.container&#125;&gt;</div><div class=\"line\">     &lt;/View&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    const styles = StyleSheet.create(&#123;</div><div class=\"line\">    container: &#123;</div><div class=\"line\">        backgroundColor: &apos;#ff0000&apos;,</div><div class=\"line\">        flex: 1</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"常用属性\"><a href=\"#常用属性\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = StyleSheet.create(&#123;</div><div class=\"line\">    container: &#123;</div><div class=\"line\">        backgroundColor: &apos;#ff0000&apos;,//背景</div><div class=\"line\">        flex: 1,//填满屏幕</div><div class=\"line\">        margin: 30,//外边距</div><div class=\"line\">        borderWidth: 10,//边框宽度</div><div class=\"line\">        borderColor: &apos;#00ff00&apos;,//边框颜色</div><div class=\"line\">        borderRadius: 16,//圆角半径</div><div class=\"line\">        shadowColor: &apos;#0000ff&apos;,//阴影颜色</div><div class=\"line\">        shadowOpacity: 0.6,//阴影透明度</div><div class=\"line\">        shadowRadius: 5,//阴影角度</div><div class=\"line\">        shadowOffset: &#123; //x,y偏移</div><div class=\"line\">            height: 1,</div><div class=\"line\">            width: 0</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/style_common_properties.png?imageView2/2/w/500/h/800/q/100\" alt=\"常用属性\"></p>\n<a id=\"more\"></a>\n<h2 id=\"文字样式\"><a href=\"#文字样式\" class=\"headerlink\" title=\"文字样式\"></a>文字样式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;View style=&#123;styles.container&#125;&gt;</div><div class=\"line\">  &lt;Text style=&#123;styles.text&#125;&gt;</div><div class=\"line\">    forevercoder.com</div><div class=\"line\">  &lt;/Text&gt;</div><div class=\"line\">&lt;/View&gt;</div><div class=\"line\"></div><div class=\"line\"> text: &#123;</div><div class=\"line\">          fontSize: 26,</div><div class=\"line\">          color: &apos;#6435c9&apos;,</div><div class=\"line\">          textAlign: &apos;center&apos;,</div><div class=\"line\">          fontStyle: &apos;italic&apos;,</div><div class=\"line\">          letterSpacing: 2,//字间距</div><div class=\"line\">          lineHeight: 33,//行间距</div><div class=\"line\">          fontFamily: &apos;Helvetica Neue&apos;,//字体</div><div class=\"line\">          fontWeight: &apos;bold&apos;,//粗细</div><div class=\"line\">          textDecorationLine: &apos;underline&apos;,//下划线 </div><div class=\"line\">          textDecorationStyle: &apos;dashed&apos;,//  虚线</div><div class=\"line\">          textDecorationColor: &apos;#00ffff&apos;</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/text_style.png?imageView2/2/w/500/h/800/q/100\" alt=\"文字样式\"></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"react-native\"><a href=\"#react-native\" class=\"headerlink\" title=\"react native\"></a>react native</h1><h2 id=\"使用StyleSheet创建样式\"><a href=\"#使用StyleSheet创建样式\" class=\"headerlink\" title=\"使用StyleSheet创建样式\"></a>使用StyleSheet创建样式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t &lt;View style=&#123;styles.container&#125;&gt;</div><div class=\"line\">     &lt;/View&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    const styles = StyleSheet.create(&#123;</div><div class=\"line\">    container: &#123;</div><div class=\"line\">        backgroundColor: &apos;#ff0000&apos;,</div><div class=\"line\">        flex: 1</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"常用属性\"><a href=\"#常用属性\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">const styles = StyleSheet.create(&#123;</div><div class=\"line\">    container: &#123;</div><div class=\"line\">        backgroundColor: &apos;#ff0000&apos;,//背景</div><div class=\"line\">        flex: 1,//填满屏幕</div><div class=\"line\">        margin: 30,//外边距</div><div class=\"line\">        borderWidth: 10,//边框宽度</div><div class=\"line\">        borderColor: &apos;#00ff00&apos;,//边框颜色</div><div class=\"line\">        borderRadius: 16,//圆角半径</div><div class=\"line\">        shadowColor: &apos;#0000ff&apos;,//阴影颜色</div><div class=\"line\">        shadowOpacity: 0.6,//阴影透明度</div><div class=\"line\">        shadowRadius: 5,//阴影角度</div><div class=\"line\">        shadowOffset: &#123; //x,y偏移</div><div class=\"line\">            height: 1,</div><div class=\"line\">            width: 0</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/style_common_properties.png?imageView2/2/w/500/h/800/q/100\" alt=\"常用属性\"></p>","more":"<h2 id=\"文字样式\"><a href=\"#文字样式\" class=\"headerlink\" title=\"文字样式\"></a>文字样式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;View style=&#123;styles.container&#125;&gt;</div><div class=\"line\">  &lt;Text style=&#123;styles.text&#125;&gt;</div><div class=\"line\">    forevercoder.com</div><div class=\"line\">  &lt;/Text&gt;</div><div class=\"line\">&lt;/View&gt;</div><div class=\"line\"></div><div class=\"line\"> text: &#123;</div><div class=\"line\">          fontSize: 26,</div><div class=\"line\">          color: &apos;#6435c9&apos;,</div><div class=\"line\">          textAlign: &apos;center&apos;,</div><div class=\"line\">          fontStyle: &apos;italic&apos;,</div><div class=\"line\">          letterSpacing: 2,//字间距</div><div class=\"line\">          lineHeight: 33,//行间距</div><div class=\"line\">          fontFamily: &apos;Helvetica Neue&apos;,//字体</div><div class=\"line\">          fontWeight: &apos;bold&apos;,//粗细</div><div class=\"line\">          textDecorationLine: &apos;underline&apos;,//下划线 </div><div class=\"line\">          textDecorationStyle: &apos;dashed&apos;,//  虚线</div><div class=\"line\">          textDecorationColor: &apos;#00ffff&apos;</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/text_style.png?imageView2/2/w/500/h/800/q/100\" alt=\"文字样式\"></p>"},{"title":"ReacNative基础篇(二)","date":"2017-07-16T09:42:07.000Z","_content":"\n# flexBox 布局\n\n与css中的flexBox布局类似，如下所示(转载网路)\n<table class=\"table table-bordered table-striped table-condensed\"><tr><td><img src='http://7xppgb.com1.z0.glb.clouddn.com/flex-direction.jpg'></td><td><img src='http://7xppgb.com1.z0.glb.clouddn.com/flex-wrap.jpg'></td></tr><tr><td><img src='http://7xppgb.com1.z0.glb.clouddn.com/justify-content.jpg'></td><td><img src='http://7xppgb.com1.z0.glb.clouddn.com/align-items.jpg'></td></tr><tr><td><img src='http://7xppgb.com1.z0.glb.clouddn.com/align-content.jpg'></td></table>\n\n\n<!-- more -->\n## 弹性（Flex）宽高\n\n在组件样式中使用flex可以使其在可利用的空间中动态地扩张或收缩。一般而言我们会使用flex:1来指定某个组件扩张以撑满所有剩余的空间。如果有多个并列的子组件使用了flex:1，则这些子组件会平分父容器中剩余的空间。如果这些并列的子组件的flex值不一样，则谁的值更大，谁占据剩余空间的比例就更大（即占据剩余空间的比等于并列组件间flex值的比）。\n\n* 指定flex:1占满整个屏幕\n\n```javascript\ncontainer: {\n            backgroundColor: '#eae7ff',//背景\n            marginTop: 20,\n            flex: 1\n        },\n\n```\n\n![指定flex:1](http://7xppgb.com1.z0.glb.clouddn.com/flex_1.png)\n\n* 不指定flex\n\n```javascript\ncontainer: {\n        backgroundColor: '#eae7ff',//背景\n        marginTop: 20\n        }\n\n```\n![指定flex:1](http://7xppgb.com1.z0.glb.clouddn.com/no_flex.png)\n\n## Flex Direction\n\n在组件的style中指定flexDirection可以决定布局的主轴。子元素是应该沿着水平轴(row)方向排列，还是沿着竖直轴(column)方向排列呢？默认值是竖直轴(column)方向。有以下值：'row', 'row-reverse', 'column', 'column-reverse'\n\n```javascript\n/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n * @flow\n */\n\nimport React, {Component} from 'react';\nimport {\n    AppRegistry,\n    StyleSheet,\n    Text,\n    View\n} from 'react-native';\n\nexport default class MovieTalk extends Component {\n    render() {\n        return (\n            <View style={styles.container}>\n                <Text style={styles.item1}>\n                    1\n                </Text>\n                <Text style={styles.item2}>\n                    2\n                </Text>\n                <Text style={styles.item3}>\n                    3\n                </Text>\n            </View>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n        container: {\n            backgroundColor: '#eae7ff',//背景\n            marginTop: 20,\n            flex: 1,\n            flexDirection: 'row'\n        },\n        item1: {\n            backgroundColor: 'powderblue',\n            width: 50,\n            height: 50,\n            margin: 5,\n            fontSize: 30,\n            color: 'red'\n\n        },\n        item2: {\n            backgroundColor: 'skyblue',\n            width: 50,\n            height: 50,\n            margin: 5,\n            fontSize: 30,\n            color: 'green'\n\n        },\n        item3: {\n            backgroundColor: 'steelblue',\n            width: 50,\n            height: 50,\n            margin: 5,\n            fontSize: 30,\n            color: 'blue'\n\n        },\n\n\n    })\n;\n\nAppRegistry.registerComponent('MovieTalk', () => MovieTalk);\n\n```\n<table class=\"table table-bordered table-striped table-condensed\"><tr><th>flexDirection: 'row'</th><th>flexDirection: 'row-reverse'</th><th>flexDirection: 'column'</th><th>flexDirection: 'column-reverse'</th></tr><tr><td><img src='http://7xppgb.com1.z0.glb.clouddn.com/flex_derection_row.png'/></td>\n<td><img src='http://7xppgb.com1.z0.glb.clouddn.com/row-reverse.png'/</td><td><img src='http://7xppgb.com1.z0.glb.clouddn.com/flex_direction_column.png'/></td><td><img src='http://7xppgb.com1.z0.glb.clouddn.com/column-reverse.png'/</td></tr></table>\n\n## Justify Content\n在组件的style中指定justifyContent可以决定其子元素沿着主轴的排列方式。子元素是应该靠近主轴的起始端还是末尾段分布呢？亦或应该均匀分布？对应的这些可选项有：flex-start、center、flex-end、space-around以及space-between。\n\n* flex-start\n弹性项目向行头紧挨着填充。这个是默认值。第一个弹性项的main-start外边距边线被放置在该行的main-start边线，而后续弹性项依次平齐摆放。\n\n* flex-end\n弹性项目向行尾紧挨着填充。第一个弹性项的main-end外边距边线被放置在该行的main-end边线，而后续弹性项依次平齐摆放。\n\n* center\n弹性项目居中紧挨着填充。（如果剩余的自由空间是负的，则弹性项目将在两个方向上同时溢出）。\n\n* space-between\n弹性项目平均分布在该行上。如果剩余空间为负或者只有一个弹性项，则该值等同于flex-start。否则，第1个弹性项的外边距和行的main-start边线对齐，而最后1个弹性项的外边距和行的main-end边线对齐，然后剩余的弹性项分布在该行上，相邻项目的间隔相等。\n* space-around\n弹性项目平均分布在该行上，两边留有一半的间隔空间。如果剩余空间为负或者只有一个弹性项，则该值等同于center。否则，弹性项目沿该行分布，且彼此间隔相等（比如是20px），同时首尾两边和弹性容器之间留有一半的间隔（1/2*20px=10px）。\n\n```javascript\ncontainer: {\n            backgroundColor: '#eae7ff',//背景\n            marginTop: 20,\n            flex: 1,\n            flexDirection: 'row',\n            justifyContent:'flex-start'\n\n        },\n```\n\n| flex-start    | center        | flex-end  | space-around | space-between |\n| ------------- |:-------------:| -----:|:--------:|:--------:|:--------:|\n| ![](http://7xppgb.com1.z0.glb.clouddn.com/justify_cotent_flex_start.png)      | ![](http://7xppgb.com1.z0.glb.clouddn.com/justify_cotent_center.png) | ![](http://7xppgb.com1.z0.glb.clouddn.com/justify_cotent_flex-end.png)  | ![](http://7xppgb.com1.z0.glb.clouddn.com/justify_cotent_space-around.png)  | ![](http://7xppgb.com1.z0.glb.clouddn.com/justify_cotent_space-between.png)\n\n## Align Items\n在组件的style中指定alignItems可以决定其子元素沿着次轴（与主轴垂直的轴，比如若主轴方向为row，则次轴方向为column）的排列方式。子元素是应该靠近次轴的起始端还是末尾段分布呢？亦或应该均匀分布？对应的这些可选项有：flex-start、center、flex-end以及stretch。\n\n```javascript\n  container: {\n            backgroundColor: '#eae7ff',//背景\n            marginTop: 20,\n            flex: 1,\n            flexDirection: 'column',\n            justifyContent:'center',\n            alignItems:'flex-start'\n\n        },\n```\n\n| flex-start    | center        | flex-end  | stretch |\n| ------------- |:-------------:| -----:|:--------:|:--------:|\n|![](http://7xppgb.com1.z0.glb.clouddn.com/alignItems_flex-start.png)|![](http://7xppgb.com1.z0.glb.clouddn.com/alignItems_center.png)|![](http://7xppgb.com1.z0.glb.clouddn.com/alignItems_flex-end.png)|![](http://7xppgb.com1.z0.glb.clouddn.com/alignItems_stretch.png)|\n\n* 注意\n 要使stretch选项生效的话，子元素在次轴方向上不能有固定的尺寸。以下面的代码为例：只有将子元素样式中的 width: 50去掉之后，alignItems: 'stretch'才能生效。\n","source":"_posts/ReacNative基础篇 (二).md","raw":"title: ReacNative基础篇(二)\ndate: 2017-07-16 17:42:07\ncategories: react native\ntags: react native\n---\n\n# flexBox 布局\n\n与css中的flexBox布局类似，如下所示(转载网路)\n<table class=\"table table-bordered table-striped table-condensed\"><tr><td><img src='http://7xppgb.com1.z0.glb.clouddn.com/flex-direction.jpg'></td><td><img src='http://7xppgb.com1.z0.glb.clouddn.com/flex-wrap.jpg'></td></tr><tr><td><img src='http://7xppgb.com1.z0.glb.clouddn.com/justify-content.jpg'></td><td><img src='http://7xppgb.com1.z0.glb.clouddn.com/align-items.jpg'></td></tr><tr><td><img src='http://7xppgb.com1.z0.glb.clouddn.com/align-content.jpg'></td></table>\n\n\n<!-- more -->\n## 弹性（Flex）宽高\n\n在组件样式中使用flex可以使其在可利用的空间中动态地扩张或收缩。一般而言我们会使用flex:1来指定某个组件扩张以撑满所有剩余的空间。如果有多个并列的子组件使用了flex:1，则这些子组件会平分父容器中剩余的空间。如果这些并列的子组件的flex值不一样，则谁的值更大，谁占据剩余空间的比例就更大（即占据剩余空间的比等于并列组件间flex值的比）。\n\n* 指定flex:1占满整个屏幕\n\n```javascript\ncontainer: {\n            backgroundColor: '#eae7ff',//背景\n            marginTop: 20,\n            flex: 1\n        },\n\n```\n\n![指定flex:1](http://7xppgb.com1.z0.glb.clouddn.com/flex_1.png)\n\n* 不指定flex\n\n```javascript\ncontainer: {\n        backgroundColor: '#eae7ff',//背景\n        marginTop: 20\n        }\n\n```\n![指定flex:1](http://7xppgb.com1.z0.glb.clouddn.com/no_flex.png)\n\n## Flex Direction\n\n在组件的style中指定flexDirection可以决定布局的主轴。子元素是应该沿着水平轴(row)方向排列，还是沿着竖直轴(column)方向排列呢？默认值是竖直轴(column)方向。有以下值：'row', 'row-reverse', 'column', 'column-reverse'\n\n```javascript\n/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n * @flow\n */\n\nimport React, {Component} from 'react';\nimport {\n    AppRegistry,\n    StyleSheet,\n    Text,\n    View\n} from 'react-native';\n\nexport default class MovieTalk extends Component {\n    render() {\n        return (\n            <View style={styles.container}>\n                <Text style={styles.item1}>\n                    1\n                </Text>\n                <Text style={styles.item2}>\n                    2\n                </Text>\n                <Text style={styles.item3}>\n                    3\n                </Text>\n            </View>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n        container: {\n            backgroundColor: '#eae7ff',//背景\n            marginTop: 20,\n            flex: 1,\n            flexDirection: 'row'\n        },\n        item1: {\n            backgroundColor: 'powderblue',\n            width: 50,\n            height: 50,\n            margin: 5,\n            fontSize: 30,\n            color: 'red'\n\n        },\n        item2: {\n            backgroundColor: 'skyblue',\n            width: 50,\n            height: 50,\n            margin: 5,\n            fontSize: 30,\n            color: 'green'\n\n        },\n        item3: {\n            backgroundColor: 'steelblue',\n            width: 50,\n            height: 50,\n            margin: 5,\n            fontSize: 30,\n            color: 'blue'\n\n        },\n\n\n    })\n;\n\nAppRegistry.registerComponent('MovieTalk', () => MovieTalk);\n\n```\n<table class=\"table table-bordered table-striped table-condensed\"><tr><th>flexDirection: 'row'</th><th>flexDirection: 'row-reverse'</th><th>flexDirection: 'column'</th><th>flexDirection: 'column-reverse'</th></tr><tr><td><img src='http://7xppgb.com1.z0.glb.clouddn.com/flex_derection_row.png'/></td>\n<td><img src='http://7xppgb.com1.z0.glb.clouddn.com/row-reverse.png'/</td><td><img src='http://7xppgb.com1.z0.glb.clouddn.com/flex_direction_column.png'/></td><td><img src='http://7xppgb.com1.z0.glb.clouddn.com/column-reverse.png'/</td></tr></table>\n\n## Justify Content\n在组件的style中指定justifyContent可以决定其子元素沿着主轴的排列方式。子元素是应该靠近主轴的起始端还是末尾段分布呢？亦或应该均匀分布？对应的这些可选项有：flex-start、center、flex-end、space-around以及space-between。\n\n* flex-start\n弹性项目向行头紧挨着填充。这个是默认值。第一个弹性项的main-start外边距边线被放置在该行的main-start边线，而后续弹性项依次平齐摆放。\n\n* flex-end\n弹性项目向行尾紧挨着填充。第一个弹性项的main-end外边距边线被放置在该行的main-end边线，而后续弹性项依次平齐摆放。\n\n* center\n弹性项目居中紧挨着填充。（如果剩余的自由空间是负的，则弹性项目将在两个方向上同时溢出）。\n\n* space-between\n弹性项目平均分布在该行上。如果剩余空间为负或者只有一个弹性项，则该值等同于flex-start。否则，第1个弹性项的外边距和行的main-start边线对齐，而最后1个弹性项的外边距和行的main-end边线对齐，然后剩余的弹性项分布在该行上，相邻项目的间隔相等。\n* space-around\n弹性项目平均分布在该行上，两边留有一半的间隔空间。如果剩余空间为负或者只有一个弹性项，则该值等同于center。否则，弹性项目沿该行分布，且彼此间隔相等（比如是20px），同时首尾两边和弹性容器之间留有一半的间隔（1/2*20px=10px）。\n\n```javascript\ncontainer: {\n            backgroundColor: '#eae7ff',//背景\n            marginTop: 20,\n            flex: 1,\n            flexDirection: 'row',\n            justifyContent:'flex-start'\n\n        },\n```\n\n| flex-start    | center        | flex-end  | space-around | space-between |\n| ------------- |:-------------:| -----:|:--------:|:--------:|:--------:|\n| ![](http://7xppgb.com1.z0.glb.clouddn.com/justify_cotent_flex_start.png)      | ![](http://7xppgb.com1.z0.glb.clouddn.com/justify_cotent_center.png) | ![](http://7xppgb.com1.z0.glb.clouddn.com/justify_cotent_flex-end.png)  | ![](http://7xppgb.com1.z0.glb.clouddn.com/justify_cotent_space-around.png)  | ![](http://7xppgb.com1.z0.glb.clouddn.com/justify_cotent_space-between.png)\n\n## Align Items\n在组件的style中指定alignItems可以决定其子元素沿着次轴（与主轴垂直的轴，比如若主轴方向为row，则次轴方向为column）的排列方式。子元素是应该靠近次轴的起始端还是末尾段分布呢？亦或应该均匀分布？对应的这些可选项有：flex-start、center、flex-end以及stretch。\n\n```javascript\n  container: {\n            backgroundColor: '#eae7ff',//背景\n            marginTop: 20,\n            flex: 1,\n            flexDirection: 'column',\n            justifyContent:'center',\n            alignItems:'flex-start'\n\n        },\n```\n\n| flex-start    | center        | flex-end  | stretch |\n| ------------- |:-------------:| -----:|:--------:|:--------:|\n|![](http://7xppgb.com1.z0.glb.clouddn.com/alignItems_flex-start.png)|![](http://7xppgb.com1.z0.glb.clouddn.com/alignItems_center.png)|![](http://7xppgb.com1.z0.glb.clouddn.com/alignItems_flex-end.png)|![](http://7xppgb.com1.z0.glb.clouddn.com/alignItems_stretch.png)|\n\n* 注意\n 要使stretch选项生效的话，子元素在次轴方向上不能有固定的尺寸。以下面的代码为例：只有将子元素样式中的 width: 50去掉之后，alignItems: 'stretch'才能生效。\n","slug":"ReacNative基础篇 (二)","published":1,"updated":"2018-04-22T03:22:46.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjryltlba000xncaqc1ohm6u5","content":"<h1 id=\"flexBox-布局\"><a href=\"#flexBox-布局\" class=\"headerlink\" title=\"flexBox 布局\"></a>flexBox 布局</h1><p>与css中的flexBox布局类似，如下所示(转载网路)</p>\n<table class=\"table table-bordered table-striped table-condensed\"><tr><td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/flex-direction.jpg\"></td><td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/flex-wrap.jpg\"></td></tr><tr><td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/justify-content.jpg\"></td><td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/align-items.jpg\"></td></tr><tr><td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/align-content.jpg\"></td></tr></table>\n\n\n<a id=\"more\"></a>\n<h2 id=\"弹性（Flex）宽高\"><a href=\"#弹性（Flex）宽高\" class=\"headerlink\" title=\"弹性（Flex）宽高\"></a>弹性（Flex）宽高</h2><p>在组件样式中使用flex可以使其在可利用的空间中动态地扩张或收缩。一般而言我们会使用flex:1来指定某个组件扩张以撑满所有剩余的空间。如果有多个并列的子组件使用了flex:1，则这些子组件会平分父容器中剩余的空间。如果这些并列的子组件的flex值不一样，则谁的值更大，谁占据剩余空间的比例就更大（即占据剩余空间的比等于并列组件间flex值的比）。</p>\n<ul>\n<li>指定flex:1占满整个屏幕</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">container: &#123;</div><div class=\"line\">            <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#eae7ff'</span>,<span class=\"comment\">//背景</span></div><div class=\"line\">            marginTop: <span class=\"number\">20</span>,</div><div class=\"line\">            <span class=\"attr\">flex</span>: <span class=\"number\">1</span></div><div class=\"line\">        &#125;,</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/flex_1.png\" alt=\"指定flex:1\"></p>\n<ul>\n<li>不指定flex</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">container: &#123;</div><div class=\"line\">        <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#eae7ff'</span>,<span class=\"comment\">//背景</span></div><div class=\"line\">        marginTop: <span class=\"number\">20</span></div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/no_flex.png\" alt=\"指定flex:1\"></p>\n<h2 id=\"Flex-Direction\"><a href=\"#Flex-Direction\" class=\"headerlink\" title=\"Flex Direction\"></a>Flex Direction</h2><p>在组件的style中指定flexDirection可以决定布局的主轴。子元素是应该沿着水平轴(row)方向排列，还是沿着竖直轴(column)方向排列呢？默认值是竖直轴(column)方向。有以下值：’row’, ‘row-reverse’, ‘column’, ‘column-reverse’</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Sample React Native App</div><div class=\"line\"> * https://github.com/facebook/react-native</div><div class=\"line\"> * @flow</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">    AppRegistry,</div><div class=\"line\">    StyleSheet,</div><div class=\"line\">    Text,</div><div class=\"line\">    View</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovieTalk</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;View style=&#123;styles.container&#125;&gt;</div><div class=\"line\">                &lt;Text style=&#123;styles.item1&#125;&gt;</div><div class=\"line\">                    1</div><div class=\"line\">                &lt;/Text&gt;</div><div class=\"line\">                &lt;Text style=&#123;styles.item2&#125;&gt;</div><div class=\"line\">                    2</div><div class=\"line\">                &lt;/Text&gt;</div><div class=\"line\">                &lt;Text style=&#123;styles.item3&#125;&gt;</div><div class=\"line\">                    3</div><div class=\"line\">                &lt;/Text&gt;</div><div class=\"line\">            &lt;/View&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> styles = StyleSheet.create(&#123;</div><div class=\"line\">        <span class=\"attr\">container</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#eae7ff'</span>,<span class=\"comment\">//背景</span></div><div class=\"line\">            marginTop: <span class=\"number\">20</span>,</div><div class=\"line\">            <span class=\"attr\">flex</span>: <span class=\"number\">1</span>,</div><div class=\"line\">            <span class=\"attr\">flexDirection</span>: <span class=\"string\">'row'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">item1</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'powderblue'</span>,</div><div class=\"line\">            <span class=\"attr\">width</span>: <span class=\"number\">50</span>,</div><div class=\"line\">            <span class=\"attr\">height</span>: <span class=\"number\">50</span>,</div><div class=\"line\">            <span class=\"attr\">margin</span>: <span class=\"number\">5</span>,</div><div class=\"line\">            <span class=\"attr\">fontSize</span>: <span class=\"number\">30</span>,</div><div class=\"line\">            <span class=\"attr\">color</span>: <span class=\"string\">'red'</span></div><div class=\"line\"></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">item2</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'skyblue'</span>,</div><div class=\"line\">            <span class=\"attr\">width</span>: <span class=\"number\">50</span>,</div><div class=\"line\">            <span class=\"attr\">height</span>: <span class=\"number\">50</span>,</div><div class=\"line\">            <span class=\"attr\">margin</span>: <span class=\"number\">5</span>,</div><div class=\"line\">            <span class=\"attr\">fontSize</span>: <span class=\"number\">30</span>,</div><div class=\"line\">            <span class=\"attr\">color</span>: <span class=\"string\">'green'</span></div><div class=\"line\"></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">item3</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'steelblue'</span>,</div><div class=\"line\">            <span class=\"attr\">width</span>: <span class=\"number\">50</span>,</div><div class=\"line\">            <span class=\"attr\">height</span>: <span class=\"number\">50</span>,</div><div class=\"line\">            <span class=\"attr\">margin</span>: <span class=\"number\">5</span>,</div><div class=\"line\">            <span class=\"attr\">fontSize</span>: <span class=\"number\">30</span>,</div><div class=\"line\">            <span class=\"attr\">color</span>: <span class=\"string\">'blue'</span></div><div class=\"line\"></div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\">;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent(<span class=\"string\">'MovieTalk'</span>, () =&gt; MovieTalk);</div></pre></td></tr></table></figure>\n<table class=\"table table-bordered table-striped table-condensed\"><tr><th>flexDirection: ‘row’</th><th>flexDirection: ‘row-reverse’</th><th>flexDirection: ‘column’</th><th>flexDirection: ‘column-reverse’</th></tr><tr><td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/flex_derection_row.png\"></td><br><td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/row-reverse.png\" <=\"\" td=\"\"></td><td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/flex_direction_column.png\"></td><td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/column-reverse.png\" <=\"\" td=\"\"></td></tr></table>\n\n<h2 id=\"Justify-Content\"><a href=\"#Justify-Content\" class=\"headerlink\" title=\"Justify Content\"></a>Justify Content</h2><p>在组件的style中指定justifyContent可以决定其子元素沿着主轴的排列方式。子元素是应该靠近主轴的起始端还是末尾段分布呢？亦或应该均匀分布？对应的这些可选项有：flex-start、center、flex-end、space-around以及space-between。</p>\n<ul>\n<li><p>flex-start<br>弹性项目向行头紧挨着填充。这个是默认值。第一个弹性项的main-start外边距边线被放置在该行的main-start边线，而后续弹性项依次平齐摆放。</p>\n</li>\n<li><p>flex-end<br>弹性项目向行尾紧挨着填充。第一个弹性项的main-end外边距边线被放置在该行的main-end边线，而后续弹性项依次平齐摆放。</p>\n</li>\n<li><p>center<br>弹性项目居中紧挨着填充。（如果剩余的自由空间是负的，则弹性项目将在两个方向上同时溢出）。</p>\n</li>\n<li><p>space-between<br>弹性项目平均分布在该行上。如果剩余空间为负或者只有一个弹性项，则该值等同于flex-start。否则，第1个弹性项的外边距和行的main-start边线对齐，而最后1个弹性项的外边距和行的main-end边线对齐，然后剩余的弹性项分布在该行上，相邻项目的间隔相等。</p>\n</li>\n<li>space-around<br>弹性项目平均分布在该行上，两边留有一半的间隔空间。如果剩余空间为负或者只有一个弹性项，则该值等同于center。否则，弹性项目沿该行分布，且彼此间隔相等（比如是20px），同时首尾两边和弹性容器之间留有一半的间隔（1/2*20px=10px）。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">container: &#123;</div><div class=\"line\">            <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#eae7ff'</span>,<span class=\"comment\">//背景</span></div><div class=\"line\">            marginTop: <span class=\"number\">20</span>,</div><div class=\"line\">            <span class=\"attr\">flex</span>: <span class=\"number\">1</span>,</div><div class=\"line\">            <span class=\"attr\">flexDirection</span>: <span class=\"string\">'row'</span>,</div><div class=\"line\">            <span class=\"attr\">justifyContent</span>:<span class=\"string\">'flex-start'</span></div><div class=\"line\"></div><div class=\"line\">        &#125;,</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>flex-start</th>\n<th style=\"text-align:center\">center</th>\n<th style=\"text-align:right\">flex-end</th>\n<th style=\"text-align:center\">space-around</th>\n<th style=\"text-align:center\">space-between</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/justify_cotent_flex_start.png\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/justify_cotent_center.png\" alt=\"\"></td>\n<td style=\"text-align:right\"><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/justify_cotent_flex-end.png\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/justify_cotent_space-around.png\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/justify_cotent_space-between.png\" alt=\"\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Align-Items\"><a href=\"#Align-Items\" class=\"headerlink\" title=\"Align Items\"></a>Align Items</h2><p>在组件的style中指定alignItems可以决定其子元素沿着次轴（与主轴垂直的轴，比如若主轴方向为row，则次轴方向为column）的排列方式。子元素是应该靠近次轴的起始端还是末尾段分布呢？亦或应该均匀分布？对应的这些可选项有：flex-start、center、flex-end以及stretch。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">container: &#123;</div><div class=\"line\">          <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#eae7ff'</span>,<span class=\"comment\">//背景</span></div><div class=\"line\">          marginTop: <span class=\"number\">20</span>,</div><div class=\"line\">          <span class=\"attr\">flex</span>: <span class=\"number\">1</span>,</div><div class=\"line\">          <span class=\"attr\">flexDirection</span>: <span class=\"string\">'column'</span>,</div><div class=\"line\">          <span class=\"attr\">justifyContent</span>:<span class=\"string\">'center'</span>,</div><div class=\"line\">          <span class=\"attr\">alignItems</span>:<span class=\"string\">'flex-start'</span></div><div class=\"line\"></div><div class=\"line\">      &#125;,</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>flex-start</th>\n<th style=\"text-align:center\">center</th>\n<th style=\"text-align:right\">flex-end</th>\n<th style=\"text-align:center\">stretch</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/alignItems_flex-start.png\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/alignItems_center.png\" alt=\"\"></td>\n<td style=\"text-align:right\"><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/alignItems_flex-end.png\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/alignItems_stretch.png\" alt=\"\"></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>注意<br>要使stretch选项生效的话，子元素在次轴方向上不能有固定的尺寸。以下面的代码为例：只有将子元素样式中的 width: 50去掉之后，alignItems: ‘stretch’才能生效。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"flexBox-布局\"><a href=\"#flexBox-布局\" class=\"headerlink\" title=\"flexBox 布局\"></a>flexBox 布局</h1><p>与css中的flexBox布局类似，如下所示(转载网路)</p>\n<table class=\"table table-bordered table-striped table-condensed\"><tr><td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/flex-direction.jpg\"></td><td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/flex-wrap.jpg\"></td></tr><tr><td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/justify-content.jpg\"></td><td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/align-items.jpg\"></td></tr><tr><td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/align-content.jpg\"></td></tr></table>","more":"<h2 id=\"弹性（Flex）宽高\"><a href=\"#弹性（Flex）宽高\" class=\"headerlink\" title=\"弹性（Flex）宽高\"></a>弹性（Flex）宽高</h2><p>在组件样式中使用flex可以使其在可利用的空间中动态地扩张或收缩。一般而言我们会使用flex:1来指定某个组件扩张以撑满所有剩余的空间。如果有多个并列的子组件使用了flex:1，则这些子组件会平分父容器中剩余的空间。如果这些并列的子组件的flex值不一样，则谁的值更大，谁占据剩余空间的比例就更大（即占据剩余空间的比等于并列组件间flex值的比）。</p>\n<ul>\n<li>指定flex:1占满整个屏幕</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">container: &#123;</div><div class=\"line\">            <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#eae7ff'</span>,<span class=\"comment\">//背景</span></div><div class=\"line\">            marginTop: <span class=\"number\">20</span>,</div><div class=\"line\">            <span class=\"attr\">flex</span>: <span class=\"number\">1</span></div><div class=\"line\">        &#125;,</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/flex_1.png\" alt=\"指定flex:1\"></p>\n<ul>\n<li>不指定flex</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">container: &#123;</div><div class=\"line\">        <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#eae7ff'</span>,<span class=\"comment\">//背景</span></div><div class=\"line\">        marginTop: <span class=\"number\">20</span></div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/no_flex.png\" alt=\"指定flex:1\"></p>\n<h2 id=\"Flex-Direction\"><a href=\"#Flex-Direction\" class=\"headerlink\" title=\"Flex Direction\"></a>Flex Direction</h2><p>在组件的style中指定flexDirection可以决定布局的主轴。子元素是应该沿着水平轴(row)方向排列，还是沿着竖直轴(column)方向排列呢？默认值是竖直轴(column)方向。有以下值：’row’, ‘row-reverse’, ‘column’, ‘column-reverse’</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Sample React Native App</div><div class=\"line\"> * https://github.com/facebook/react-native</div><div class=\"line\"> * @flow</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;</div><div class=\"line\">    AppRegistry,</div><div class=\"line\">    StyleSheet,</div><div class=\"line\">    Text,</div><div class=\"line\">    View</div><div class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovieTalk</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            &lt;View style=&#123;styles.container&#125;&gt;</div><div class=\"line\">                &lt;Text style=&#123;styles.item1&#125;&gt;</div><div class=\"line\">                    1</div><div class=\"line\">                &lt;/Text&gt;</div><div class=\"line\">                &lt;Text style=&#123;styles.item2&#125;&gt;</div><div class=\"line\">                    2</div><div class=\"line\">                &lt;/Text&gt;</div><div class=\"line\">                &lt;Text style=&#123;styles.item3&#125;&gt;</div><div class=\"line\">                    3</div><div class=\"line\">                &lt;/Text&gt;</div><div class=\"line\">            &lt;/View&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> styles = StyleSheet.create(&#123;</div><div class=\"line\">        <span class=\"attr\">container</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#eae7ff'</span>,<span class=\"comment\">//背景</span></div><div class=\"line\">            marginTop: <span class=\"number\">20</span>,</div><div class=\"line\">            <span class=\"attr\">flex</span>: <span class=\"number\">1</span>,</div><div class=\"line\">            <span class=\"attr\">flexDirection</span>: <span class=\"string\">'row'</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">item1</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'powderblue'</span>,</div><div class=\"line\">            <span class=\"attr\">width</span>: <span class=\"number\">50</span>,</div><div class=\"line\">            <span class=\"attr\">height</span>: <span class=\"number\">50</span>,</div><div class=\"line\">            <span class=\"attr\">margin</span>: <span class=\"number\">5</span>,</div><div class=\"line\">            <span class=\"attr\">fontSize</span>: <span class=\"number\">30</span>,</div><div class=\"line\">            <span class=\"attr\">color</span>: <span class=\"string\">'red'</span></div><div class=\"line\"></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">item2</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'skyblue'</span>,</div><div class=\"line\">            <span class=\"attr\">width</span>: <span class=\"number\">50</span>,</div><div class=\"line\">            <span class=\"attr\">height</span>: <span class=\"number\">50</span>,</div><div class=\"line\">            <span class=\"attr\">margin</span>: <span class=\"number\">5</span>,</div><div class=\"line\">            <span class=\"attr\">fontSize</span>: <span class=\"number\">30</span>,</div><div class=\"line\">            <span class=\"attr\">color</span>: <span class=\"string\">'green'</span></div><div class=\"line\"></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">item3</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'steelblue'</span>,</div><div class=\"line\">            <span class=\"attr\">width</span>: <span class=\"number\">50</span>,</div><div class=\"line\">            <span class=\"attr\">height</span>: <span class=\"number\">50</span>,</div><div class=\"line\">            <span class=\"attr\">margin</span>: <span class=\"number\">5</span>,</div><div class=\"line\">            <span class=\"attr\">fontSize</span>: <span class=\"number\">30</span>,</div><div class=\"line\">            <span class=\"attr\">color</span>: <span class=\"string\">'blue'</span></div><div class=\"line\"></div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;)</div><div class=\"line\">;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent(<span class=\"string\">'MovieTalk'</span>, () =&gt; MovieTalk);</div></pre></td></tr></table></figure>\n<table class=\"table table-bordered table-striped table-condensed\"><tr><th>flexDirection: ‘row’</th><th>flexDirection: ‘row-reverse’</th><th>flexDirection: ‘column’</th><th>flexDirection: ‘column-reverse’</th></tr><tr><td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/flex_derection_row.png\"></td><br><td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/row-reverse.png\" <=\"\" td=\"\"></td><td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/flex_direction_column.png\"></td><td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/column-reverse.png\" <=\"\" td=\"\"></td></tr></table>\n\n<h2 id=\"Justify-Content\"><a href=\"#Justify-Content\" class=\"headerlink\" title=\"Justify Content\"></a>Justify Content</h2><p>在组件的style中指定justifyContent可以决定其子元素沿着主轴的排列方式。子元素是应该靠近主轴的起始端还是末尾段分布呢？亦或应该均匀分布？对应的这些可选项有：flex-start、center、flex-end、space-around以及space-between。</p>\n<ul>\n<li><p>flex-start<br>弹性项目向行头紧挨着填充。这个是默认值。第一个弹性项的main-start外边距边线被放置在该行的main-start边线，而后续弹性项依次平齐摆放。</p>\n</li>\n<li><p>flex-end<br>弹性项目向行尾紧挨着填充。第一个弹性项的main-end外边距边线被放置在该行的main-end边线，而后续弹性项依次平齐摆放。</p>\n</li>\n<li><p>center<br>弹性项目居中紧挨着填充。（如果剩余的自由空间是负的，则弹性项目将在两个方向上同时溢出）。</p>\n</li>\n<li><p>space-between<br>弹性项目平均分布在该行上。如果剩余空间为负或者只有一个弹性项，则该值等同于flex-start。否则，第1个弹性项的外边距和行的main-start边线对齐，而最后1个弹性项的外边距和行的main-end边线对齐，然后剩余的弹性项分布在该行上，相邻项目的间隔相等。</p>\n</li>\n<li>space-around<br>弹性项目平均分布在该行上，两边留有一半的间隔空间。如果剩余空间为负或者只有一个弹性项，则该值等同于center。否则，弹性项目沿该行分布，且彼此间隔相等（比如是20px），同时首尾两边和弹性容器之间留有一半的间隔（1/2*20px=10px）。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">container: &#123;</div><div class=\"line\">            <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#eae7ff'</span>,<span class=\"comment\">//背景</span></div><div class=\"line\">            marginTop: <span class=\"number\">20</span>,</div><div class=\"line\">            <span class=\"attr\">flex</span>: <span class=\"number\">1</span>,</div><div class=\"line\">            <span class=\"attr\">flexDirection</span>: <span class=\"string\">'row'</span>,</div><div class=\"line\">            <span class=\"attr\">justifyContent</span>:<span class=\"string\">'flex-start'</span></div><div class=\"line\"></div><div class=\"line\">        &#125;,</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>flex-start</th>\n<th style=\"text-align:center\">center</th>\n<th style=\"text-align:right\">flex-end</th>\n<th style=\"text-align:center\">space-around</th>\n<th style=\"text-align:center\">space-between</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/justify_cotent_flex_start.png\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/justify_cotent_center.png\" alt=\"\"></td>\n<td style=\"text-align:right\"><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/justify_cotent_flex-end.png\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/justify_cotent_space-around.png\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/justify_cotent_space-between.png\" alt=\"\"></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Align-Items\"><a href=\"#Align-Items\" class=\"headerlink\" title=\"Align Items\"></a>Align Items</h2><p>在组件的style中指定alignItems可以决定其子元素沿着次轴（与主轴垂直的轴，比如若主轴方向为row，则次轴方向为column）的排列方式。子元素是应该靠近次轴的起始端还是末尾段分布呢？亦或应该均匀分布？对应的这些可选项有：flex-start、center、flex-end以及stretch。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">container: &#123;</div><div class=\"line\">          <span class=\"attr\">backgroundColor</span>: <span class=\"string\">'#eae7ff'</span>,<span class=\"comment\">//背景</span></div><div class=\"line\">          marginTop: <span class=\"number\">20</span>,</div><div class=\"line\">          <span class=\"attr\">flex</span>: <span class=\"number\">1</span>,</div><div class=\"line\">          <span class=\"attr\">flexDirection</span>: <span class=\"string\">'column'</span>,</div><div class=\"line\">          <span class=\"attr\">justifyContent</span>:<span class=\"string\">'center'</span>,</div><div class=\"line\">          <span class=\"attr\">alignItems</span>:<span class=\"string\">'flex-start'</span></div><div class=\"line\"></div><div class=\"line\">      &#125;,</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>flex-start</th>\n<th style=\"text-align:center\">center</th>\n<th style=\"text-align:right\">flex-end</th>\n<th style=\"text-align:center\">stretch</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/alignItems_flex-start.png\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/alignItems_center.png\" alt=\"\"></td>\n<td style=\"text-align:right\"><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/alignItems_flex-end.png\" alt=\"\"></td>\n<td style=\"text-align:center\"><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/alignItems_stretch.png\" alt=\"\"></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>注意<br>要使stretch选项生效的话，子元素在次轴方向上不能有固定的尺寸。以下面的代码为例：只有将子元素样式中的 width: 50去掉之后，alignItems: ‘stretch’才能生效。</li>\n</ul>"},{"title":"RxJava探究（三） RxJava操作符之Transforming Observables","date":"2016-07-03T02:54:50.000Z","_content":"\nTransform类操作符，可以转换由一个Observable对象发出的对象。\n\n## Buffer\n顾名思义缓存的意思\n\n### Observable<List<T>> buffer(int count, int skip)\n每隔skip长度后，发出size为conut的Observable\n\n![](http://reactivex.io/documentation/operators/images/buffer4.png)\n\n```java\n Observable.just(1, 2, 3, 4, 5, 6, 7, 8, 9).buffer(2,4)\n .subscribe(new Action1<List<Integer>>() {\n            @Override\n            public void call(List<Integer> i) {\n                System.out.println(\"buffer \" + i);\n            }\n        });\n```\n\n每隔4个数，输出一个长度为2的集合，输出为：\n```\nbuffer [1, 2]\nbuffer [5, 6]\nbuffer [9]\n```\n<!--more-->\n### Observable<List<T>> buffer(long timespan, TimeUnit unit)\n\n周期性的订阅\n```java\nObservable.create(new Observable.OnSubscribe<String>() {  \n           @Override  \n           public void call(Subscriber<? super String> subscriber) {  \n               if (subscriber.isUnsubscribed()) return;  \n               while (true) {  \n                   subscriber.onNext(\"消息\" + SystemClock.elapsedRealtime());  \n                   SystemClock.sleep(2000);//每隔2s发送消息  \n               }  \n  \n           }  \n       }).subscribeOn(Schedulers.io()).  \n               buffer(3, TimeUnit.SECONDS).//每隔3秒 取出消息  \n               subscribe(new Observer<List<String>>() {  \n           @Override  \n           public void onCompleted() {  \n               LogUtils.d(\"-----------------onCompleted:\");  \n           }  \n  \n           @Override  \n           public void onError(Throwable e) {  \n               LogUtils.d(\"----------------->onError:\");  \n           }  \n  \n           @Override  \n           public void onNext(List<String> strings) {  \n               LogUtils.d(\"----------------->onNext:\" + strings);  \n           }  \n       });  \n```\n\n程序输出如下：\n\n```\nonNext:[消息370507667, 消息370509668]\nonNext:[消息370511668]\nonNext:[消息370513669, 消息370515669]\nonNext:[消息370529168, 消息370531172]\nonNext:[消息370533184]\nonNext:[消息370535184, 消息370537184]\nonNext:[消息370539184]\nonNext:[消息370541185, 消息370543204]\nonNext:[消息370545204]\nonNext:[消息370547204, 消息370549204]\nonNext:[消息370551204]\n\n```\n\n","source":"_posts/RxJava探究（三）-RxJava操作符之Transforming-Observables.md","raw":"title: RxJava探究（三） RxJava操作符之Transforming Observables\ndate: 2016-07-03 10:54:50\ncategories: RxJava探究\ntags: RxJava\n---\n\nTransform类操作符，可以转换由一个Observable对象发出的对象。\n\n## Buffer\n顾名思义缓存的意思\n\n### Observable<List<T>> buffer(int count, int skip)\n每隔skip长度后，发出size为conut的Observable\n\n![](http://reactivex.io/documentation/operators/images/buffer4.png)\n\n```java\n Observable.just(1, 2, 3, 4, 5, 6, 7, 8, 9).buffer(2,4)\n .subscribe(new Action1<List<Integer>>() {\n            @Override\n            public void call(List<Integer> i) {\n                System.out.println(\"buffer \" + i);\n            }\n        });\n```\n\n每隔4个数，输出一个长度为2的集合，输出为：\n```\nbuffer [1, 2]\nbuffer [5, 6]\nbuffer [9]\n```\n<!--more-->\n### Observable<List<T>> buffer(long timespan, TimeUnit unit)\n\n周期性的订阅\n```java\nObservable.create(new Observable.OnSubscribe<String>() {  \n           @Override  \n           public void call(Subscriber<? super String> subscriber) {  \n               if (subscriber.isUnsubscribed()) return;  \n               while (true) {  \n                   subscriber.onNext(\"消息\" + SystemClock.elapsedRealtime());  \n                   SystemClock.sleep(2000);//每隔2s发送消息  \n               }  \n  \n           }  \n       }).subscribeOn(Schedulers.io()).  \n               buffer(3, TimeUnit.SECONDS).//每隔3秒 取出消息  \n               subscribe(new Observer<List<String>>() {  \n           @Override  \n           public void onCompleted() {  \n               LogUtils.d(\"-----------------onCompleted:\");  \n           }  \n  \n           @Override  \n           public void onError(Throwable e) {  \n               LogUtils.d(\"----------------->onError:\");  \n           }  \n  \n           @Override  \n           public void onNext(List<String> strings) {  \n               LogUtils.d(\"----------------->onNext:\" + strings);  \n           }  \n       });  \n```\n\n程序输出如下：\n\n```\nonNext:[消息370507667, 消息370509668]\nonNext:[消息370511668]\nonNext:[消息370513669, 消息370515669]\nonNext:[消息370529168, 消息370531172]\nonNext:[消息370533184]\nonNext:[消息370535184, 消息370537184]\nonNext:[消息370539184]\nonNext:[消息370541185, 消息370543204]\nonNext:[消息370545204]\nonNext:[消息370547204, 消息370549204]\nonNext:[消息370551204]\n\n```\n\n","slug":"RxJava探究（三）-RxJava操作符之Transforming-Observables","published":1,"updated":"2017-02-22T04:11:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjryltlbb000zncaqiwu4tued","content":"<p>Transform类操作符，可以转换由一个Observable对象发出的对象。</p>\n<h2 id=\"Buffer\"><a href=\"#Buffer\" class=\"headerlink\" title=\"Buffer\"></a>Buffer</h2><p>顾名思义缓存的意思</p>\n<h3 id=\"Observable\"><a href=\"#Observable\" class=\"headerlink\" title=\"Observable\"></a>Observable<list<t>&gt; buffer(int count, int skip)</list<t></h3><p>每隔skip长度后，发出size为conut的Observable</p>\n<p><img src=\"http://reactivex.io/documentation/operators/images/buffer4.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>).buffer(<span class=\"number\">2</span>,<span class=\"number\">4</span>)</div><div class=\"line\">.subscribe(<span class=\"keyword\">new</span> Action1&lt;List&lt;Integer&gt;&gt;() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(List&lt;Integer&gt; i)</span> </span>&#123;</div><div class=\"line\">               System.out.println(<span class=\"string\">\"buffer \"</span> + i);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n<p>每隔4个数，输出一个长度为2的集合，输出为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">buffer [1, 2]</div><div class=\"line\">buffer [5, 6]</div><div class=\"line\">buffer [9]</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"Observable-1\"><a href=\"#Observable-1\" class=\"headerlink\" title=\"Observable\"></a>Observable<list<t>&gt; buffer(long timespan, TimeUnit unit)</list<t></h3><p>周期性的订阅<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.create(<span class=\"keyword\">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;  </div><div class=\"line\">           <span class=\"meta\">@Override</span>  </div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> String&gt; subscriber)</span> </span>&#123;  </div><div class=\"line\">               <span class=\"keyword\">if</span> (subscriber.isUnsubscribed()) <span class=\"keyword\">return</span>;  </div><div class=\"line\">               <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;  </div><div class=\"line\">                   subscriber.onNext(<span class=\"string\">\"消息\"</span> + SystemClock.elapsedRealtime());  </div><div class=\"line\">                   SystemClock.sleep(<span class=\"number\">2000</span>);<span class=\"comment\">//每隔2s发送消息  </span></div><div class=\"line\">               &#125;  </div><div class=\"line\">  </div><div class=\"line\">           &#125;  </div><div class=\"line\">       &#125;).subscribeOn(Schedulers.io()).  </div><div class=\"line\">               buffer(<span class=\"number\">3</span>, TimeUnit.SECONDS).<span class=\"comment\">//每隔3秒 取出消息  </span></div><div class=\"line\">               subscribe(<span class=\"keyword\">new</span> Observer&lt;List&lt;String&gt;&gt;() &#123;  </div><div class=\"line\">           <span class=\"meta\">@Override</span>  </div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">               LogUtils.d(<span class=\"string\">\"-----------------onCompleted:\"</span>);  </div><div class=\"line\">           &#125;  </div><div class=\"line\">  </div><div class=\"line\">           <span class=\"meta\">@Override</span>  </div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;  </div><div class=\"line\">               LogUtils.d(<span class=\"string\">\"-----------------&gt;onError:\"</span>);  </div><div class=\"line\">           &#125;  </div><div class=\"line\">  </div><div class=\"line\">           <span class=\"meta\">@Override</span>  </div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(List&lt;String&gt; strings)</span> </span>&#123;  </div><div class=\"line\">               LogUtils.d(<span class=\"string\">\"-----------------&gt;onNext:\"</span> + strings);  </div><div class=\"line\">           &#125;  </div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure></p>\n<p>程序输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">onNext:[消息370507667, 消息370509668]</div><div class=\"line\">onNext:[消息370511668]</div><div class=\"line\">onNext:[消息370513669, 消息370515669]</div><div class=\"line\">onNext:[消息370529168, 消息370531172]</div><div class=\"line\">onNext:[消息370533184]</div><div class=\"line\">onNext:[消息370535184, 消息370537184]</div><div class=\"line\">onNext:[消息370539184]</div><div class=\"line\">onNext:[消息370541185, 消息370543204]</div><div class=\"line\">onNext:[消息370545204]</div><div class=\"line\">onNext:[消息370547204, 消息370549204]</div><div class=\"line\">onNext:[消息370551204]</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>Transform类操作符，可以转换由一个Observable对象发出的对象。</p>\n<h2 id=\"Buffer\"><a href=\"#Buffer\" class=\"headerlink\" title=\"Buffer\"></a>Buffer</h2><p>顾名思义缓存的意思</p>\n<h3 id=\"Observable\"><a href=\"#Observable\" class=\"headerlink\" title=\"Observable\"></a>Observable<list<t>&gt; buffer(int count, int skip)</list<t></h3><p>每隔skip长度后，发出size为conut的Observable</p>\n<p><img src=\"http://reactivex.io/documentation/operators/images/buffer4.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>).buffer(<span class=\"number\">2</span>,<span class=\"number\">4</span>)</div><div class=\"line\">.subscribe(<span class=\"keyword\">new</span> Action1&lt;List&lt;Integer&gt;&gt;() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(List&lt;Integer&gt; i)</span> </span>&#123;</div><div class=\"line\">               System.out.println(<span class=\"string\">\"buffer \"</span> + i);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n<p>每隔4个数，输出一个长度为2的集合，输出为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">buffer [1, 2]</div><div class=\"line\">buffer [5, 6]</div><div class=\"line\">buffer [9]</div></pre></td></tr></table></figure></p>","more":"<h3 id=\"Observable-1\"><a href=\"#Observable-1\" class=\"headerlink\" title=\"Observable\"></a>Observable<list<t>&gt; buffer(long timespan, TimeUnit unit)</list<t></h3><p>周期性的订阅<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.create(<span class=\"keyword\">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;  </div><div class=\"line\">           <span class=\"meta\">@Override</span>  </div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> String&gt; subscriber)</span> </span>&#123;  </div><div class=\"line\">               <span class=\"keyword\">if</span> (subscriber.isUnsubscribed()) <span class=\"keyword\">return</span>;  </div><div class=\"line\">               <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;  </div><div class=\"line\">                   subscriber.onNext(<span class=\"string\">\"消息\"</span> + SystemClock.elapsedRealtime());  </div><div class=\"line\">                   SystemClock.sleep(<span class=\"number\">2000</span>);<span class=\"comment\">//每隔2s发送消息  </span></div><div class=\"line\">               &#125;  </div><div class=\"line\">  </div><div class=\"line\">           &#125;  </div><div class=\"line\">       &#125;).subscribeOn(Schedulers.io()).  </div><div class=\"line\">               buffer(<span class=\"number\">3</span>, TimeUnit.SECONDS).<span class=\"comment\">//每隔3秒 取出消息  </span></div><div class=\"line\">               subscribe(<span class=\"keyword\">new</span> Observer&lt;List&lt;String&gt;&gt;() &#123;  </div><div class=\"line\">           <span class=\"meta\">@Override</span>  </div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;  </div><div class=\"line\">               LogUtils.d(<span class=\"string\">\"-----------------onCompleted:\"</span>);  </div><div class=\"line\">           &#125;  </div><div class=\"line\">  </div><div class=\"line\">           <span class=\"meta\">@Override</span>  </div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;  </div><div class=\"line\">               LogUtils.d(<span class=\"string\">\"-----------------&gt;onError:\"</span>);  </div><div class=\"line\">           &#125;  </div><div class=\"line\">  </div><div class=\"line\">           <span class=\"meta\">@Override</span>  </div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(List&lt;String&gt; strings)</span> </span>&#123;  </div><div class=\"line\">               LogUtils.d(<span class=\"string\">\"-----------------&gt;onNext:\"</span> + strings);  </div><div class=\"line\">           &#125;  </div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure></p>\n<p>程序输出如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">onNext:[消息370507667, 消息370509668]</div><div class=\"line\">onNext:[消息370511668]</div><div class=\"line\">onNext:[消息370513669, 消息370515669]</div><div class=\"line\">onNext:[消息370529168, 消息370531172]</div><div class=\"line\">onNext:[消息370533184]</div><div class=\"line\">onNext:[消息370535184, 消息370537184]</div><div class=\"line\">onNext:[消息370539184]</div><div class=\"line\">onNext:[消息370541185, 消息370543204]</div><div class=\"line\">onNext:[消息370545204]</div><div class=\"line\">onNext:[消息370547204, 消息370549204]</div><div class=\"line\">onNext:[消息370551204]</div></pre></td></tr></table></figure>"},{"title":"RxJava探究（一）RxJava初体验","date":"2016-05-02T14:15:47.000Z","_content":"\n## RxJava是什么\n最近Android社区中，RxJava可算是非常火，以至于你不会RxJava就不好意思说你是一个Android开发工程师，本着学习的态度，来体验一下RxJava。\n\nRxJava是一种响应式编程，基于观察者模式（于观察者模式稍稍有差别）在处理异步回调时有着得天独厚的优势，在处理复杂的列表过滤、变化、转换等时，RxJava为我们提供了全新的思想。\n\n\n## 如何使用RxJava\n\n### Gradle中引入\n\n```java\ncompile 'io.reactivex:rxjava:1.1.0' \n```\n\t\n### 创建被观察者、事件源Observable\n\n```Java\n   //被观察者，事件源\n   Observable<String> myObservable = Observable.create(new Observable.OnSubscribe<String>() {\n            @Override\n            public void call(Subscriber<? super String> subscriber) {\n                subscriber.onNext(\"Hello world!\");\n                subscriber.onCompleted();\n            }\n        });\n```\n定义Observable对象myObservable,只是传达一个“Hello world!”字符串就OK了，下面我们创建Subscriber来处理myObservable发出的\"Hello world!\"\n### 创建订阅者、观察者对象Subscriber\n\n\n<!--more-->\n```Java\n//订阅者\nSubscriber<String> mySubscriber = new Subscriber<String>() {\n            @Override\n            public void onCompleted() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(String s) {\n                System.out.println(s);\n            }\n        };\n\n```\n定义Subscriber对象mySubscriber，打印myObservable对象发出的字符串\"Hellow world!\"\n### 关联观察者和被观察者，即就是让被观察者订阅观察者对象\n通过subscribe方法建立观察者和被观察者之间的联系\n\n```Java\nmyObservable.subscribe(mySubscriber);\n```\n\n关联后程序就会打印\"Hellow world!\"\n\n### 简化代码\n\nRxJava中提供多种创建Observale对象的方法，上面我们的Observale对象仅仅是发出了一个字符串就结束了，那么我们可以用Observable.just()方法。\nObservable.just(): Returns an Observable that emits a single item and then completes. 返回发出单一事件就结束的Observale对象。\n\n```Java\nObservable<String> myObservable = Observable.just(\"Hello world!\");\n```\n\n上面的例子中Subscriber对象只关心onNext()方法，所以可以用Action1类来处理\n\n```java\n   //如果只需要在onNext处理,可以用Action1\n        Action1<String> onNextAction = new Action1<String>() {\n            @Override\n            public void call(String s) {\n                System.out.println(s);\n            }\n        };\n```\nsubscribe方法有一个重载版本，接受三个Action1类型的参数，分别对应OnNext，OnComplete， OnError函数。\n\n```java\n  myObservable.subscribe(onNextAction, onErrorAction, onCompleteAction);\n```\n\n我们只关心onNext,所以上面的代码可以简写为\n```java\n       //just用来创建只发出一个事件就结束的Observable对象\n        Observable<String> myObservable = Observable.just(\"Hello world!\");\n        //如果只需要在onNext处理,可以用Action1\n        Action1<String> onNextAction = new Action1<String>() {\n            @Override\n            public void call(String s) {\n                System.out.println(s);\n            }\n        };\n        myObservable.subscribe(onNextAction);\n```\n\n最终的代码可以是\n```java\n      //上面可以简写为\n        Observable.just(\"Hello world!\")\n                .subscribe(new Action1<String>() {\n                    @Override\n                    public void call(String s) {\n                        System.out.println(s);\n                    }\n                });\n```\n\n\n\n\n    \n","source":"_posts/RxJava探究（一）RxJava初体验.md","raw":"title: RxJava探究（一）RxJava初体验\ndate: 2016-05-02 22:15:47\ncategories: RxJava探究\ntags: RxJava\n\n---\n\n## RxJava是什么\n最近Android社区中，RxJava可算是非常火，以至于你不会RxJava就不好意思说你是一个Android开发工程师，本着学习的态度，来体验一下RxJava。\n\nRxJava是一种响应式编程，基于观察者模式（于观察者模式稍稍有差别）在处理异步回调时有着得天独厚的优势，在处理复杂的列表过滤、变化、转换等时，RxJava为我们提供了全新的思想。\n\n\n## 如何使用RxJava\n\n### Gradle中引入\n\n```java\ncompile 'io.reactivex:rxjava:1.1.0' \n```\n\t\n### 创建被观察者、事件源Observable\n\n```Java\n   //被观察者，事件源\n   Observable<String> myObservable = Observable.create(new Observable.OnSubscribe<String>() {\n            @Override\n            public void call(Subscriber<? super String> subscriber) {\n                subscriber.onNext(\"Hello world!\");\n                subscriber.onCompleted();\n            }\n        });\n```\n定义Observable对象myObservable,只是传达一个“Hello world!”字符串就OK了，下面我们创建Subscriber来处理myObservable发出的\"Hello world!\"\n### 创建订阅者、观察者对象Subscriber\n\n\n<!--more-->\n```Java\n//订阅者\nSubscriber<String> mySubscriber = new Subscriber<String>() {\n            @Override\n            public void onCompleted() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(String s) {\n                System.out.println(s);\n            }\n        };\n\n```\n定义Subscriber对象mySubscriber，打印myObservable对象发出的字符串\"Hellow world!\"\n### 关联观察者和被观察者，即就是让被观察者订阅观察者对象\n通过subscribe方法建立观察者和被观察者之间的联系\n\n```Java\nmyObservable.subscribe(mySubscriber);\n```\n\n关联后程序就会打印\"Hellow world!\"\n\n### 简化代码\n\nRxJava中提供多种创建Observale对象的方法，上面我们的Observale对象仅仅是发出了一个字符串就结束了，那么我们可以用Observable.just()方法。\nObservable.just(): Returns an Observable that emits a single item and then completes. 返回发出单一事件就结束的Observale对象。\n\n```Java\nObservable<String> myObservable = Observable.just(\"Hello world!\");\n```\n\n上面的例子中Subscriber对象只关心onNext()方法，所以可以用Action1类来处理\n\n```java\n   //如果只需要在onNext处理,可以用Action1\n        Action1<String> onNextAction = new Action1<String>() {\n            @Override\n            public void call(String s) {\n                System.out.println(s);\n            }\n        };\n```\nsubscribe方法有一个重载版本，接受三个Action1类型的参数，分别对应OnNext，OnComplete， OnError函数。\n\n```java\n  myObservable.subscribe(onNextAction, onErrorAction, onCompleteAction);\n```\n\n我们只关心onNext,所以上面的代码可以简写为\n```java\n       //just用来创建只发出一个事件就结束的Observable对象\n        Observable<String> myObservable = Observable.just(\"Hello world!\");\n        //如果只需要在onNext处理,可以用Action1\n        Action1<String> onNextAction = new Action1<String>() {\n            @Override\n            public void call(String s) {\n                System.out.println(s);\n            }\n        };\n        myObservable.subscribe(onNextAction);\n```\n\n最终的代码可以是\n```java\n      //上面可以简写为\n        Observable.just(\"Hello world!\")\n                .subscribe(new Action1<String>() {\n                    @Override\n                    public void call(String s) {\n                        System.out.println(s);\n                    }\n                });\n```\n\n\n\n\n    \n","slug":"RxJava探究（一）RxJava初体验","published":1,"updated":"2017-02-22T04:10:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjryltlbc0013ncaqgqh0t11g","content":"<h2 id=\"RxJava是什么\"><a href=\"#RxJava是什么\" class=\"headerlink\" title=\"RxJava是什么\"></a>RxJava是什么</h2><p>最近Android社区中，RxJava可算是非常火，以至于你不会RxJava就不好意思说你是一个Android开发工程师，本着学习的态度，来体验一下RxJava。</p>\n<p>RxJava是一种响应式编程，基于观察者模式（于观察者模式稍稍有差别）在处理异步回调时有着得天独厚的优势，在处理复杂的列表过滤、变化、转换等时，RxJava为我们提供了全新的思想。</p>\n<h2 id=\"如何使用RxJava\"><a href=\"#如何使用RxJava\" class=\"headerlink\" title=\"如何使用RxJava\"></a>如何使用RxJava</h2><h3 id=\"Gradle中引入\"><a href=\"#Gradle中引入\" class=\"headerlink\" title=\"Gradle中引入\"></a>Gradle中引入</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'io.reactivex:rxjava:1.1.0'</span></div></pre></td></tr></table></figure>\n<h3 id=\"创建被观察者、事件源Observable\"><a href=\"#创建被观察者、事件源Observable\" class=\"headerlink\" title=\"创建被观察者、事件源Observable\"></a>创建被观察者、事件源Observable</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//被观察者，事件源</span></div><div class=\"line\">Observable&lt;String&gt; myObservable = Observable.create(<span class=\"keyword\">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class=\"line\">         <span class=\"meta\">@Override</span></div><div class=\"line\">         <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class=\"line\">             subscriber.onNext(<span class=\"string\">\"Hello world!\"</span>);</div><div class=\"line\">             subscriber.onCompleted();</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;);</div></pre></td></tr></table></figure>\n<p>定义Observable对象myObservable,只是传达一个“Hello world!”字符串就OK了，下面我们创建Subscriber来处理myObservable发出的”Hello world!”</p>\n<h3 id=\"创建订阅者、观察者对象Subscriber\"><a href=\"#创建订阅者、观察者对象Subscriber\" class=\"headerlink\" title=\"创建订阅者、观察者对象Subscriber\"></a>创建订阅者、观察者对象Subscriber</h3><a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//订阅者</span></div><div class=\"line\">Subscriber&lt;String&gt; mySubscriber = <span class=\"keyword\">new</span> Subscriber&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">                System.out.println(s);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div></pre></td></tr></table></figure>\n<p>定义Subscriber对象mySubscriber，打印myObservable对象发出的字符串”Hellow world!”</p>\n<h3 id=\"关联观察者和被观察者，即就是让被观察者订阅观察者对象\"><a href=\"#关联观察者和被观察者，即就是让被观察者订阅观察者对象\" class=\"headerlink\" title=\"关联观察者和被观察者，即就是让被观察者订阅观察者对象\"></a>关联观察者和被观察者，即就是让被观察者订阅观察者对象</h3><p>通过subscribe方法建立观察者和被观察者之间的联系</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">myObservable.subscribe(mySubscriber);</div></pre></td></tr></table></figure>\n<p>关联后程序就会打印”Hellow world!”</p>\n<h3 id=\"简化代码\"><a href=\"#简化代码\" class=\"headerlink\" title=\"简化代码\"></a>简化代码</h3><p>RxJava中提供多种创建Observale对象的方法，上面我们的Observale对象仅仅是发出了一个字符串就结束了，那么我们可以用Observable.just()方法。<br>Observable.just(): Returns an Observable that emits a single item and then completes. 返回发出单一事件就结束的Observale对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable&lt;String&gt; myObservable = Observable.just(<span class=\"string\">\"Hello world!\"</span>);</div></pre></td></tr></table></figure>\n<p>上面的例子中Subscriber对象只关心onNext()方法，所以可以用Action1类来处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//如果只需要在onNext处理,可以用Action1</span></div><div class=\"line\">     Action1&lt;String&gt; onNextAction = <span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">         <span class=\"meta\">@Override</span></div><div class=\"line\">         <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">             System.out.println(s);</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;;</div></pre></td></tr></table></figure>\n<p>subscribe方法有一个重载版本，接受三个Action1类型的参数，分别对应OnNext，OnComplete， OnError函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">myObservable.subscribe(onNextAction, onErrorAction, onCompleteAction);</div></pre></td></tr></table></figure>\n<p>我们只关心onNext,所以上面的代码可以简写为<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//just用来创建只发出一个事件就结束的Observable对象</span></div><div class=\"line\"> Observable&lt;String&gt; myObservable = Observable.just(<span class=\"string\">\"Hello world!\"</span>);</div><div class=\"line\"> <span class=\"comment\">//如果只需要在onNext处理,可以用Action1</span></div><div class=\"line\"> Action1&lt;String&gt; onNextAction = <span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">     <span class=\"meta\">@Override</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">         System.out.println(s);</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> myObservable.subscribe(onNextAction);</div></pre></td></tr></table></figure></p>\n<p>最终的代码可以是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//上面可以简写为</span></div><div class=\"line\">  Observable.just(<span class=\"string\">\"Hello world!\"</span>)</div><div class=\"line\">          .subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">              <span class=\"meta\">@Override</span></div><div class=\"line\">              <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">                  System.out.println(s);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;);</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"RxJava是什么\"><a href=\"#RxJava是什么\" class=\"headerlink\" title=\"RxJava是什么\"></a>RxJava是什么</h2><p>最近Android社区中，RxJava可算是非常火，以至于你不会RxJava就不好意思说你是一个Android开发工程师，本着学习的态度，来体验一下RxJava。</p>\n<p>RxJava是一种响应式编程，基于观察者模式（于观察者模式稍稍有差别）在处理异步回调时有着得天独厚的优势，在处理复杂的列表过滤、变化、转换等时，RxJava为我们提供了全新的思想。</p>\n<h2 id=\"如何使用RxJava\"><a href=\"#如何使用RxJava\" class=\"headerlink\" title=\"如何使用RxJava\"></a>如何使用RxJava</h2><h3 id=\"Gradle中引入\"><a href=\"#Gradle中引入\" class=\"headerlink\" title=\"Gradle中引入\"></a>Gradle中引入</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile <span class=\"string\">'io.reactivex:rxjava:1.1.0'</span></div></pre></td></tr></table></figure>\n<h3 id=\"创建被观察者、事件源Observable\"><a href=\"#创建被观察者、事件源Observable\" class=\"headerlink\" title=\"创建被观察者、事件源Observable\"></a>创建被观察者、事件源Observable</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//被观察者，事件源</span></div><div class=\"line\">Observable&lt;String&gt; myObservable = Observable.create(<span class=\"keyword\">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class=\"line\">         <span class=\"meta\">@Override</span></div><div class=\"line\">         <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class=\"line\">             subscriber.onNext(<span class=\"string\">\"Hello world!\"</span>);</div><div class=\"line\">             subscriber.onCompleted();</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;);</div></pre></td></tr></table></figure>\n<p>定义Observable对象myObservable,只是传达一个“Hello world!”字符串就OK了，下面我们创建Subscriber来处理myObservable发出的”Hello world!”</p>\n<h3 id=\"创建订阅者、观察者对象Subscriber\"><a href=\"#创建订阅者、观察者对象Subscriber\" class=\"headerlink\" title=\"创建订阅者、观察者对象Subscriber\"></a>创建订阅者、观察者对象Subscriber</h3>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//订阅者</span></div><div class=\"line\">Subscriber&lt;String&gt; mySubscriber = <span class=\"keyword\">new</span> Subscriber&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">                System.out.println(s);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div></pre></td></tr></table></figure>\n<p>定义Subscriber对象mySubscriber，打印myObservable对象发出的字符串”Hellow world!”</p>\n<h3 id=\"关联观察者和被观察者，即就是让被观察者订阅观察者对象\"><a href=\"#关联观察者和被观察者，即就是让被观察者订阅观察者对象\" class=\"headerlink\" title=\"关联观察者和被观察者，即就是让被观察者订阅观察者对象\"></a>关联观察者和被观察者，即就是让被观察者订阅观察者对象</h3><p>通过subscribe方法建立观察者和被观察者之间的联系</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">myObservable.subscribe(mySubscriber);</div></pre></td></tr></table></figure>\n<p>关联后程序就会打印”Hellow world!”</p>\n<h3 id=\"简化代码\"><a href=\"#简化代码\" class=\"headerlink\" title=\"简化代码\"></a>简化代码</h3><p>RxJava中提供多种创建Observale对象的方法，上面我们的Observale对象仅仅是发出了一个字符串就结束了，那么我们可以用Observable.just()方法。<br>Observable.just(): Returns an Observable that emits a single item and then completes. 返回发出单一事件就结束的Observale对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable&lt;String&gt; myObservable = Observable.just(<span class=\"string\">\"Hello world!\"</span>);</div></pre></td></tr></table></figure>\n<p>上面的例子中Subscriber对象只关心onNext()方法，所以可以用Action1类来处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//如果只需要在onNext处理,可以用Action1</span></div><div class=\"line\">     Action1&lt;String&gt; onNextAction = <span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">         <span class=\"meta\">@Override</span></div><div class=\"line\">         <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">             System.out.println(s);</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;;</div></pre></td></tr></table></figure>\n<p>subscribe方法有一个重载版本，接受三个Action1类型的参数，分别对应OnNext，OnComplete， OnError函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">myObservable.subscribe(onNextAction, onErrorAction, onCompleteAction);</div></pre></td></tr></table></figure>\n<p>我们只关心onNext,所以上面的代码可以简写为<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//just用来创建只发出一个事件就结束的Observable对象</span></div><div class=\"line\"> Observable&lt;String&gt; myObservable = Observable.just(<span class=\"string\">\"Hello world!\"</span>);</div><div class=\"line\"> <span class=\"comment\">//如果只需要在onNext处理,可以用Action1</span></div><div class=\"line\"> Action1&lt;String&gt; onNextAction = <span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">     <span class=\"meta\">@Override</span></div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">         System.out.println(s);</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;;</div><div class=\"line\"> myObservable.subscribe(onNextAction);</div></pre></td></tr></table></figure></p>\n<p>最终的代码可以是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//上面可以简写为</span></div><div class=\"line\">  Observable.just(<span class=\"string\">\"Hello world!\"</span>)</div><div class=\"line\">          .subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">              <span class=\"meta\">@Override</span></div><div class=\"line\">              <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">                  System.out.println(s);</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;);</div></pre></td></tr></table></figure></p>"},{"title":"RxJava探究（二） RxJava操作符之Creating Observables","date":"2016-07-02T04:44:59.000Z","_content":"\nRxJava的强大之处就是他提供非常丰富的操作符，超过上百种，这些操作符给我们解决问题带来很多方便。本文主要讲解创建Observale对象一类的操作符，参照官方文档 <http://reactivex.io/documentation/operators.html#creating>。\n\n### Create\nObservable.create()方法用于创建一个Observale对象，该方法接收一个Observer观察者对象。\n\n![](http://reactivex.io/documentation/operators/images/create.c.png)\n\n```java\n\tObservable.create(new Observable.OnSubscribe<Integer>() {\n            @Override\n            public void call(Subscriber<? super Integer> subscriber) {\n                try {\n                    if (!subscriber.isUnsubscribed()) {\n                        for (int i = 1; i < 5; i++) {\n                            subscriber.onNext(i);\n                        }\n\n                        subscriber.onCompleted();\n                    }\n                } catch (Exception e) {\n\n                    subscriber.onError(e);\n                }\n            }\n        }).subscribe(new Subscriber<Integer>() {\n            @Override\n            public void onCompleted() {\n                System.out.println(\"completed !\");\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                System.out.println(\"onError \" + e.getMessage());\n            }\n\n            @Override\n            public void onNext(Integer item) {\n                System.out.println(\"Next \" + item);\n\n            }\n        });\n```\nsubscrible(subscriber)方法调用后会执行OnSubscribe对象的call(subscriber)方法，从而完成回调。\n打印结果如下：\n\n```java\nNext 1\nNext 2\nNext 3\nNext 4\ncompleted !\n```\n<!--more-->\n### Defer \n观察者订阅时创建被观察者对象，对于每个观察者都会创建一个新的被观察者对象,也就是说在观察者订阅之前不创建这个Observable，为每一个观察者创建一个新的Observable。\n\n![](http://reactivex.io/documentation/operators/images/defer.c.png)\n\n如下代码：\n\n```java\nclass SomeType {\n        private String value;\n\n        public void setValue(String value) {\n            this.value = value;\n        }\n\n        public Observable<String> valueObservable() {\n            return Observable.just(value);\n        }\n\n\n    }\n\n    @Test\n    public void defer_just() {\n\n        SomeType someType = new SomeType();\n        Observable<String> observable1 = someType.valueObservable();\n        someType.setValue(\"Some Value\");\n        observable1.subscribe(new Action1<String>() {\n            @Override\n            public void call(String value) {\n                System.out.println(value);\n            }\n        });\n    }\n```\n程序输出是\"Some Value\" 而不是null\n\n### Just\n\n   将某个对象转化为Observable对象，可以使一个数字、一个字符串、数组、Iterate对象等，是一种非常快捷的创建Observable对象的方法,和Defer比较相似\n   ![](http://reactivex.io/documentation/operators/images/just.c.png)\n   \n代码如下：\n```java\nclass SomeType {\n        private String value;\n\n        public void setValue(String value) {\n            this.value = value;\n        }\n\n        public Observable<String> valueObservableFromJust() {\n            return Observable.just(value);\n        }\n\n        public Observable<String> valueObservableFromDefer() {\n            return Observable.defer(new Func0<Observable<String>>() {\n                @Override\n                public Observable<String> call() {\n                    return Observable.just(value);\n                }\n            });\n        }\n    }\n\n    @Test\n    public void defer_just() {\n\n\n        SomeType someType = new SomeType();\n        Observable<String> observable1 = someType.valueObservableFromJust();\n        Observable<String> observable2 = someType.valueObservableFromDefer();\n        someType.setValue(\"Some Value\");\n        observable1.subscribe(new Action1<String>() {\n            @Override\n            public void call(String value) {\n                System.out.println(value);\n            }\n        });\n\n        observable2.subscribe(new Action1<String>() {\n            @Override\n            public void call(String value) {\n                System.out.println(value);\n            }\n        });\n\n    }\n```\n程序输出如下：\n```java\nnull\nSome Value\n```\n由此可知，just和订阅无关，创建时是什么状态订阅时也是什么状态。\n\n### From\n类似Just,可以把一个Future, Iterable或者Array类型转换为Observable对象。\n\n![](http://reactivex.io/documentation/operators/images/from.c.png)\n\n```java\n\n    @Test\n    public void from() {\n        Observable.from(Arrays.asList(1, 2, 3, 4, 5))\n                .subscribe(new Action1<Integer>() {\n                    @Override\n                    public void call(Integer item) {\n                        System.out.println(item);\n                    }\n                });\n\n\t\t//简化为\n        Observable.just(1, 2, 3, 4, 5).subscribe(new Action1<Integer>() {\n            @Override\n            public void call(Integer item) {\n                System.out.println(item);\n            }\n        });\n\n    }\n```\n输出结果为：\n```java\n1\n2\n3\n4\n5\n1\n2\n3\n4\n5\n```\n\n","source":"_posts/RxJava探索（二-RxJava操作符之Creating-Observables.md","raw":"title: RxJava探究（二） RxJava操作符之Creating Observables\ndate: 2016-07-02 12:44:59\ncategories: RxJava探究\ntags: Rxjava\n---\n\nRxJava的强大之处就是他提供非常丰富的操作符，超过上百种，这些操作符给我们解决问题带来很多方便。本文主要讲解创建Observale对象一类的操作符，参照官方文档 <http://reactivex.io/documentation/operators.html#creating>。\n\n### Create\nObservable.create()方法用于创建一个Observale对象，该方法接收一个Observer观察者对象。\n\n![](http://reactivex.io/documentation/operators/images/create.c.png)\n\n```java\n\tObservable.create(new Observable.OnSubscribe<Integer>() {\n            @Override\n            public void call(Subscriber<? super Integer> subscriber) {\n                try {\n                    if (!subscriber.isUnsubscribed()) {\n                        for (int i = 1; i < 5; i++) {\n                            subscriber.onNext(i);\n                        }\n\n                        subscriber.onCompleted();\n                    }\n                } catch (Exception e) {\n\n                    subscriber.onError(e);\n                }\n            }\n        }).subscribe(new Subscriber<Integer>() {\n            @Override\n            public void onCompleted() {\n                System.out.println(\"completed !\");\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n                System.out.println(\"onError \" + e.getMessage());\n            }\n\n            @Override\n            public void onNext(Integer item) {\n                System.out.println(\"Next \" + item);\n\n            }\n        });\n```\nsubscrible(subscriber)方法调用后会执行OnSubscribe对象的call(subscriber)方法，从而完成回调。\n打印结果如下：\n\n```java\nNext 1\nNext 2\nNext 3\nNext 4\ncompleted !\n```\n<!--more-->\n### Defer \n观察者订阅时创建被观察者对象，对于每个观察者都会创建一个新的被观察者对象,也就是说在观察者订阅之前不创建这个Observable，为每一个观察者创建一个新的Observable。\n\n![](http://reactivex.io/documentation/operators/images/defer.c.png)\n\n如下代码：\n\n```java\nclass SomeType {\n        private String value;\n\n        public void setValue(String value) {\n            this.value = value;\n        }\n\n        public Observable<String> valueObservable() {\n            return Observable.just(value);\n        }\n\n\n    }\n\n    @Test\n    public void defer_just() {\n\n        SomeType someType = new SomeType();\n        Observable<String> observable1 = someType.valueObservable();\n        someType.setValue(\"Some Value\");\n        observable1.subscribe(new Action1<String>() {\n            @Override\n            public void call(String value) {\n                System.out.println(value);\n            }\n        });\n    }\n```\n程序输出是\"Some Value\" 而不是null\n\n### Just\n\n   将某个对象转化为Observable对象，可以使一个数字、一个字符串、数组、Iterate对象等，是一种非常快捷的创建Observable对象的方法,和Defer比较相似\n   ![](http://reactivex.io/documentation/operators/images/just.c.png)\n   \n代码如下：\n```java\nclass SomeType {\n        private String value;\n\n        public void setValue(String value) {\n            this.value = value;\n        }\n\n        public Observable<String> valueObservableFromJust() {\n            return Observable.just(value);\n        }\n\n        public Observable<String> valueObservableFromDefer() {\n            return Observable.defer(new Func0<Observable<String>>() {\n                @Override\n                public Observable<String> call() {\n                    return Observable.just(value);\n                }\n            });\n        }\n    }\n\n    @Test\n    public void defer_just() {\n\n\n        SomeType someType = new SomeType();\n        Observable<String> observable1 = someType.valueObservableFromJust();\n        Observable<String> observable2 = someType.valueObservableFromDefer();\n        someType.setValue(\"Some Value\");\n        observable1.subscribe(new Action1<String>() {\n            @Override\n            public void call(String value) {\n                System.out.println(value);\n            }\n        });\n\n        observable2.subscribe(new Action1<String>() {\n            @Override\n            public void call(String value) {\n                System.out.println(value);\n            }\n        });\n\n    }\n```\n程序输出如下：\n```java\nnull\nSome Value\n```\n由此可知，just和订阅无关，创建时是什么状态订阅时也是什么状态。\n\n### From\n类似Just,可以把一个Future, Iterable或者Array类型转换为Observable对象。\n\n![](http://reactivex.io/documentation/operators/images/from.c.png)\n\n```java\n\n    @Test\n    public void from() {\n        Observable.from(Arrays.asList(1, 2, 3, 4, 5))\n                .subscribe(new Action1<Integer>() {\n                    @Override\n                    public void call(Integer item) {\n                        System.out.println(item);\n                    }\n                });\n\n\t\t//简化为\n        Observable.just(1, 2, 3, 4, 5).subscribe(new Action1<Integer>() {\n            @Override\n            public void call(Integer item) {\n                System.out.println(item);\n            }\n        });\n\n    }\n```\n输出结果为：\n```java\n1\n2\n3\n4\n5\n1\n2\n3\n4\n5\n```\n\n","slug":"RxJava探索（二-RxJava操作符之Creating-Observables","published":1,"updated":"2017-02-22T04:11:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjryltlbd0015ncaqvvjx4pm3","content":"<p>RxJava的强大之处就是他提供非常丰富的操作符，超过上百种，这些操作符给我们解决问题带来很多方便。本文主要讲解创建Observale对象一类的操作符，参照官方文档 <a href=\"http://reactivex.io/documentation/operators.html#creating\" target=\"_blank\" rel=\"external\">http://reactivex.io/documentation/operators.html#creating</a>。</p>\n<h3 id=\"Create\"><a href=\"#Create\" class=\"headerlink\" title=\"Create\"></a>Create</h3><p>Observable.create()方法用于创建一个Observale对象，该方法接收一个Observer观察者对象。</p>\n<p><img src=\"http://reactivex.io/documentation/operators/images/create.c.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.create(<span class=\"keyword\">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> Integer&gt; subscriber)</span> </span>&#123;</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (!subscriber.isUnsubscribed()) &#123;</div><div class=\"line\">                       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">                           subscriber.onNext(i);</div><div class=\"line\">                       &#125;</div><div class=\"line\"></div><div class=\"line\">                       subscriber.onCompleted();</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\"></div><div class=\"line\">                   subscriber.onError(e);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;).subscribe(<span class=\"keyword\">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               System.out.println(<span class=\"string\">\"completed !\"</span>);</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">               System.out.println(<span class=\"string\">\"onError \"</span> + e.getMessage());</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(Integer item)</span> </span>&#123;</div><div class=\"line\">               System.out.println(<span class=\"string\">\"Next \"</span> + item);</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n<p>subscrible(subscriber)方法调用后会执行OnSubscribe对象的call(subscriber)方法，从而完成回调。<br>打印结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Next <span class=\"number\">1</span></div><div class=\"line\">Next <span class=\"number\">2</span></div><div class=\"line\">Next <span class=\"number\">3</span></div><div class=\"line\">Next <span class=\"number\">4</span></div><div class=\"line\">completed !</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"Defer\"><a href=\"#Defer\" class=\"headerlink\" title=\"Defer\"></a>Defer</h3><p>观察者订阅时创建被观察者对象，对于每个观察者都会创建一个新的被观察者对象,也就是说在观察者订阅之前不创建这个Observable，为每一个观察者创建一个新的Observable。</p>\n<p><img src=\"http://reactivex.io/documentation/operators/images/defer.c.png\" alt=\"\"></p>\n<p>如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeType</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String value;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;String&gt; <span class=\"title\">valueObservable</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Observable.just(value);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">defer_just</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        SomeType someType = <span class=\"keyword\">new</span> SomeType();</div><div class=\"line\">        Observable&lt;String&gt; observable1 = someType.valueObservable();</div><div class=\"line\">        someType.setValue(<span class=\"string\">\"Some Value\"</span>);</div><div class=\"line\">        observable1.subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">                System.out.println(value);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>程序输出是”Some Value” 而不是null</p>\n<h3 id=\"Just\"><a href=\"#Just\" class=\"headerlink\" title=\"Just\"></a>Just</h3><p>   将某个对象转化为Observable对象，可以使一个数字、一个字符串、数组、Iterate对象等，是一种非常快捷的创建Observable对象的方法,和Defer比较相似<br>   <img src=\"http://reactivex.io/documentation/operators/images/just.c.png\" alt=\"\"></p>\n<p>代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeType</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String value;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;String&gt; <span class=\"title\">valueObservableFromJust</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Observable.just(value);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;String&gt; <span class=\"title\">valueObservableFromDefer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Observable.defer(<span class=\"keyword\">new</span> Func0&lt;Observable&lt;String&gt;&gt;() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;String&gt; <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> Observable.just(value);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">defer_just</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        SomeType someType = <span class=\"keyword\">new</span> SomeType();</div><div class=\"line\">        Observable&lt;String&gt; observable1 = someType.valueObservableFromJust();</div><div class=\"line\">        Observable&lt;String&gt; observable2 = someType.valueObservableFromDefer();</div><div class=\"line\">        someType.setValue(<span class=\"string\">\"Some Value\"</span>);</div><div class=\"line\">        observable1.subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">                System.out.println(value);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        observable2.subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">                System.out.println(value);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>程序输出如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">null</span></div><div class=\"line\">Some Value</div></pre></td></tr></table></figure></p>\n<p>由此可知，just和订阅无关，创建时是什么状态订阅时也是什么状态。</p>\n<h3 id=\"From\"><a href=\"#From\" class=\"headerlink\" title=\"From\"></a>From</h3><p>类似Just,可以把一个Future, Iterable或者Array类型转换为Observable对象。</p>\n<p><img src=\"http://reactivex.io/documentation/operators/images/from.c.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Test</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">from</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      Observable.from(Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>))</div><div class=\"line\">              .subscribe(<span class=\"keyword\">new</span> Action1&lt;Integer&gt;() &#123;</div><div class=\"line\">                  <span class=\"meta\">@Override</span></div><div class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Integer item)</span> </span>&#123;</div><div class=\"line\">                      System.out.println(item);</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//简化为</span></div><div class=\"line\">      Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).subscribe(<span class=\"keyword\">new</span> Action1&lt;Integer&gt;() &#123;</div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Integer item)</span> </span>&#123;</div><div class=\"line\">              System.out.println(item);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>输出结果为：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>RxJava的强大之处就是他提供非常丰富的操作符，超过上百种，这些操作符给我们解决问题带来很多方便。本文主要讲解创建Observale对象一类的操作符，参照官方文档 <a href=\"http://reactivex.io/documentation/operators.html#creating\" target=\"_blank\" rel=\"external\">http://reactivex.io/documentation/operators.html#creating</a>。</p>\n<h3 id=\"Create\"><a href=\"#Create\" class=\"headerlink\" title=\"Create\"></a>Create</h3><p>Observable.create()方法用于创建一个Observale对象，该方法接收一个Observer观察者对象。</p>\n<p><img src=\"http://reactivex.io/documentation/operators/images/create.c.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observable.create(<span class=\"keyword\">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> Integer&gt; subscriber)</span> </span>&#123;</div><div class=\"line\">               <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                   <span class=\"keyword\">if</span> (!subscriber.isUnsubscribed()) &#123;</div><div class=\"line\">                       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</div><div class=\"line\">                           subscriber.onNext(i);</div><div class=\"line\">                       &#125;</div><div class=\"line\"></div><div class=\"line\">                       subscriber.onCompleted();</div><div class=\"line\">                   &#125;</div><div class=\"line\">               &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\"></div><div class=\"line\">                   subscriber.onError(e);</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;).subscribe(<span class=\"keyword\">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompleted</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">               System.out.println(<span class=\"string\">\"completed !\"</span>);</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</div><div class=\"line\">               System.out.println(<span class=\"string\">\"onError \"</span> + e.getMessage());</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"meta\">@Override</span></div><div class=\"line\">           <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(Integer item)</span> </span>&#123;</div><div class=\"line\">               System.out.println(<span class=\"string\">\"Next \"</span> + item);</div><div class=\"line\"></div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;);</div></pre></td></tr></table></figure>\n<p>subscrible(subscriber)方法调用后会执行OnSubscribe对象的call(subscriber)方法，从而完成回调。<br>打印结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Next <span class=\"number\">1</span></div><div class=\"line\">Next <span class=\"number\">2</span></div><div class=\"line\">Next <span class=\"number\">3</span></div><div class=\"line\">Next <span class=\"number\">4</span></div><div class=\"line\">completed !</div></pre></td></tr></table></figure>","more":"<h3 id=\"Defer\"><a href=\"#Defer\" class=\"headerlink\" title=\"Defer\"></a>Defer</h3><p>观察者订阅时创建被观察者对象，对于每个观察者都会创建一个新的被观察者对象,也就是说在观察者订阅之前不创建这个Observable，为每一个观察者创建一个新的Observable。</p>\n<p><img src=\"http://reactivex.io/documentation/operators/images/defer.c.png\" alt=\"\"></p>\n<p>如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeType</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String value;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;String&gt; <span class=\"title\">valueObservable</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Observable.just(value);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">defer_just</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        SomeType someType = <span class=\"keyword\">new</span> SomeType();</div><div class=\"line\">        Observable&lt;String&gt; observable1 = someType.valueObservable();</div><div class=\"line\">        someType.setValue(<span class=\"string\">\"Some Value\"</span>);</div><div class=\"line\">        observable1.subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">                System.out.println(value);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>程序输出是”Some Value” 而不是null</p>\n<h3 id=\"Just\"><a href=\"#Just\" class=\"headerlink\" title=\"Just\"></a>Just</h3><p>   将某个对象转化为Observable对象，可以使一个数字、一个字符串、数组、Iterate对象等，是一种非常快捷的创建Observable对象的方法,和Defer比较相似<br>   <img src=\"http://reactivex.io/documentation/operators/images/just.c.png\" alt=\"\"></p>\n<p>代码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeType</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> String value;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setValue</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;String&gt; <span class=\"title\">valueObservableFromJust</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Observable.just(value);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;String&gt; <span class=\"title\">valueObservableFromDefer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Observable.defer(<span class=\"keyword\">new</span> Func0&lt;Observable&lt;String&gt;&gt;() &#123;</div><div class=\"line\">                <span class=\"meta\">@Override</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> Observable&lt;String&gt; <span class=\"title\">call</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> Observable.just(value);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Test</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">defer_just</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        SomeType someType = <span class=\"keyword\">new</span> SomeType();</div><div class=\"line\">        Observable&lt;String&gt; observable1 = someType.valueObservableFromJust();</div><div class=\"line\">        Observable&lt;String&gt; observable2 = someType.valueObservableFromDefer();</div><div class=\"line\">        someType.setValue(<span class=\"string\">\"Some Value\"</span>);</div><div class=\"line\">        observable1.subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">                System.out.println(value);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        observable2.subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String value)</span> </span>&#123;</div><div class=\"line\">                System.out.println(value);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>程序输出如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">null</span></div><div class=\"line\">Some Value</div></pre></td></tr></table></figure></p>\n<p>由此可知，just和订阅无关，创建时是什么状态订阅时也是什么状态。</p>\n<h3 id=\"From\"><a href=\"#From\" class=\"headerlink\" title=\"From\"></a>From</h3><p>类似Just,可以把一个Future, Iterable或者Array类型转换为Observable对象。</p>\n<p><img src=\"http://reactivex.io/documentation/operators/images/from.c.png\" alt=\"\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Test</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">from</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      Observable.from(Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>))</div><div class=\"line\">              .subscribe(<span class=\"keyword\">new</span> Action1&lt;Integer&gt;() &#123;</div><div class=\"line\">                  <span class=\"meta\">@Override</span></div><div class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Integer item)</span> </span>&#123;</div><div class=\"line\">                      System.out.println(item);</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//简化为</span></div><div class=\"line\">      Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>).subscribe(<span class=\"keyword\">new</span> Action1&lt;Integer&gt;() &#123;</div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Integer item)</span> </span>&#123;</div><div class=\"line\">              System.out.println(item);</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>输出结果为：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">5</span></div><div class=\"line\"><span class=\"number\">1</span></div><div class=\"line\"><span class=\"number\">2</span></div><div class=\"line\"><span class=\"number\">3</span></div><div class=\"line\"><span class=\"number\">4</span></div><div class=\"line\"><span class=\"number\">5</span></div></pre></td></tr></table></figure></p>"},{"title":"Vue2.0(一)基础指令","date":"2018-04-22T02:59:42.000Z","_content":"\n\n## Setup\n\n###  安装\n- 官方 https://cn.vuejs.org\n- 下载vue.js\n    - 开发环境：包含完整的警告和调试模式\n    - 生产环境：删除了警告，30.90KB min+gzip\n- 引入项目\n    - CDN  \n    \n    ```\n    <script src=\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\"></script>\n    ```\n    - 直接在script中引用\n    \n    ```\n    <script type=\"text/javascript\" src=\"../assets/js/vue.js\"></script>\n    ```\n    \n<!-- more -->\n### 创建项目\n- 使用WebStorm创建项目\n- 结构如下\n- \n```\n├── assets\n│   ├── css\n│   └── js\n│       └── vue.js\n├── example\n│   └── 01_01_hello_world.html\n├── index.html\n└── package.json \n```\n\n![image](http://p7ggkwz0d.bkt.clouddn.com/vue_01_01_hello_world_project_tree.png)\n### 安装live-server\n    \n- npm install live-server -g\n- 启动  live-server\n### 编写第一个HelloWorld代码：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World Vue</title>\n    <script type=\"text/javascript\" src=\"../assets/js/vue.js\"></script>\n</head>\n<body>\n<h1>Vue2.0 Hello World</h1>\n<hr/>\n<div id=\"app\">\n    {{message}}\n\n</div>\n<script type=\"text/javascript\">\n    var vue = new Vue({\n        el:'#app',\n        data:{\n            message:'hello world'\n        }\n    })\n</script>\n```\n\n## v-if v-else v-show\n  \n* v-if用来判断是否加载html的DOM,v-else与之对应\n```\n<div v-if=\"isLogin\">你好，Vue！</div>\n<div v-else=\"isLogin\">你好，请登录 v-else</div>\n```\n* v-show 调整css中display属性，DOM已经加载，只是CSS控制没有显示出来。\n```\n<div v-show=\"isLogin\">你好，请登录 v-show</div>\n```\n* v-if 和v-show的区别：\n    * v-if： 判断是否加载，可以减轻服务器的压力，在需要时加载。\n    * v-show：调整css dispaly属性，可以使客户端操作更加流畅。\n## v-for\n* 基本用法\n```\n<li v-for=\"item in items\">\n        {{item}}\n</li>\n```\n* 带索引的用法\n```\n  <li v-for=\"(item,index) in items\">\n            {{index}}-{{item}}\n  </li>\n```\n* 排序\n\n我们已经顺利的输出了我们定义的数组，但是我需要在输出之前给数组排个序，那我们就用到了Vue的computed:属性。\n    \n    var vue = new Vue({\n        el: '#app',\n        data: {\n            items: [12, 24, 7, 33]\n        },\n        computed: {\n            sortedItems: function () {\n                return this.items.sort();\n            }\n        }\n    })\n    \n    在computed中从新声明sortedItems，这样为了防止污染数据源.\n    我们要做sort()中传入排序方法，否则按ascII码排序。\n```\nvar vue = new Vue({\n        el: '#app',\n        data: {\n            items: [12, 24, 7, 33]\n        },\n        computed: {\n            sortedItems: function () {\n                return this.items.sort(sortNumber);\n            }\n        }\n    });\n\n    function sortNumber(a, b) {\n        return a - b\n    }\n```\n* 对象循环输出\n```    \nvar vue = new Vue({\n        el: '#app',\n        data: {\n            items: [12, 24, 7, 33],\n            students: [\n                {name: 'jspang', age: 32},\n                {name: 'Panda', age: 30},\n                {name: 'PanPaN', age: 21},\n                {name: 'King', age: 45}\n            ]\n        },\n        computed: {\n            sortedItems: function () {\n                return this.items.sort(sortNumber);\n            },\n\n            sortedStudents: function () {\n                return sortByKey(this.students,'age');\n            }\n        }\n    });\n\n    function sortNumber(a, b) {\n        return a - b\n    }\n\n    //数组对象方法排序:\n    function sortByKey(array, key) {\n        return array.sort(function (a, b) {\n            var x = a[key];\n            var y = b[key];\n            return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n        });\n    }\n\n```\n## v-text v-html\n* v-text\n\n使用{{xxx}}时存在弊端，比如当网速慢或者js出错时会暴露{{xxx}},此时用v-text可以防止次问题\n```\n<span>{{ message }}</span>=<span v-text=\"message\"></span><br/>\n```\n* v-html\n\n如果在javascript中写有html标签，用v-text是输出不出来的，这时候我们就需要用v-html标签了。\n```\n<span v-html=\"htmlMessage\"></span>\n```\n\n```\n<div id=\"app\">\n    {{message}}\n    <br>\n    <span v-text=\"message\"></span>\n    <br>\n    <span v-html=\"htmlMessage\"></span>\n\n</div>\n    var vue = new Vue({\n        el:'#app',\n        data:{\n            message:'hello world',\n            htmlMessage: '<h2 style=\"color: red\">hello Vue!</h2>'\n        }\n    })\n\n```\n## v-on\n* 绑定事件   v-on:click可以简写成@click\n```\n<button v-on:click=\"plus\">加分</button>\n<button @click=\"minus\">加分</button>\n```\n* 也可以绑定其他事件\n```\n<input type=\"text\" v-on:keyup.enter=\"onEnter\" v-model=\"secondCount\">\n```\n\n![image](http://7xjyw1.com1.z0.glb.clouddn.com/20170227001137.jpg)\n\n## v-model\n* 把数据源绑定到指定的元素上，可实现双向数据绑定\n* 修饰符\n    - .lazy :取代 input 监听 change 事件\n    - .number: \n    - .trim : \n* 单选按钮绑定\n\n```\n    <input type=\"radio\" id=\"man\" value=\"男\" v-model=\"sex\"/>\n    <label for=\"man\">男</label>\n\n    <input type=\"radio\" id=\"woman\" value=\"女\" v-model=\"sex\"/>\n    <label for=\"man\">女</label>\n    <p v-text=\"sex\"></p>\n```\n* 多选按钮绑定一个值\n\n```\n<input type=\"checkbox\" id=\"isChecked\" v-model=\"isChecked\"/>\n<label for=\"isChecked\">{{isChecked}}</label>\n```\n* 多选按钮绑定多个值\n\n```\n<input type=\"checkbox\" id=\"1\" value=\"Java\" v-model=\"courses\"/>\n    <label for=\"1\">Java</label>\n\n    <input type=\"checkbox\" id=\"2\" value=\"C\" v-model=\"courses\"/>\n    <label for=\"2\">C</label>\n\n    <input type=\"checkbox\" id=\"3\" value=\"C++\" v-model=\"courses\"/>\n    <label for=\"3\">C++</label>\n    <p v-text=\"courses\"></p>\n```\n\n## v-bind\n\t一般拥有绑定标签属性，可以简写为':''\n* 绑定src\n \n```\n<img v-bind:src=\"imageSrc\" width=\"200px\">\n```\n* 绑定href\n\n```\n<p><a :href=\"webUrl\" target=\"_blank\">百度</a></p>\n```\n* 绑定css\n\n```\n    <div :class=\"className\">1、绑定ClassA</div>\n    <div :class=\"{classA:isOk}\">2、绑定Class中的判断</div>\n    <div>\n        <input type=\"checkbox\" v-model=\"isOk\" id=\"isOk\">\n        <label for=\"isOk\">使用ClassA样式</label>\n    </div>\n    <div :class=\"[classA,classB]\">3、绑定ClassA,ClassB</div>\n    <div :class=\"isOk?classA:classB\">4、三元运算符</div>\n    <div :style=\"{color:styleColor,fontFamily: styleFontFamily}\">5、绑定Style</div>\n    <div :style=\"styleObject\">6、绑定StyleObject</div>\n \n    var vue = new Vue({\n        el: '#app',\n        data: {\n            webUrl: 'http://www.baidu.com',\n            imageSrc: 'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1524302878433&di=3d1a79fed4b310bc4ff6e8f7f03f79ec&imgtype=0&src=http%3A%2F%2Fstatic.jysq.net%2Fdata%2Fattachment%2Falbum%2F201803%2F18%2F093928w9z2a363831h2p1a.jpg',\n            className: 'classA',\n            isOk: true,\n            classA: 'classA',\n            classB: 'classB',\n            styleColor: 'green',\n            styleFontFamily: '.SF NS Display',\n            styleObject: {\n                color: 'blue',\n                fontFamily: '.SF NS Display'\n            }\n        }\n    })\n    \n    \n    \n    .classA {\n        color: red;\n    }\n\n    .classB {\n        font-size: 3em;\n    }\n```\n","source":"_posts/Vue2-0-一-基础指令.md","raw":"title: Vue2.0(一)基础指令\ndate: 2018-04-22 10:59:42\ncategories: 前端开发\ntags: Vue\n---\n\n\n## Setup\n\n###  安装\n- 官方 https://cn.vuejs.org\n- 下载vue.js\n    - 开发环境：包含完整的警告和调试模式\n    - 生产环境：删除了警告，30.90KB min+gzip\n- 引入项目\n    - CDN  \n    \n    ```\n    <script src=\"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js\"></script>\n    ```\n    - 直接在script中引用\n    \n    ```\n    <script type=\"text/javascript\" src=\"../assets/js/vue.js\"></script>\n    ```\n    \n<!-- more -->\n### 创建项目\n- 使用WebStorm创建项目\n- 结构如下\n- \n```\n├── assets\n│   ├── css\n│   └── js\n│       └── vue.js\n├── example\n│   └── 01_01_hello_world.html\n├── index.html\n└── package.json \n```\n\n![image](http://p7ggkwz0d.bkt.clouddn.com/vue_01_01_hello_world_project_tree.png)\n### 安装live-server\n    \n- npm install live-server -g\n- 启动  live-server\n### 编写第一个HelloWorld代码：\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World Vue</title>\n    <script type=\"text/javascript\" src=\"../assets/js/vue.js\"></script>\n</head>\n<body>\n<h1>Vue2.0 Hello World</h1>\n<hr/>\n<div id=\"app\">\n    {{message}}\n\n</div>\n<script type=\"text/javascript\">\n    var vue = new Vue({\n        el:'#app',\n        data:{\n            message:'hello world'\n        }\n    })\n</script>\n```\n\n## v-if v-else v-show\n  \n* v-if用来判断是否加载html的DOM,v-else与之对应\n```\n<div v-if=\"isLogin\">你好，Vue！</div>\n<div v-else=\"isLogin\">你好，请登录 v-else</div>\n```\n* v-show 调整css中display属性，DOM已经加载，只是CSS控制没有显示出来。\n```\n<div v-show=\"isLogin\">你好，请登录 v-show</div>\n```\n* v-if 和v-show的区别：\n    * v-if： 判断是否加载，可以减轻服务器的压力，在需要时加载。\n    * v-show：调整css dispaly属性，可以使客户端操作更加流畅。\n## v-for\n* 基本用法\n```\n<li v-for=\"item in items\">\n        {{item}}\n</li>\n```\n* 带索引的用法\n```\n  <li v-for=\"(item,index) in items\">\n            {{index}}-{{item}}\n  </li>\n```\n* 排序\n\n我们已经顺利的输出了我们定义的数组，但是我需要在输出之前给数组排个序，那我们就用到了Vue的computed:属性。\n    \n    var vue = new Vue({\n        el: '#app',\n        data: {\n            items: [12, 24, 7, 33]\n        },\n        computed: {\n            sortedItems: function () {\n                return this.items.sort();\n            }\n        }\n    })\n    \n    在computed中从新声明sortedItems，这样为了防止污染数据源.\n    我们要做sort()中传入排序方法，否则按ascII码排序。\n```\nvar vue = new Vue({\n        el: '#app',\n        data: {\n            items: [12, 24, 7, 33]\n        },\n        computed: {\n            sortedItems: function () {\n                return this.items.sort(sortNumber);\n            }\n        }\n    });\n\n    function sortNumber(a, b) {\n        return a - b\n    }\n```\n* 对象循环输出\n```    \nvar vue = new Vue({\n        el: '#app',\n        data: {\n            items: [12, 24, 7, 33],\n            students: [\n                {name: 'jspang', age: 32},\n                {name: 'Panda', age: 30},\n                {name: 'PanPaN', age: 21},\n                {name: 'King', age: 45}\n            ]\n        },\n        computed: {\n            sortedItems: function () {\n                return this.items.sort(sortNumber);\n            },\n\n            sortedStudents: function () {\n                return sortByKey(this.students,'age');\n            }\n        }\n    });\n\n    function sortNumber(a, b) {\n        return a - b\n    }\n\n    //数组对象方法排序:\n    function sortByKey(array, key) {\n        return array.sort(function (a, b) {\n            var x = a[key];\n            var y = b[key];\n            return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n        });\n    }\n\n```\n## v-text v-html\n* v-text\n\n使用{{xxx}}时存在弊端，比如当网速慢或者js出错时会暴露{{xxx}},此时用v-text可以防止次问题\n```\n<span>{{ message }}</span>=<span v-text=\"message\"></span><br/>\n```\n* v-html\n\n如果在javascript中写有html标签，用v-text是输出不出来的，这时候我们就需要用v-html标签了。\n```\n<span v-html=\"htmlMessage\"></span>\n```\n\n```\n<div id=\"app\">\n    {{message}}\n    <br>\n    <span v-text=\"message\"></span>\n    <br>\n    <span v-html=\"htmlMessage\"></span>\n\n</div>\n    var vue = new Vue({\n        el:'#app',\n        data:{\n            message:'hello world',\n            htmlMessage: '<h2 style=\"color: red\">hello Vue!</h2>'\n        }\n    })\n\n```\n## v-on\n* 绑定事件   v-on:click可以简写成@click\n```\n<button v-on:click=\"plus\">加分</button>\n<button @click=\"minus\">加分</button>\n```\n* 也可以绑定其他事件\n```\n<input type=\"text\" v-on:keyup.enter=\"onEnter\" v-model=\"secondCount\">\n```\n\n![image](http://7xjyw1.com1.z0.glb.clouddn.com/20170227001137.jpg)\n\n## v-model\n* 把数据源绑定到指定的元素上，可实现双向数据绑定\n* 修饰符\n    - .lazy :取代 input 监听 change 事件\n    - .number: \n    - .trim : \n* 单选按钮绑定\n\n```\n    <input type=\"radio\" id=\"man\" value=\"男\" v-model=\"sex\"/>\n    <label for=\"man\">男</label>\n\n    <input type=\"radio\" id=\"woman\" value=\"女\" v-model=\"sex\"/>\n    <label for=\"man\">女</label>\n    <p v-text=\"sex\"></p>\n```\n* 多选按钮绑定一个值\n\n```\n<input type=\"checkbox\" id=\"isChecked\" v-model=\"isChecked\"/>\n<label for=\"isChecked\">{{isChecked}}</label>\n```\n* 多选按钮绑定多个值\n\n```\n<input type=\"checkbox\" id=\"1\" value=\"Java\" v-model=\"courses\"/>\n    <label for=\"1\">Java</label>\n\n    <input type=\"checkbox\" id=\"2\" value=\"C\" v-model=\"courses\"/>\n    <label for=\"2\">C</label>\n\n    <input type=\"checkbox\" id=\"3\" value=\"C++\" v-model=\"courses\"/>\n    <label for=\"3\">C++</label>\n    <p v-text=\"courses\"></p>\n```\n\n## v-bind\n\t一般拥有绑定标签属性，可以简写为':''\n* 绑定src\n \n```\n<img v-bind:src=\"imageSrc\" width=\"200px\">\n```\n* 绑定href\n\n```\n<p><a :href=\"webUrl\" target=\"_blank\">百度</a></p>\n```\n* 绑定css\n\n```\n    <div :class=\"className\">1、绑定ClassA</div>\n    <div :class=\"{classA:isOk}\">2、绑定Class中的判断</div>\n    <div>\n        <input type=\"checkbox\" v-model=\"isOk\" id=\"isOk\">\n        <label for=\"isOk\">使用ClassA样式</label>\n    </div>\n    <div :class=\"[classA,classB]\">3、绑定ClassA,ClassB</div>\n    <div :class=\"isOk?classA:classB\">4、三元运算符</div>\n    <div :style=\"{color:styleColor,fontFamily: styleFontFamily}\">5、绑定Style</div>\n    <div :style=\"styleObject\">6、绑定StyleObject</div>\n \n    var vue = new Vue({\n        el: '#app',\n        data: {\n            webUrl: 'http://www.baidu.com',\n            imageSrc: 'https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1524302878433&di=3d1a79fed4b310bc4ff6e8f7f03f79ec&imgtype=0&src=http%3A%2F%2Fstatic.jysq.net%2Fdata%2Fattachment%2Falbum%2F201803%2F18%2F093928w9z2a363831h2p1a.jpg',\n            className: 'classA',\n            isOk: true,\n            classA: 'classA',\n            classB: 'classB',\n            styleColor: 'green',\n            styleFontFamily: '.SF NS Display',\n            styleObject: {\n                color: 'blue',\n                fontFamily: '.SF NS Display'\n            }\n        }\n    })\n    \n    \n    \n    .classA {\n        color: red;\n    }\n\n    .classB {\n        font-size: 3em;\n    }\n```\n","slug":"Vue2-0-一-基础指令","published":1,"updated":"2018-04-22T03:21:32.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjryltlbe0019ncaqpn56w8lo","content":"<h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li>官方 <a href=\"https://cn.vuejs.org\" target=\"_blank\" rel=\"external\">https://cn.vuejs.org</a></li>\n<li>下载vue.js<ul>\n<li>开发环境：包含完整的警告和调试模式</li>\n<li>生产环境：删除了警告，30.90KB min+gzip</li>\n</ul>\n</li>\n<li><p>引入项目</p>\n<ul>\n<li><p>CDN  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>直接在script中引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;../assets/js/vue.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><ul>\n<li>使用WebStorm创建项目</li>\n<li>结构如下</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── assets</div><div class=\"line\">│   ├── css</div><div class=\"line\">│   └── js</div><div class=\"line\">│       └── vue.js</div><div class=\"line\">├── example</div><div class=\"line\">│   └── 01_01_hello_world.html</div><div class=\"line\">├── index.html</div><div class=\"line\">└── package.json</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://p7ggkwz0d.bkt.clouddn.com/vue_01_01_hello_world_project_tree.png\" alt=\"image\"></p>\n<h3 id=\"安装live-server\"><a href=\"#安装live-server\" class=\"headerlink\" title=\"安装live-server\"></a>安装live-server</h3><ul>\n<li>npm install live-server -g</li>\n<li>启动  live-server<h3 id=\"编写第一个HelloWorld代码：\"><a href=\"#编写第一个HelloWorld代码：\" class=\"headerlink\" title=\"编写第一个HelloWorld代码：\"></a>编写第一个HelloWorld代码：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello World Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../assets/js/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Vue2.0 Hello World<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123;message&#125;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> vue = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">        <span class=\"attr\">el</span>:<span class=\"string\">'#app'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>:&#123;</div><div class=\"line\">            <span class=\"attr\">message</span>:<span class=\"string\">'hello world'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"v-if-v-else-v-show\"><a href=\"#v-if-v-else-v-show\" class=\"headerlink\" title=\"v-if v-else v-show\"></a>v-if v-else v-show</h2><ul>\n<li><p>v-if用来判断是否加载html的DOM,v-else与之对应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div v-if=&quot;isLogin&quot;&gt;你好，Vue！&lt;/div&gt;</div><div class=\"line\">&lt;div v-else=&quot;isLogin&quot;&gt;你好，请登录 v-else&lt;/div&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>v-show 调整css中display属性，DOM已经加载，只是CSS控制没有显示出来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div v-show=&quot;isLogin&quot;&gt;你好，请登录 v-show&lt;/div&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>v-if 和v-show的区别：</p>\n<ul>\n<li>v-if： 判断是否加载，可以减轻服务器的压力，在需要时加载。</li>\n<li>v-show：调整css dispaly属性，可以使客户端操作更加流畅。<h2 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h2></li>\n</ul>\n</li>\n<li><p>基本用法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li v-for=&quot;item in items&quot;&gt;</div><div class=\"line\">        &#123;&#123;item&#125;&#125;</div><div class=\"line\">&lt;/li&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>带索引的用法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li v-for=&quot;(item,index) in items&quot;&gt;</div><div class=\"line\">          &#123;&#123;index&#125;&#125;-&#123;&#123;item&#125;&#125;</div><div class=\"line\">&lt;/li&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>排序</p>\n</li>\n</ul>\n<p>我们已经顺利的输出了我们定义的数组，但是我需要在输出之前给数组排个序，那我们就用到了Vue的computed:属性。</p>\n<pre><code>var vue = new Vue({\n    el: &apos;#app&apos;,\n    data: {\n        items: [12, 24, 7, 33]\n    },\n    computed: {\n        sortedItems: function () {\n            return this.items.sort();\n        }\n    }\n})\n\n在computed中从新声明sortedItems，这样为了防止污染数据源.\n我们要做sort()中传入排序方法，否则按ascII码排序。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var vue = new Vue(&#123;</div><div class=\"line\">        el: &apos;#app&apos;,</div><div class=\"line\">        data: &#123;</div><div class=\"line\">            items: [12, 24, 7, 33]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        computed: &#123;</div><div class=\"line\">            sortedItems: function () &#123;</div><div class=\"line\">                return this.items.sort(sortNumber);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    function sortNumber(a, b) &#123;</div><div class=\"line\">        return a - b</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>对象循环输出<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">var vue = new Vue(&#123;</div><div class=\"line\">        el: &apos;#app&apos;,</div><div class=\"line\">        data: &#123;</div><div class=\"line\">            items: [12, 24, 7, 33],</div><div class=\"line\">            students: [</div><div class=\"line\">                &#123;name: &apos;jspang&apos;, age: 32&#125;,</div><div class=\"line\">                &#123;name: &apos;Panda&apos;, age: 30&#125;,</div><div class=\"line\">                &#123;name: &apos;PanPaN&apos;, age: 21&#125;,</div><div class=\"line\">                &#123;name: &apos;King&apos;, age: 45&#125;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        computed: &#123;</div><div class=\"line\">            sortedItems: function () &#123;</div><div class=\"line\">                return this.items.sort(sortNumber);</div><div class=\"line\">            &#125;,</div><div class=\"line\"></div><div class=\"line\">            sortedStudents: function () &#123;</div><div class=\"line\">                return sortByKey(this.students,&apos;age&apos;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    function sortNumber(a, b) &#123;</div><div class=\"line\">        return a - b</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //数组对象方法排序:</div><div class=\"line\">    function sortByKey(array, key) &#123;</div><div class=\"line\">        return array.sort(function (a, b) &#123;</div><div class=\"line\">            var x = a[key];</div><div class=\"line\">            var y = b[key];</div><div class=\"line\">            return ((x &lt; y) ? -1 : ((x &gt; y) ? 1 : 0));</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"v-text-v-html\"><a href=\"#v-text-v-html\" class=\"headerlink\" title=\"v-text v-html\"></a>v-text v-html</h2><ul>\n<li>v-text</li>\n</ul>\n<p>使用时存在弊端，比如当网速慢或者js出错时会暴露,此时用v-text可以防止次问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;=&lt;span v-text=&quot;message&quot;&gt;&lt;/span&gt;&lt;br/&gt;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>v-html</li>\n</ul>\n<p>如果在javascript中写有html标签，用v-text是输出不出来的，这时候我们就需要用v-html标签了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;span v-html=&quot;htmlMessage&quot;&gt;&lt;/span&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;app&quot;&gt;</div><div class=\"line\">    &#123;&#123;message&#125;&#125;</div><div class=\"line\">    &lt;br&gt;</div><div class=\"line\">    &lt;span v-text=&quot;message&quot;&gt;&lt;/span&gt;</div><div class=\"line\">    &lt;br&gt;</div><div class=\"line\">    &lt;span v-html=&quot;htmlMessage&quot;&gt;&lt;/span&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">    var vue = new Vue(&#123;</div><div class=\"line\">        el:&apos;#app&apos;,</div><div class=\"line\">        data:&#123;</div><div class=\"line\">            message:&apos;hello world&apos;,</div><div class=\"line\">            htmlMessage: &apos;&lt;h2 style=&quot;color: red&quot;&gt;hello Vue!&lt;/h2&gt;&apos;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h2><ul>\n<li><p>绑定事件   v-on:click可以简写成@click</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;button v-on:click=&quot;plus&quot;&gt;加分&lt;/button&gt;</div><div class=\"line\">&lt;button @click=&quot;minus&quot;&gt;加分&lt;/button&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>也可以绑定其他事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;text&quot; v-on:keyup.enter=&quot;onEnter&quot; v-model=&quot;secondCount&quot;&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://7xjyw1.com1.z0.glb.clouddn.com/20170227001137.jpg\" alt=\"image\"></p>\n<h2 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h2><ul>\n<li>把数据源绑定到指定的元素上，可实现双向数据绑定</li>\n<li>修饰符<ul>\n<li>.lazy :取代 input 监听 change 事件</li>\n<li>.number: </li>\n<li>.trim : </li>\n</ul>\n</li>\n<li>单选按钮绑定</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;radio&quot; id=&quot;man&quot; value=&quot;男&quot; v-model=&quot;sex&quot;/&gt;</div><div class=\"line\">&lt;label for=&quot;man&quot;&gt;男&lt;/label&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;input type=&quot;radio&quot; id=&quot;woman&quot; value=&quot;女&quot; v-model=&quot;sex&quot;/&gt;</div><div class=\"line\">&lt;label for=&quot;man&quot;&gt;女&lt;/label&gt;</div><div class=\"line\">&lt;p v-text=&quot;sex&quot;&gt;&lt;/p&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>多选按钮绑定一个值</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;checkbox&quot; id=&quot;isChecked&quot; v-model=&quot;isChecked&quot;/&gt;</div><div class=\"line\">&lt;label for=&quot;isChecked&quot;&gt;&#123;&#123;isChecked&#125;&#125;&lt;/label&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>多选按钮绑定多个值</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;checkbox&quot; id=&quot;1&quot; value=&quot;Java&quot; v-model=&quot;courses&quot;/&gt;</div><div class=\"line\">    &lt;label for=&quot;1&quot;&gt;Java&lt;/label&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;input type=&quot;checkbox&quot; id=&quot;2&quot; value=&quot;C&quot; v-model=&quot;courses&quot;/&gt;</div><div class=\"line\">    &lt;label for=&quot;2&quot;&gt;C&lt;/label&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;input type=&quot;checkbox&quot; id=&quot;3&quot; value=&quot;C++&quot; v-model=&quot;courses&quot;/&gt;</div><div class=\"line\">    &lt;label for=&quot;3&quot;&gt;C++&lt;/label&gt;</div><div class=\"line\">    &lt;p v-text=&quot;courses&quot;&gt;&lt;/p&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h2><pre><code>一般拥有绑定标签属性，可以简写为&apos;:&apos;&apos;\n</code></pre><ul>\n<li>绑定src</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img v-bind:src=&quot;imageSrc&quot; width=&quot;200px&quot;&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>绑定href</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p&gt;&lt;a :href=&quot;webUrl&quot; target=&quot;_blank&quot;&gt;百度&lt;/a&gt;&lt;/p&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>绑定css</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div :class=&quot;className&quot;&gt;1、绑定ClassA&lt;/div&gt;</div><div class=\"line\">&lt;div :class=&quot;&#123;classA:isOk&#125;&quot;&gt;2、绑定Class中的判断&lt;/div&gt;</div><div class=\"line\">&lt;div&gt;</div><div class=\"line\">    &lt;input type=&quot;checkbox&quot; v-model=&quot;isOk&quot; id=&quot;isOk&quot;&gt;</div><div class=\"line\">    &lt;label for=&quot;isOk&quot;&gt;使用ClassA样式&lt;/label&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;div :class=&quot;[classA,classB]&quot;&gt;3、绑定ClassA,ClassB&lt;/div&gt;</div><div class=\"line\">&lt;div :class=&quot;isOk?classA:classB&quot;&gt;4、三元运算符&lt;/div&gt;</div><div class=\"line\">&lt;div :style=&quot;&#123;color:styleColor,fontFamily: styleFontFamily&#125;&quot;&gt;5、绑定Style&lt;/div&gt;</div><div class=\"line\">&lt;div :style=&quot;styleObject&quot;&gt;6、绑定StyleObject&lt;/div&gt;</div><div class=\"line\"> </div><div class=\"line\">var vue = new Vue(&#123;</div><div class=\"line\">    el: &apos;#app&apos;,</div><div class=\"line\">    data: &#123;</div><div class=\"line\">        webUrl: &apos;http://www.baidu.com&apos;,</div><div class=\"line\">        imageSrc: &apos;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1524302878433&amp;di=3d1a79fed4b310bc4ff6e8f7f03f79ec&amp;imgtype=0&amp;src=http%3A%2F%2Fstatic.jysq.net%2Fdata%2Fattachment%2Falbum%2F201803%2F18%2F093928w9z2a363831h2p1a.jpg&apos;,</div><div class=\"line\">        className: &apos;classA&apos;,</div><div class=\"line\">        isOk: true,</div><div class=\"line\">        classA: &apos;classA&apos;,</div><div class=\"line\">        classB: &apos;classB&apos;,</div><div class=\"line\">        styleColor: &apos;green&apos;,</div><div class=\"line\">        styleFontFamily: &apos;.SF NS Display&apos;,</div><div class=\"line\">        styleObject: &#123;</div><div class=\"line\">            color: &apos;blue&apos;,</div><div class=\"line\">            fontFamily: &apos;.SF NS Display&apos;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">.classA &#123;</div><div class=\"line\">    color: red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.classB &#123;</div><div class=\"line\">    font-size: 3em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li>官方 <a href=\"https://cn.vuejs.org\" target=\"_blank\" rel=\"external\">https://cn.vuejs.org</a></li>\n<li>下载vue.js<ul>\n<li>开发环境：包含完整的警告和调试模式</li>\n<li>生产环境：删除了警告，30.90KB min+gzip</li>\n</ul>\n</li>\n<li><p>引入项目</p>\n<ul>\n<li><p>CDN  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>直接在script中引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;../assets/js/vue.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>","more":"<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><ul>\n<li>使用WebStorm创建项目</li>\n<li>结构如下</li>\n<li><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── assets</div><div class=\"line\">│   ├── css</div><div class=\"line\">│   └── js</div><div class=\"line\">│       └── vue.js</div><div class=\"line\">├── example</div><div class=\"line\">│   └── 01_01_hello_world.html</div><div class=\"line\">├── index.html</div><div class=\"line\">└── package.json</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://p7ggkwz0d.bkt.clouddn.com/vue_01_01_hello_world_project_tree.png\" alt=\"image\"></p>\n<h3 id=\"安装live-server\"><a href=\"#安装live-server\" class=\"headerlink\" title=\"安装live-server\"></a>安装live-server</h3><ul>\n<li>npm install live-server -g</li>\n<li>启动  live-server<h3 id=\"编写第一个HelloWorld代码：\"><a href=\"#编写第一个HelloWorld代码：\" class=\"headerlink\" title=\"编写第一个HelloWorld代码：\"></a>编写第一个HelloWorld代码：</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello World Vue<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../assets/js/vue.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Vue2.0 Hello World<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\">    &#123;&#123;message&#125;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"keyword\">var</span> vue = <span class=\"keyword\">new</span> Vue(&#123;</div><div class=\"line\">        <span class=\"attr\">el</span>:<span class=\"string\">'#app'</span>,</div><div class=\"line\">        <span class=\"attr\">data</span>:&#123;</div><div class=\"line\">            <span class=\"attr\">message</span>:<span class=\"string\">'hello world'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"v-if-v-else-v-show\"><a href=\"#v-if-v-else-v-show\" class=\"headerlink\" title=\"v-if v-else v-show\"></a>v-if v-else v-show</h2><ul>\n<li><p>v-if用来判断是否加载html的DOM,v-else与之对应</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div v-if=&quot;isLogin&quot;&gt;你好，Vue！&lt;/div&gt;</div><div class=\"line\">&lt;div v-else=&quot;isLogin&quot;&gt;你好，请登录 v-else&lt;/div&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>v-show 调整css中display属性，DOM已经加载，只是CSS控制没有显示出来。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div v-show=&quot;isLogin&quot;&gt;你好，请登录 v-show&lt;/div&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>v-if 和v-show的区别：</p>\n<ul>\n<li>v-if： 判断是否加载，可以减轻服务器的压力，在需要时加载。</li>\n<li>v-show：调整css dispaly属性，可以使客户端操作更加流畅。<h2 id=\"v-for\"><a href=\"#v-for\" class=\"headerlink\" title=\"v-for\"></a>v-for</h2></li>\n</ul>\n</li>\n<li><p>基本用法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li v-for=&quot;item in items&quot;&gt;</div><div class=\"line\">        &#123;&#123;item&#125;&#125;</div><div class=\"line\">&lt;/li&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>带索引的用法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;li v-for=&quot;(item,index) in items&quot;&gt;</div><div class=\"line\">          &#123;&#123;index&#125;&#125;-&#123;&#123;item&#125;&#125;</div><div class=\"line\">&lt;/li&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>排序</p>\n</li>\n</ul>\n<p>我们已经顺利的输出了我们定义的数组，但是我需要在输出之前给数组排个序，那我们就用到了Vue的computed:属性。</p>\n<pre><code>var vue = new Vue({\n    el: &apos;#app&apos;,\n    data: {\n        items: [12, 24, 7, 33]\n    },\n    computed: {\n        sortedItems: function () {\n            return this.items.sort();\n        }\n    }\n})\n\n在computed中从新声明sortedItems，这样为了防止污染数据源.\n我们要做sort()中传入排序方法，否则按ascII码排序。\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var vue = new Vue(&#123;</div><div class=\"line\">        el: &apos;#app&apos;,</div><div class=\"line\">        data: &#123;</div><div class=\"line\">            items: [12, 24, 7, 33]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        computed: &#123;</div><div class=\"line\">            sortedItems: function () &#123;</div><div class=\"line\">                return this.items.sort(sortNumber);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    function sortNumber(a, b) &#123;</div><div class=\"line\">        return a - b</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>对象循环输出<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">var vue = new Vue(&#123;</div><div class=\"line\">        el: &apos;#app&apos;,</div><div class=\"line\">        data: &#123;</div><div class=\"line\">            items: [12, 24, 7, 33],</div><div class=\"line\">            students: [</div><div class=\"line\">                &#123;name: &apos;jspang&apos;, age: 32&#125;,</div><div class=\"line\">                &#123;name: &apos;Panda&apos;, age: 30&#125;,</div><div class=\"line\">                &#123;name: &apos;PanPaN&apos;, age: 21&#125;,</div><div class=\"line\">                &#123;name: &apos;King&apos;, age: 45&#125;</div><div class=\"line\">            ]</div><div class=\"line\">        &#125;,</div><div class=\"line\">        computed: &#123;</div><div class=\"line\">            sortedItems: function () &#123;</div><div class=\"line\">                return this.items.sort(sortNumber);</div><div class=\"line\">            &#125;,</div><div class=\"line\"></div><div class=\"line\">            sortedStudents: function () &#123;</div><div class=\"line\">                return sortByKey(this.students,&apos;age&apos;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    function sortNumber(a, b) &#123;</div><div class=\"line\">        return a - b</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //数组对象方法排序:</div><div class=\"line\">    function sortByKey(array, key) &#123;</div><div class=\"line\">        return array.sort(function (a, b) &#123;</div><div class=\"line\">            var x = a[key];</div><div class=\"line\">            var y = b[key];</div><div class=\"line\">            return ((x &lt; y) ? -1 : ((x &gt; y) ? 1 : 0));</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"v-text-v-html\"><a href=\"#v-text-v-html\" class=\"headerlink\" title=\"v-text v-html\"></a>v-text v-html</h2><ul>\n<li>v-text</li>\n</ul>\n<p>使用时存在弊端，比如当网速慢或者js出错时会暴露,此时用v-text可以防止次问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;=&lt;span v-text=&quot;message&quot;&gt;&lt;/span&gt;&lt;br/&gt;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>v-html</li>\n</ul>\n<p>如果在javascript中写有html标签，用v-text是输出不出来的，这时候我们就需要用v-html标签了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;span v-html=&quot;htmlMessage&quot;&gt;&lt;/span&gt;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;app&quot;&gt;</div><div class=\"line\">    &#123;&#123;message&#125;&#125;</div><div class=\"line\">    &lt;br&gt;</div><div class=\"line\">    &lt;span v-text=&quot;message&quot;&gt;&lt;/span&gt;</div><div class=\"line\">    &lt;br&gt;</div><div class=\"line\">    &lt;span v-html=&quot;htmlMessage&quot;&gt;&lt;/span&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">    var vue = new Vue(&#123;</div><div class=\"line\">        el:&apos;#app&apos;,</div><div class=\"line\">        data:&#123;</div><div class=\"line\">            message:&apos;hello world&apos;,</div><div class=\"line\">            htmlMessage: &apos;&lt;h2 style=&quot;color: red&quot;&gt;hello Vue!&lt;/h2&gt;&apos;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h2><ul>\n<li><p>绑定事件   v-on:click可以简写成@click</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;button v-on:click=&quot;plus&quot;&gt;加分&lt;/button&gt;</div><div class=\"line\">&lt;button @click=&quot;minus&quot;&gt;加分&lt;/button&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>也可以绑定其他事件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;text&quot; v-on:keyup.enter=&quot;onEnter&quot; v-model=&quot;secondCount&quot;&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://7xjyw1.com1.z0.glb.clouddn.com/20170227001137.jpg\" alt=\"image\"></p>\n<h2 id=\"v-model\"><a href=\"#v-model\" class=\"headerlink\" title=\"v-model\"></a>v-model</h2><ul>\n<li>把数据源绑定到指定的元素上，可实现双向数据绑定</li>\n<li>修饰符<ul>\n<li>.lazy :取代 input 监听 change 事件</li>\n<li>.number: </li>\n<li>.trim : </li>\n</ul>\n</li>\n<li>单选按钮绑定</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;radio&quot; id=&quot;man&quot; value=&quot;男&quot; v-model=&quot;sex&quot;/&gt;</div><div class=\"line\">&lt;label for=&quot;man&quot;&gt;男&lt;/label&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;input type=&quot;radio&quot; id=&quot;woman&quot; value=&quot;女&quot; v-model=&quot;sex&quot;/&gt;</div><div class=\"line\">&lt;label for=&quot;man&quot;&gt;女&lt;/label&gt;</div><div class=\"line\">&lt;p v-text=&quot;sex&quot;&gt;&lt;/p&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>多选按钮绑定一个值</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;checkbox&quot; id=&quot;isChecked&quot; v-model=&quot;isChecked&quot;/&gt;</div><div class=\"line\">&lt;label for=&quot;isChecked&quot;&gt;&#123;&#123;isChecked&#125;&#125;&lt;/label&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>多选按钮绑定多个值</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=&quot;checkbox&quot; id=&quot;1&quot; value=&quot;Java&quot; v-model=&quot;courses&quot;/&gt;</div><div class=\"line\">    &lt;label for=&quot;1&quot;&gt;Java&lt;/label&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;input type=&quot;checkbox&quot; id=&quot;2&quot; value=&quot;C&quot; v-model=&quot;courses&quot;/&gt;</div><div class=\"line\">    &lt;label for=&quot;2&quot;&gt;C&lt;/label&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;input type=&quot;checkbox&quot; id=&quot;3&quot; value=&quot;C++&quot; v-model=&quot;courses&quot;/&gt;</div><div class=\"line\">    &lt;label for=&quot;3&quot;&gt;C++&lt;/label&gt;</div><div class=\"line\">    &lt;p v-text=&quot;courses&quot;&gt;&lt;/p&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h2><pre><code>一般拥有绑定标签属性，可以简写为&apos;:&apos;&apos;\n</code></pre><ul>\n<li>绑定src</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img v-bind:src=&quot;imageSrc&quot; width=&quot;200px&quot;&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>绑定href</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p&gt;&lt;a :href=&quot;webUrl&quot; target=&quot;_blank&quot;&gt;百度&lt;/a&gt;&lt;/p&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>绑定css</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div :class=&quot;className&quot;&gt;1、绑定ClassA&lt;/div&gt;</div><div class=\"line\">&lt;div :class=&quot;&#123;classA:isOk&#125;&quot;&gt;2、绑定Class中的判断&lt;/div&gt;</div><div class=\"line\">&lt;div&gt;</div><div class=\"line\">    &lt;input type=&quot;checkbox&quot; v-model=&quot;isOk&quot; id=&quot;isOk&quot;&gt;</div><div class=\"line\">    &lt;label for=&quot;isOk&quot;&gt;使用ClassA样式&lt;/label&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;div :class=&quot;[classA,classB]&quot;&gt;3、绑定ClassA,ClassB&lt;/div&gt;</div><div class=\"line\">&lt;div :class=&quot;isOk?classA:classB&quot;&gt;4、三元运算符&lt;/div&gt;</div><div class=\"line\">&lt;div :style=&quot;&#123;color:styleColor,fontFamily: styleFontFamily&#125;&quot;&gt;5、绑定Style&lt;/div&gt;</div><div class=\"line\">&lt;div :style=&quot;styleObject&quot;&gt;6、绑定StyleObject&lt;/div&gt;</div><div class=\"line\"> </div><div class=\"line\">var vue = new Vue(&#123;</div><div class=\"line\">    el: &apos;#app&apos;,</div><div class=\"line\">    data: &#123;</div><div class=\"line\">        webUrl: &apos;http://www.baidu.com&apos;,</div><div class=\"line\">        imageSrc: &apos;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1524302878433&amp;di=3d1a79fed4b310bc4ff6e8f7f03f79ec&amp;imgtype=0&amp;src=http%3A%2F%2Fstatic.jysq.net%2Fdata%2Fattachment%2Falbum%2F201803%2F18%2F093928w9z2a363831h2p1a.jpg&apos;,</div><div class=\"line\">        className: &apos;classA&apos;,</div><div class=\"line\">        isOk: true,</div><div class=\"line\">        classA: &apos;classA&apos;,</div><div class=\"line\">        classB: &apos;classB&apos;,</div><div class=\"line\">        styleColor: &apos;green&apos;,</div><div class=\"line\">        styleFontFamily: &apos;.SF NS Display&apos;,</div><div class=\"line\">        styleObject: &#123;</div><div class=\"line\">            color: &apos;blue&apos;,</div><div class=\"line\">            fontFamily: &apos;.SF NS Display&apos;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">.classA &#123;</div><div class=\"line\">    color: red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.classB &#123;</div><div class=\"line\">    font-size: 3em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"es6新特性","date":"2017-07-13T03:52:19.000Z","_content":"\n## let-块级作用域\n\n以前在js中只有全局作用域和函数作用域\n\n```javascript\nif (true) {\n    var fruit = 'apple';\n}\n\nconsole.log(fruit); //apple\n\n```\n\nvar声明了一个全局变量fruit,全局范围都有效。若只在用的到代码块中有效则使用let\n\n```javascript\nif (true) {\n    let fruit = \"zhy\";\n    console.log(fruit);//zhy\n}\nconsole.log(fruit);//ReferenceError: fruit is not defined\n\n```\n在let代码块外面访问时报错\n\n\n<!-- more -->\n## const 声明常量\n\n```javascript\n//声明一个常量，声明后不能重新赋值\nconst fruit = 'apple';\nconsole.log(fruit);\n\n//const只是限制赋值动作，并不能决定对象的值是什么\nconst fruits = [];\nfruits.push('apple')\nconsole.log(fruits)\n```\n\n## Destructuring 解构\n解构赋值允许你使用类似数组或对象字面量的语法将数组和对象的属性赋给各种变量,这种赋值语法极度简洁，同时还比传统的属性访问方法更为清晰\n\n### Array Destructuring 数组解构\n\n```javascript\n//解构语法\nfunction breakfast() {\n    return ['apple', 'orange', 'banana'];\n}\nlet [breakfast1, breakfast2, breakfast3] = breakfast();\nconsole.log(breakfast1, breakfast2, breakfast3) //apple orange banana\n\n\n//你可以在对应位留空来跳过被解构数组中的某些元素\nlet [, , third] = [1, 2, 3];\nconsole.log(third) //3\n//你还可以通过“不定参数”模式捕获数组中的所有尾随元素\nlet [head, ...tail] = [1, 2, 3, 4];\nconsole.log(tail); //[ 2, 3, 4 ]\n\n//也可以赋初始值\nlet [x = 5, y] = [];\nconsole.log(x, y); //5 undefined\n```\n\n### Object Destructuring 对象解构\n\n通过解构对象，你可以把它的每个属性与不同的变量绑定，首先指定被绑定的属性，然后紧跟一个要解构的变量\n\n```javascript\nvar personA = {name: \"张三\"};\nvar personB = {name: \"李四\"};\n\nlet {name: nameA} = personA;\nlet {name: nameB} = personB;\nconsole.log(nameA, nameB);//张三 李四\n\n\n//当属性名与变量名一致时, 可以简写为\nlet {name, age} = {name: '张三', age: 18};\nconsole.log(name, age); //张三 18\n\n//可以嵌套赋值\nvar personC = {\n    name1: '王五',\n    favorite: ['football', {work: 'program'}]\n}\n\nlet {name1, favorite: [first, {work}]} = personC;\nconsole.log(name1, first, work);\n\n```\n\n### Template Strings 模板字符串\n\n\n\n```javascript\n//模板字符串 `${表达式或变量}`\nlet dessert = 'dessert', drink = 'drink';\nlet breakfast = '今天的早餐是' + dessert + '和' + drink;\nconsole.log(breakfast)\n\n//使用字符模板表示\nlet myBreakfast = `今天的早餐是${dessert}和${drink}`;\nconsole.log(myBreakfast);\n\n//可以调用函数\nfunction sayHello() {\n    return \"hello\"\n}\nconsole.log(`i 'am say ${sayHello()}`)\n```\n\n### Tagged template 标签模板\n\n\n```javascript\n//标签模板\n'use strict'\n\nvar a = 5, b = 6;\nfunction tag(strings, ...values) {\n    console.log(strings); //[ 'hello ', ' world', '' ]\n    console.log(values); //[ 11, 30 ]\n    return 'Hello every body';\n\n}\n\n//标签模板函数第一个参数是字符串模板的常量数组，后面的每一个参数为表达式的计算结果，函数名称可以任意指定\nlet result = tag`hello ${a + b} world${a * b}`;\nconsole.log(result);\n```\n\n### ...操作符\n\n```javascript\n//...展开操作符\n'use strict'\n\nlet fruits = ['apple', 'grapes', 'pear'];\nconsole.log(fruits);//[ 'apple', 'grapes', 'pear' ]\n\n//使用...展开数组\nconsole.log(...fruits);//apple grapes pear\n\n//也可以使用...作为数组元素\nlet foods = ['cake', ...fruits];\nconsole.log(foods);\n\n//...此外还可以作为Rest操作符作为函数的参数表示剩余的参数\n\nfunction myFamily(person1, person2, ...person) {\n    console.log(person1, person2, person);\n}\nmyFamily('张三', '李四', '赵五', '王麻子');//张三 李四 [ '赵五', '王麻子' ]\n```\n\n### Arrow Function 箭头函数(lambda 表达式)\n\n```javascript\n//与lambda表达式类似\n\n'use strict'\n\n//在es6之前，通常这样定义和使用函数\nvar say = function (name, word) {\n    return name + ' say: ' + word;\n}\nconsole.log(say('张三', '你好'));//张三 say: 你好\n\n//使用箭头函数可以简化\nvar say = (name, word) => {\n    return name + ' say: ' + word;\n};\n\nconsole.log(say('张三', '你好'));//张三 say: 你好\n//还可以简化为\n\nvar say = (name, word) => name + ' say: ' + word;\nconsole.log(say('张三', '你好'));//张三 say: 你好\n//如果没有参数可简化为\nvar say = () => 'hello world!';\nconsole.log(say())\n\n\n//遍历数组大学转为小写\nlet words = ['HELLO', 'WORLD'];\nconsole.log(words.map(word => word.toLowerCase()));//[ 'hello', 'world' ]\n\n//数组排序\nlet array = [1, 6.4, 3];\narray.sort((a, b) => a - b);\nconsole.log(array);//[ 1, 3, 6.4 ]\n\n//this的作用域\nfunction Course() {\n    this.name = \"\";\n    this.description = \"\";\n    this.author = \"\";\n    this.getSummary = function () {\n        return this.name + \", \" + this.description;\n    };\n    this.getDetails = function()\n    {\n        window.setTimeout(() => {\n            console.log(this.getSummary() + \" \" + this.author)\n        }, 1000);\n    }\n}\n\nvar course = new Course();\ncourse.getDetails();\n//以上，this的作用域指的是Course，而不是window。\n//也就是说，lambda表达式中的this的作用域的指向取决于在哪里定义，而不是取决于在哪里使用。\n\n```\n","source":"_posts/es6新特性.md","raw":"title: es6新特性\ndate: 2017-07-13 11:52:19\ncategories: javascript\ntags: javascript\n---\n\n## let-块级作用域\n\n以前在js中只有全局作用域和函数作用域\n\n```javascript\nif (true) {\n    var fruit = 'apple';\n}\n\nconsole.log(fruit); //apple\n\n```\n\nvar声明了一个全局变量fruit,全局范围都有效。若只在用的到代码块中有效则使用let\n\n```javascript\nif (true) {\n    let fruit = \"zhy\";\n    console.log(fruit);//zhy\n}\nconsole.log(fruit);//ReferenceError: fruit is not defined\n\n```\n在let代码块外面访问时报错\n\n\n<!-- more -->\n## const 声明常量\n\n```javascript\n//声明一个常量，声明后不能重新赋值\nconst fruit = 'apple';\nconsole.log(fruit);\n\n//const只是限制赋值动作，并不能决定对象的值是什么\nconst fruits = [];\nfruits.push('apple')\nconsole.log(fruits)\n```\n\n## Destructuring 解构\n解构赋值允许你使用类似数组或对象字面量的语法将数组和对象的属性赋给各种变量,这种赋值语法极度简洁，同时还比传统的属性访问方法更为清晰\n\n### Array Destructuring 数组解构\n\n```javascript\n//解构语法\nfunction breakfast() {\n    return ['apple', 'orange', 'banana'];\n}\nlet [breakfast1, breakfast2, breakfast3] = breakfast();\nconsole.log(breakfast1, breakfast2, breakfast3) //apple orange banana\n\n\n//你可以在对应位留空来跳过被解构数组中的某些元素\nlet [, , third] = [1, 2, 3];\nconsole.log(third) //3\n//你还可以通过“不定参数”模式捕获数组中的所有尾随元素\nlet [head, ...tail] = [1, 2, 3, 4];\nconsole.log(tail); //[ 2, 3, 4 ]\n\n//也可以赋初始值\nlet [x = 5, y] = [];\nconsole.log(x, y); //5 undefined\n```\n\n### Object Destructuring 对象解构\n\n通过解构对象，你可以把它的每个属性与不同的变量绑定，首先指定被绑定的属性，然后紧跟一个要解构的变量\n\n```javascript\nvar personA = {name: \"张三\"};\nvar personB = {name: \"李四\"};\n\nlet {name: nameA} = personA;\nlet {name: nameB} = personB;\nconsole.log(nameA, nameB);//张三 李四\n\n\n//当属性名与变量名一致时, 可以简写为\nlet {name, age} = {name: '张三', age: 18};\nconsole.log(name, age); //张三 18\n\n//可以嵌套赋值\nvar personC = {\n    name1: '王五',\n    favorite: ['football', {work: 'program'}]\n}\n\nlet {name1, favorite: [first, {work}]} = personC;\nconsole.log(name1, first, work);\n\n```\n\n### Template Strings 模板字符串\n\n\n\n```javascript\n//模板字符串 `${表达式或变量}`\nlet dessert = 'dessert', drink = 'drink';\nlet breakfast = '今天的早餐是' + dessert + '和' + drink;\nconsole.log(breakfast)\n\n//使用字符模板表示\nlet myBreakfast = `今天的早餐是${dessert}和${drink}`;\nconsole.log(myBreakfast);\n\n//可以调用函数\nfunction sayHello() {\n    return \"hello\"\n}\nconsole.log(`i 'am say ${sayHello()}`)\n```\n\n### Tagged template 标签模板\n\n\n```javascript\n//标签模板\n'use strict'\n\nvar a = 5, b = 6;\nfunction tag(strings, ...values) {\n    console.log(strings); //[ 'hello ', ' world', '' ]\n    console.log(values); //[ 11, 30 ]\n    return 'Hello every body';\n\n}\n\n//标签模板函数第一个参数是字符串模板的常量数组，后面的每一个参数为表达式的计算结果，函数名称可以任意指定\nlet result = tag`hello ${a + b} world${a * b}`;\nconsole.log(result);\n```\n\n### ...操作符\n\n```javascript\n//...展开操作符\n'use strict'\n\nlet fruits = ['apple', 'grapes', 'pear'];\nconsole.log(fruits);//[ 'apple', 'grapes', 'pear' ]\n\n//使用...展开数组\nconsole.log(...fruits);//apple grapes pear\n\n//也可以使用...作为数组元素\nlet foods = ['cake', ...fruits];\nconsole.log(foods);\n\n//...此外还可以作为Rest操作符作为函数的参数表示剩余的参数\n\nfunction myFamily(person1, person2, ...person) {\n    console.log(person1, person2, person);\n}\nmyFamily('张三', '李四', '赵五', '王麻子');//张三 李四 [ '赵五', '王麻子' ]\n```\n\n### Arrow Function 箭头函数(lambda 表达式)\n\n```javascript\n//与lambda表达式类似\n\n'use strict'\n\n//在es6之前，通常这样定义和使用函数\nvar say = function (name, word) {\n    return name + ' say: ' + word;\n}\nconsole.log(say('张三', '你好'));//张三 say: 你好\n\n//使用箭头函数可以简化\nvar say = (name, word) => {\n    return name + ' say: ' + word;\n};\n\nconsole.log(say('张三', '你好'));//张三 say: 你好\n//还可以简化为\n\nvar say = (name, word) => name + ' say: ' + word;\nconsole.log(say('张三', '你好'));//张三 say: 你好\n//如果没有参数可简化为\nvar say = () => 'hello world!';\nconsole.log(say())\n\n\n//遍历数组大学转为小写\nlet words = ['HELLO', 'WORLD'];\nconsole.log(words.map(word => word.toLowerCase()));//[ 'hello', 'world' ]\n\n//数组排序\nlet array = [1, 6.4, 3];\narray.sort((a, b) => a - b);\nconsole.log(array);//[ 1, 3, 6.4 ]\n\n//this的作用域\nfunction Course() {\n    this.name = \"\";\n    this.description = \"\";\n    this.author = \"\";\n    this.getSummary = function () {\n        return this.name + \", \" + this.description;\n    };\n    this.getDetails = function()\n    {\n        window.setTimeout(() => {\n            console.log(this.getSummary() + \" \" + this.author)\n        }, 1000);\n    }\n}\n\nvar course = new Course();\ncourse.getDetails();\n//以上，this的作用域指的是Course，而不是window。\n//也就是说，lambda表达式中的this的作用域的指向取决于在哪里定义，而不是取决于在哪里使用。\n\n```\n","slug":"es6新特性","published":1,"updated":"2018-04-22T03:23:10.528Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjryltlbf001bncaq5ds6ugb4","content":"<h2 id=\"let-块级作用域\"><a href=\"#let-块级作用域\" class=\"headerlink\" title=\"let-块级作用域\"></a>let-块级作用域</h2><p>以前在js中只有全局作用域和函数作用域</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> fruit = <span class=\"string\">'apple'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(fruit); <span class=\"comment\">//apple</span></div></pre></td></tr></table></figure>\n<p>var声明了一个全局变量fruit,全局范围都有效。若只在用的到代码块中有效则使用let</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> fruit = <span class=\"string\">\"zhy\"</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(fruit);<span class=\"comment\">//zhy</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(fruit);<span class=\"comment\">//ReferenceError: fruit is not defined</span></div></pre></td></tr></table></figure>\n<p>在let代码块外面访问时报错</p>\n<a id=\"more\"></a>\n<h2 id=\"const-声明常量\"><a href=\"#const-声明常量\" class=\"headerlink\" title=\"const 声明常量\"></a>const 声明常量</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//声明一个常量，声明后不能重新赋值</span></div><div class=\"line\"><span class=\"keyword\">const</span> fruit = <span class=\"string\">'apple'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(fruit);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//const只是限制赋值动作，并不能决定对象的值是什么</span></div><div class=\"line\"><span class=\"keyword\">const</span> fruits = [];</div><div class=\"line\">fruits.push(<span class=\"string\">'apple'</span>)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(fruits)</div></pre></td></tr></table></figure>\n<h2 id=\"Destructuring-解构\"><a href=\"#Destructuring-解构\" class=\"headerlink\" title=\"Destructuring 解构\"></a>Destructuring 解构</h2><p>解构赋值允许你使用类似数组或对象字面量的语法将数组和对象的属性赋给各种变量,这种赋值语法极度简洁，同时还比传统的属性访问方法更为清晰</p>\n<h3 id=\"Array-Destructuring-数组解构\"><a href=\"#Array-Destructuring-数组解构\" class=\"headerlink\" title=\"Array Destructuring 数组解构\"></a>Array Destructuring 数组解构</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//解构语法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">breakfast</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">'apple'</span>, <span class=\"string\">'orange'</span>, <span class=\"string\">'banana'</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> [breakfast1, breakfast2, breakfast3] = breakfast();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(breakfast1, breakfast2, breakfast3) <span class=\"comment\">//apple orange banana</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//你可以在对应位留空来跳过被解构数组中的某些元素</span></div><div class=\"line\"><span class=\"keyword\">let</span> [, , third] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(third) <span class=\"comment\">//3</span></div><div class=\"line\"><span class=\"comment\">//你还可以通过“不定参数”模式捕获数组中的所有尾随元素</span></div><div class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(tail); <span class=\"comment\">//[ 2, 3, 4 ]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//也可以赋初始值</span></div><div class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">5</span>, y] = [];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(x, y); <span class=\"comment\">//5 undefined</span></div></pre></td></tr></table></figure>\n<h3 id=\"Object-Destructuring-对象解构\"><a href=\"#Object-Destructuring-对象解构\" class=\"headerlink\" title=\"Object Destructuring 对象解构\"></a>Object Destructuring 对象解构</h3><p>通过解构对象，你可以把它的每个属性与不同的变量绑定，首先指定被绑定的属性，然后紧跟一个要解构的变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> personA = &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"张三\"</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> personB = &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"李四\"</span>&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">name</span>: nameA&#125; = personA;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">name</span>: nameB&#125; = personB;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(nameA, nameB);<span class=\"comment\">//张三 李四</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//当属性名与变量名一致时, 可以简写为</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123;name, age&#125; = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(name, age); <span class=\"comment\">//张三 18</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//可以嵌套赋值</span></div><div class=\"line\"><span class=\"keyword\">var</span> personC = &#123;</div><div class=\"line\">    <span class=\"attr\">name1</span>: <span class=\"string\">'王五'</span>,</div><div class=\"line\">    <span class=\"attr\">favorite</span>: [<span class=\"string\">'football'</span>, &#123;<span class=\"attr\">work</span>: <span class=\"string\">'program'</span>&#125;]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> &#123;name1, <span class=\"attr\">favorite</span>: [first, &#123;work&#125;]&#125; = personC;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(name1, first, work);</div></pre></td></tr></table></figure>\n<h3 id=\"Template-Strings-模板字符串\"><a href=\"#Template-Strings-模板字符串\" class=\"headerlink\" title=\"Template Strings 模板字符串\"></a>Template Strings 模板字符串</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//模板字符串 `$&#123;表达式或变量&#125;`</span></div><div class=\"line\"><span class=\"keyword\">let</span> dessert = <span class=\"string\">'dessert'</span>, drink = <span class=\"string\">'drink'</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> breakfast = <span class=\"string\">'今天的早餐是'</span> + dessert + <span class=\"string\">'和'</span> + drink;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(breakfast)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用字符模板表示</span></div><div class=\"line\"><span class=\"keyword\">let</span> myBreakfast = <span class=\"string\">`今天的早餐是<span class=\"subst\">$&#123;dessert&#125;</span>和<span class=\"subst\">$&#123;drink&#125;</span>`</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(myBreakfast);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//可以调用函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hello\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`i 'am say <span class=\"subst\">$&#123;sayHello()&#125;</span>`</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"Tagged-template-标签模板\"><a href=\"#Tagged-template-标签模板\" class=\"headerlink\" title=\"Tagged template 标签模板\"></a>Tagged template 标签模板</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//标签模板</span></div><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">5</span>, b = <span class=\"number\">6</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tag</span>(<span class=\"params\">strings, ...values</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(strings); <span class=\"comment\">//[ 'hello ', ' world', '' ]</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(values); <span class=\"comment\">//[ 11, 30 ]</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello every body'</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//标签模板函数第一个参数是字符串模板的常量数组，后面的每一个参数为表达式的计算结果，函数名称可以任意指定</span></div><div class=\"line\"><span class=\"keyword\">let</span> result = tag<span class=\"string\">`hello <span class=\"subst\">$&#123;a + b&#125;</span> world<span class=\"subst\">$&#123;a * b&#125;</span>`</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(result);</div></pre></td></tr></table></figure>\n<h3 id=\"…操作符\"><a href=\"#…操作符\" class=\"headerlink\" title=\"…操作符\"></a>…操作符</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//...展开操作符</span></div><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> fruits = [<span class=\"string\">'apple'</span>, <span class=\"string\">'grapes'</span>, <span class=\"string\">'pear'</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(fruits);<span class=\"comment\">//[ 'apple', 'grapes', 'pear' ]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用...展开数组</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(...fruits);<span class=\"comment\">//apple grapes pear</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//也可以使用...作为数组元素</span></div><div class=\"line\"><span class=\"keyword\">let</span> foods = [<span class=\"string\">'cake'</span>, ...fruits];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foods);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//...此外还可以作为Rest操作符作为函数的参数表示剩余的参数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFamily</span>(<span class=\"params\">person1, person2, ...person</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(person1, person2, person);</div><div class=\"line\">&#125;</div><div class=\"line\">myFamily(<span class=\"string\">'张三'</span>, <span class=\"string\">'李四'</span>, <span class=\"string\">'赵五'</span>, <span class=\"string\">'王麻子'</span>);<span class=\"comment\">//张三 李四 [ '赵五', '王麻子' ]</span></div></pre></td></tr></table></figure>\n<h3 id=\"Arrow-Function-箭头函数-lambda-表达式\"><a href=\"#Arrow-Function-箭头函数-lambda-表达式\" class=\"headerlink\" title=\"Arrow Function 箭头函数(lambda 表达式)\"></a>Arrow Function 箭头函数(lambda 表达式)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//与lambda表达式类似</span></div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">'use strict'</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//在es6之前，通常这样定义和使用函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, word</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> name + <span class=\"string\">' say: '</span> + word;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(say(<span class=\"string\">'张三'</span>, <span class=\"string\">'你好'</span>));<span class=\"comment\">//张三 say: 你好</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用箭头函数可以简化</span></div><div class=\"line\"><span class=\"keyword\">var</span> say = <span class=\"function\">(<span class=\"params\">name, word</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> name + <span class=\"string\">' say: '</span> + word;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(say(<span class=\"string\">'张三'</span>, <span class=\"string\">'你好'</span>));<span class=\"comment\">//张三 say: 你好</span></div><div class=\"line\"><span class=\"comment\">//还可以简化为</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> say = <span class=\"function\">(<span class=\"params\">name, word</span>) =&gt;</span> name + <span class=\"string\">' say: '</span> + word;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(say(<span class=\"string\">'张三'</span>, <span class=\"string\">'你好'</span>));<span class=\"comment\">//张三 say: 你好</span></div><div class=\"line\"><span class=\"comment\">//如果没有参数可简化为</span></div><div class=\"line\"><span class=\"keyword\">var</span> say = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"string\">'hello world!'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(say())</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//遍历数组大学转为小写</span></div><div class=\"line\"><span class=\"keyword\">let</span> words = [<span class=\"string\">'HELLO'</span>, <span class=\"string\">'WORLD'</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(words.map(<span class=\"function\"><span class=\"params\">word</span> =&gt;</span> word.toLowerCase()));<span class=\"comment\">//[ 'hello', 'world' ]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//数组排序</span></div><div class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>, <span class=\"number\">6.4</span>, <span class=\"number\">3</span>];</div><div class=\"line\">array.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[ 1, 3, 6.4 ]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//this的作用域</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Course</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.description = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.author = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.getSummary = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">\", \"</span> + <span class=\"keyword\">this</span>.description;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.getDetails = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.getSummary() + <span class=\"string\">\" \"</span> + <span class=\"keyword\">this</span>.author)</div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> course = <span class=\"keyword\">new</span> Course();</div><div class=\"line\">course.getDetails();</div><div class=\"line\"><span class=\"comment\">//以上，this的作用域指的是Course，而不是window。</span></div><div class=\"line\"><span class=\"comment\">//也就是说，lambda表达式中的this的作用域的指向取决于在哪里定义，而不是取决于在哪里使用。</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"let-块级作用域\"><a href=\"#let-块级作用域\" class=\"headerlink\" title=\"let-块级作用域\"></a>let-块级作用域</h2><p>以前在js中只有全局作用域和函数作用域</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> fruit = <span class=\"string\">'apple'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(fruit); <span class=\"comment\">//apple</span></div></pre></td></tr></table></figure>\n<p>var声明了一个全局变量fruit,全局范围都有效。若只在用的到代码块中有效则使用let</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> fruit = <span class=\"string\">\"zhy\"</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(fruit);<span class=\"comment\">//zhy</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(fruit);<span class=\"comment\">//ReferenceError: fruit is not defined</span></div></pre></td></tr></table></figure>\n<p>在let代码块外面访问时报错</p>","more":"<h2 id=\"const-声明常量\"><a href=\"#const-声明常量\" class=\"headerlink\" title=\"const 声明常量\"></a>const 声明常量</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//声明一个常量，声明后不能重新赋值</span></div><div class=\"line\"><span class=\"keyword\">const</span> fruit = <span class=\"string\">'apple'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(fruit);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//const只是限制赋值动作，并不能决定对象的值是什么</span></div><div class=\"line\"><span class=\"keyword\">const</span> fruits = [];</div><div class=\"line\">fruits.push(<span class=\"string\">'apple'</span>)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(fruits)</div></pre></td></tr></table></figure>\n<h2 id=\"Destructuring-解构\"><a href=\"#Destructuring-解构\" class=\"headerlink\" title=\"Destructuring 解构\"></a>Destructuring 解构</h2><p>解构赋值允许你使用类似数组或对象字面量的语法将数组和对象的属性赋给各种变量,这种赋值语法极度简洁，同时还比传统的属性访问方法更为清晰</p>\n<h3 id=\"Array-Destructuring-数组解构\"><a href=\"#Array-Destructuring-数组解构\" class=\"headerlink\" title=\"Array Destructuring 数组解构\"></a>Array Destructuring 数组解构</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//解构语法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">breakfast</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">'apple'</span>, <span class=\"string\">'orange'</span>, <span class=\"string\">'banana'</span>];</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> [breakfast1, breakfast2, breakfast3] = breakfast();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(breakfast1, breakfast2, breakfast3) <span class=\"comment\">//apple orange banana</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//你可以在对应位留空来跳过被解构数组中的某些元素</span></div><div class=\"line\"><span class=\"keyword\">let</span> [, , third] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(third) <span class=\"comment\">//3</span></div><div class=\"line\"><span class=\"comment\">//你还可以通过“不定参数”模式捕获数组中的所有尾随元素</span></div><div class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(tail); <span class=\"comment\">//[ 2, 3, 4 ]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//也可以赋初始值</span></div><div class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">5</span>, y] = [];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(x, y); <span class=\"comment\">//5 undefined</span></div></pre></td></tr></table></figure>\n<h3 id=\"Object-Destructuring-对象解构\"><a href=\"#Object-Destructuring-对象解构\" class=\"headerlink\" title=\"Object Destructuring 对象解构\"></a>Object Destructuring 对象解构</h3><p>通过解构对象，你可以把它的每个属性与不同的变量绑定，首先指定被绑定的属性，然后紧跟一个要解构的变量</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> personA = &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"张三\"</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> personB = &#123;<span class=\"attr\">name</span>: <span class=\"string\">\"李四\"</span>&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">name</span>: nameA&#125; = personA;</div><div class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">name</span>: nameB&#125; = personB;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(nameA, nameB);<span class=\"comment\">//张三 李四</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//当属性名与变量名一致时, 可以简写为</span></div><div class=\"line\"><span class=\"keyword\">let</span> &#123;name, age&#125; = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'张三'</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(name, age); <span class=\"comment\">//张三 18</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//可以嵌套赋值</span></div><div class=\"line\"><span class=\"keyword\">var</span> personC = &#123;</div><div class=\"line\">    <span class=\"attr\">name1</span>: <span class=\"string\">'王五'</span>,</div><div class=\"line\">    <span class=\"attr\">favorite</span>: [<span class=\"string\">'football'</span>, &#123;<span class=\"attr\">work</span>: <span class=\"string\">'program'</span>&#125;]</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> &#123;name1, <span class=\"attr\">favorite</span>: [first, &#123;work&#125;]&#125; = personC;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(name1, first, work);</div></pre></td></tr></table></figure>\n<h3 id=\"Template-Strings-模板字符串\"><a href=\"#Template-Strings-模板字符串\" class=\"headerlink\" title=\"Template Strings 模板字符串\"></a>Template Strings 模板字符串</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//模板字符串 `$&#123;表达式或变量&#125;`</span></div><div class=\"line\"><span class=\"keyword\">let</span> dessert = <span class=\"string\">'dessert'</span>, drink = <span class=\"string\">'drink'</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> breakfast = <span class=\"string\">'今天的早餐是'</span> + dessert + <span class=\"string\">'和'</span> + drink;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(breakfast)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用字符模板表示</span></div><div class=\"line\"><span class=\"keyword\">let</span> myBreakfast = <span class=\"string\">`今天的早餐是<span class=\"subst\">$&#123;dessert&#125;</span>和<span class=\"subst\">$&#123;drink&#125;</span>`</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(myBreakfast);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//可以调用函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHello</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"hello\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`i 'am say <span class=\"subst\">$&#123;sayHello()&#125;</span>`</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"Tagged-template-标签模板\"><a href=\"#Tagged-template-标签模板\" class=\"headerlink\" title=\"Tagged template 标签模板\"></a>Tagged template 标签模板</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//标签模板</span></div><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">5</span>, b = <span class=\"number\">6</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tag</span>(<span class=\"params\">strings, ...values</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(strings); <span class=\"comment\">//[ 'hello ', ' world', '' ]</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(values); <span class=\"comment\">//[ 11, 30 ]</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello every body'</span>;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//标签模板函数第一个参数是字符串模板的常量数组，后面的每一个参数为表达式的计算结果，函数名称可以任意指定</span></div><div class=\"line\"><span class=\"keyword\">let</span> result = tag<span class=\"string\">`hello <span class=\"subst\">$&#123;a + b&#125;</span> world<span class=\"subst\">$&#123;a * b&#125;</span>`</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(result);</div></pre></td></tr></table></figure>\n<h3 id=\"…操作符\"><a href=\"#…操作符\" class=\"headerlink\" title=\"…操作符\"></a>…操作符</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//...展开操作符</span></div><div class=\"line\"><span class=\"meta\">'use strict'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> fruits = [<span class=\"string\">'apple'</span>, <span class=\"string\">'grapes'</span>, <span class=\"string\">'pear'</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(fruits);<span class=\"comment\">//[ 'apple', 'grapes', 'pear' ]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用...展开数组</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(...fruits);<span class=\"comment\">//apple grapes pear</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//也可以使用...作为数组元素</span></div><div class=\"line\"><span class=\"keyword\">let</span> foods = [<span class=\"string\">'cake'</span>, ...fruits];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(foods);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//...此外还可以作为Rest操作符作为函数的参数表示剩余的参数</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFamily</span>(<span class=\"params\">person1, person2, ...person</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(person1, person2, person);</div><div class=\"line\">&#125;</div><div class=\"line\">myFamily(<span class=\"string\">'张三'</span>, <span class=\"string\">'李四'</span>, <span class=\"string\">'赵五'</span>, <span class=\"string\">'王麻子'</span>);<span class=\"comment\">//张三 李四 [ '赵五', '王麻子' ]</span></div></pre></td></tr></table></figure>\n<h3 id=\"Arrow-Function-箭头函数-lambda-表达式\"><a href=\"#Arrow-Function-箭头函数-lambda-表达式\" class=\"headerlink\" title=\"Arrow Function 箭头函数(lambda 表达式)\"></a>Arrow Function 箭头函数(lambda 表达式)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//与lambda表达式类似</span></div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">'use strict'</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//在es6之前，通常这样定义和使用函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name, word</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> name + <span class=\"string\">' say: '</span> + word;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(say(<span class=\"string\">'张三'</span>, <span class=\"string\">'你好'</span>));<span class=\"comment\">//张三 say: 你好</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//使用箭头函数可以简化</span></div><div class=\"line\"><span class=\"keyword\">var</span> say = <span class=\"function\">(<span class=\"params\">name, word</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> name + <span class=\"string\">' say: '</span> + word;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(say(<span class=\"string\">'张三'</span>, <span class=\"string\">'你好'</span>));<span class=\"comment\">//张三 say: 你好</span></div><div class=\"line\"><span class=\"comment\">//还可以简化为</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> say = <span class=\"function\">(<span class=\"params\">name, word</span>) =&gt;</span> name + <span class=\"string\">' say: '</span> + word;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(say(<span class=\"string\">'张三'</span>, <span class=\"string\">'你好'</span>));<span class=\"comment\">//张三 say: 你好</span></div><div class=\"line\"><span class=\"comment\">//如果没有参数可简化为</span></div><div class=\"line\"><span class=\"keyword\">var</span> say = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"string\">'hello world!'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(say())</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//遍历数组大学转为小写</span></div><div class=\"line\"><span class=\"keyword\">let</span> words = [<span class=\"string\">'HELLO'</span>, <span class=\"string\">'WORLD'</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(words.map(<span class=\"function\"><span class=\"params\">word</span> =&gt;</span> word.toLowerCase()));<span class=\"comment\">//[ 'hello', 'world' ]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//数组排序</span></div><div class=\"line\"><span class=\"keyword\">let</span> array = [<span class=\"number\">1</span>, <span class=\"number\">6.4</span>, <span class=\"number\">3</span>];</div><div class=\"line\">array.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(array);<span class=\"comment\">//[ 1, 3, 6.4 ]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//this的作用域</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Course</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.description = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.author = <span class=\"string\">\"\"</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.getSummary = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">\", \"</span> + <span class=\"keyword\">this</span>.description;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.getDetails = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">window</span>.setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.getSummary() + <span class=\"string\">\" \"</span> + <span class=\"keyword\">this</span>.author)</div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> course = <span class=\"keyword\">new</span> Course();</div><div class=\"line\">course.getDetails();</div><div class=\"line\"><span class=\"comment\">//以上，this的作用域指的是Course，而不是window。</span></div><div class=\"line\"><span class=\"comment\">//也就是说，lambda表达式中的this的作用域的指向取决于在哪里定义，而不是取决于在哪里使用。</span></div></pre></td></tr></table></figure>"},{"title":"搭建hexo博客（一）写在前面","date":"2015-12-17T14:38:33.000Z","comments":1,"_content":"## 为什么要写博客\n\n大约在10年前吧也就是2006年当时自己刚上大一，博客刚刚兴起，什么QQ空间、新浪博客风靡一时，虽说大学不是学的计算机专业，但自己总觉得自己要用电脑写点什么，毕竟高中时候的作文比赛是没少得奖，自己也就在新浪上开了自己的博客，当时还信誓旦旦的说每周不少于多少篇，要记录自己的每个瞬间，以后有个回忆的资本。然而事与愿违，大学四年基本上荒废了自己，游戏废掉了自己。没错写博客就是要实现自己10年前的愿望，重拾自己，抓住青春的尾巴，给自己一个交代。\n\n\n## 为什么要用hexo搭建博客\n之前考虑过CSDN，图省事，但作为程序猿来说，喜欢捣腾反而使得写博客更加有趣，加上markdown语法的支持，写博客就像编程序一样有条不紊，总结起来就是自己喜欢瞎搞(~~~)。\n<!-- more -->\n\n## 关于坚持\n这曾经对我来说不算是个事，但是大学的荒废使得这个事很严重了，很多事自己没能坚持下来，现在就是个loser。不能这样下去，要改变做回从前的自己。这里一开始给自己定个目标吧，最低要求是每个星期之间博文不能断，即就是每周至少要产出一篇博文。\n\n\n","source":"_posts/搭建hexo博客.md","raw":"title: 搭建hexo博客（一）写在前面\ndate: 2015-12-17 22:38:33\ntags:\n- hexo\ncategories: \n- hexo搭建个人博客\n- 个人随感\ncomments:\n---\n## 为什么要写博客\n\n大约在10年前吧也就是2006年当时自己刚上大一，博客刚刚兴起，什么QQ空间、新浪博客风靡一时，虽说大学不是学的计算机专业，但自己总觉得自己要用电脑写点什么，毕竟高中时候的作文比赛是没少得奖，自己也就在新浪上开了自己的博客，当时还信誓旦旦的说每周不少于多少篇，要记录自己的每个瞬间，以后有个回忆的资本。然而事与愿违，大学四年基本上荒废了自己，游戏废掉了自己。没错写博客就是要实现自己10年前的愿望，重拾自己，抓住青春的尾巴，给自己一个交代。\n\n\n## 为什么要用hexo搭建博客\n之前考虑过CSDN，图省事，但作为程序猿来说，喜欢捣腾反而使得写博客更加有趣，加上markdown语法的支持，写博客就像编程序一样有条不紊，总结起来就是自己喜欢瞎搞(~~~)。\n<!-- more -->\n\n## 关于坚持\n这曾经对我来说不算是个事，但是大学的荒废使得这个事很严重了，很多事自己没能坚持下来，现在就是个loser。不能这样下去，要改变做回从前的自己。这里一开始给自己定个目标吧，最低要求是每个星期之间博文不能断，即就是每周至少要产出一篇博文。\n\n\n","slug":"搭建hexo博客","published":1,"updated":"2015-12-19T05:38:52.000Z","layout":"post","photos":[],"link":"","_id":"cjryltlbh001fncaql0xq6c7s","content":"<h2 id=\"为什么要写博客\"><a href=\"#为什么要写博客\" class=\"headerlink\" title=\"为什么要写博客\"></a>为什么要写博客</h2><p>大约在10年前吧也就是2006年当时自己刚上大一，博客刚刚兴起，什么QQ空间、新浪博客风靡一时，虽说大学不是学的计算机专业，但自己总觉得自己要用电脑写点什么，毕竟高中时候的作文比赛是没少得奖，自己也就在新浪上开了自己的博客，当时还信誓旦旦的说每周不少于多少篇，要记录自己的每个瞬间，以后有个回忆的资本。然而事与愿违，大学四年基本上荒废了自己，游戏废掉了自己。没错写博客就是要实现自己10年前的愿望，重拾自己，抓住青春的尾巴，给自己一个交代。</p>\n<h2 id=\"为什么要用hexo搭建博客\"><a href=\"#为什么要用hexo搭建博客\" class=\"headerlink\" title=\"为什么要用hexo搭建博客\"></a>为什么要用hexo搭建博客</h2><p>之前考虑过CSDN，图省事，但作为程序猿来说，喜欢捣腾反而使得写博客更加有趣，加上markdown语法的支持，写博客就像编程序一样有条不紊，总结起来就是自己喜欢瞎搞(~~~)。<br><a id=\"more\"></a></p>\n<h2 id=\"关于坚持\"><a href=\"#关于坚持\" class=\"headerlink\" title=\"关于坚持\"></a>关于坚持</h2><p>这曾经对我来说不算是个事，但是大学的荒废使得这个事很严重了，很多事自己没能坚持下来，现在就是个loser。不能这样下去，要改变做回从前的自己。这里一开始给自己定个目标吧，最低要求是每个星期之间博文不能断，即就是每周至少要产出一篇博文。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"为什么要写博客\"><a href=\"#为什么要写博客\" class=\"headerlink\" title=\"为什么要写博客\"></a>为什么要写博客</h2><p>大约在10年前吧也就是2006年当时自己刚上大一，博客刚刚兴起，什么QQ空间、新浪博客风靡一时，虽说大学不是学的计算机专业，但自己总觉得自己要用电脑写点什么，毕竟高中时候的作文比赛是没少得奖，自己也就在新浪上开了自己的博客，当时还信誓旦旦的说每周不少于多少篇，要记录自己的每个瞬间，以后有个回忆的资本。然而事与愿违，大学四年基本上荒废了自己，游戏废掉了自己。没错写博客就是要实现自己10年前的愿望，重拾自己，抓住青春的尾巴，给自己一个交代。</p>\n<h2 id=\"为什么要用hexo搭建博客\"><a href=\"#为什么要用hexo搭建博客\" class=\"headerlink\" title=\"为什么要用hexo搭建博客\"></a>为什么要用hexo搭建博客</h2><p>之前考虑过CSDN，图省事，但作为程序猿来说，喜欢捣腾反而使得写博客更加有趣，加上markdown语法的支持，写博客就像编程序一样有条不紊，总结起来就是自己喜欢瞎搞(~~~)。<br>","more":"</p>\n<h2 id=\"关于坚持\"><a href=\"#关于坚持\" class=\"headerlink\" title=\"关于坚持\"></a>关于坚持</h2><p>这曾经对我来说不算是个事，但是大学的荒废使得这个事很严重了，很多事自己没能坚持下来，现在就是个loser。不能这样下去，要改变做回从前的自己。这里一开始给自己定个目标吧，最低要求是每个星期之间博文不能断，即就是每周至少要产出一篇博文。</p>"},{"title":"搭建hexo博客（三）使用七牛存储图片","date":"2016-01-09T05:01:41.000Z","_content":"\n### 1.  为何使用七牛\nHexo文章中的图片，我们可以放到本地，然后一起部署到github中，这样完全没有问题。然而github pages空间毕竟有限（貌似只有300M）,另外图片的管理太混乱了，一些原创的图片可能被盗链。七牛作为国内顶尖的CDN云存储商，选择他有以下几个理由\n\n> * 在国内很稳定，我们公司也是选择七牛来提供云存储的\n> * 免费提供10G存储空间，和每月10G下载流量，完全够用\n> * hexo有七牛的插件，使用起来也是相当的方便\n> \n![](http://7xppgb.com1.z0.glb.clouddn.com/static/images/use-qiniu-store-image-for-hexo/qiniu.png)\n\n\n### 2.注册和安装七牛工具\n\n首先我们需要申请七牛账号，如果你也需要申请，请访问[**这个链接**](https://portal.qiniu.com/signup?code=3ld4kzjsl1qoi)，这样我可以获得更多的流量（5GB）。然后登录七牛网站，按照官网说明创建空间，比如我创建的空间是为forevercoder-blog 。创建完成后会给你分配个七牛域名比如我的是：\n\t\t\n\t\t7xppgb.com1.z0.glb.clouddn.com\n通过该URL就可以访问你上传的资源了，\n\n```\nhttp://7xppgb.com1.z0.glb.clouddn.com/static/images/use-qiniu-store-image-for-hexo/qiniu.png\n```\n当然也可以设置自定义域名。\n\n<!--more-->\n### 3.安装hexo七牛插件\n\n1. 插件地址：[https://github.com/gyk001/hexo-qiniu-sync](https://github.com/gyk001/hexo-qiniu-sync)\n\n2. 安装\n\n在你的hexo主目录下运行以下命令进行安装：\n\n```\nnpm install hexo-qiniu-sync --save\n```\n\n添加插件配置信息到 ``_config.yml`` 文件中:\n\n```\nplugins:\n  - hexo-qiniu-sync\n```\n让后根据官方的README,一步一步完成就OK了\n\n### 4. 使用qiniu插件\n\n配置完成后我们在hexo目录下执行\n\t \n\t hexo qiniu sync\n\t \n\t\n这样就在localDir下生成相对应的文件夹,将图片资源放到images文件夹下，比我的路径是 use-qiniu-store-image-for-hexo/qiniu.png，让后就用下面的标记使用，\n\n```\t\n    {% qnimg use-qiniu-store-image-for-hexo/qiniu.png title:免费使用七牛 alt:图片说明 'class:class1 class2' %}\n```\n \n最后在同步上传图片\n   \n\thexo qiniu sync2\n\t\n然后 hexo g -d 就OK了，非常简单方便\n \n\n","source":"_posts/搭建hexo博客（三）使用七牛存储图片.md","raw":"title: 搭建hexo博客（三）使用七牛存储图片\ndate: 2016-01-09 13:01:41\ncategories: hexo搭建个人博客\ntags: hexo\n---\n\n### 1.  为何使用七牛\nHexo文章中的图片，我们可以放到本地，然后一起部署到github中，这样完全没有问题。然而github pages空间毕竟有限（貌似只有300M）,另外图片的管理太混乱了，一些原创的图片可能被盗链。七牛作为国内顶尖的CDN云存储商，选择他有以下几个理由\n\n> * 在国内很稳定，我们公司也是选择七牛来提供云存储的\n> * 免费提供10G存储空间，和每月10G下载流量，完全够用\n> * hexo有七牛的插件，使用起来也是相当的方便\n> \n![](http://7xppgb.com1.z0.glb.clouddn.com/static/images/use-qiniu-store-image-for-hexo/qiniu.png)\n\n\n### 2.注册和安装七牛工具\n\n首先我们需要申请七牛账号，如果你也需要申请，请访问[**这个链接**](https://portal.qiniu.com/signup?code=3ld4kzjsl1qoi)，这样我可以获得更多的流量（5GB）。然后登录七牛网站，按照官网说明创建空间，比如我创建的空间是为forevercoder-blog 。创建完成后会给你分配个七牛域名比如我的是：\n\t\t\n\t\t7xppgb.com1.z0.glb.clouddn.com\n通过该URL就可以访问你上传的资源了，\n\n```\nhttp://7xppgb.com1.z0.glb.clouddn.com/static/images/use-qiniu-store-image-for-hexo/qiniu.png\n```\n当然也可以设置自定义域名。\n\n<!--more-->\n### 3.安装hexo七牛插件\n\n1. 插件地址：[https://github.com/gyk001/hexo-qiniu-sync](https://github.com/gyk001/hexo-qiniu-sync)\n\n2. 安装\n\n在你的hexo主目录下运行以下命令进行安装：\n\n```\nnpm install hexo-qiniu-sync --save\n```\n\n添加插件配置信息到 ``_config.yml`` 文件中:\n\n```\nplugins:\n  - hexo-qiniu-sync\n```\n让后根据官方的README,一步一步完成就OK了\n\n### 4. 使用qiniu插件\n\n配置完成后我们在hexo目录下执行\n\t \n\t hexo qiniu sync\n\t \n\t\n这样就在localDir下生成相对应的文件夹,将图片资源放到images文件夹下，比我的路径是 use-qiniu-store-image-for-hexo/qiniu.png，让后就用下面的标记使用，\n\n```\t\n    {% qnimg use-qiniu-store-image-for-hexo/qiniu.png title:免费使用七牛 alt:图片说明 'class:class1 class2' %}\n```\n \n最后在同步上传图片\n   \n\thexo qiniu sync2\n\t\n然后 hexo g -d 就OK了，非常简单方便\n \n\n","slug":"搭建hexo博客（三）使用七牛存储图片","published":1,"updated":"2016-07-02T03:23:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjryltlbi001hncaqh6383978","content":"<h3 id=\"1-为何使用七牛\"><a href=\"#1-为何使用七牛\" class=\"headerlink\" title=\"1.  为何使用七牛\"></a>1.  为何使用七牛</h3><p>Hexo文章中的图片，我们可以放到本地，然后一起部署到github中，这样完全没有问题。然而github pages空间毕竟有限（貌似只有300M）,另外图片的管理太混乱了，一些原创的图片可能被盗链。七牛作为国内顶尖的CDN云存储商，选择他有以下几个理由</p>\n<blockquote>\n<ul>\n<li>在国内很稳定，我们公司也是选择七牛来提供云存储的</li>\n<li>免费提供10G存储空间，和每月10G下载流量，完全够用</li>\n<li>hexo有七牛的插件，使用起来也是相当的方便</li>\n</ul>\n<p><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/static/images/use-qiniu-store-image-for-hexo/qiniu.png\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"2-注册和安装七牛工具\"><a href=\"#2-注册和安装七牛工具\" class=\"headerlink\" title=\"2.注册和安装七牛工具\"></a>2.注册和安装七牛工具</h3><p>首先我们需要申请七牛账号，如果你也需要申请，请访问<a href=\"https://portal.qiniu.com/signup?code=3ld4kzjsl1qoi\" target=\"_blank\" rel=\"external\"><strong>这个链接</strong></a>，这样我可以获得更多的流量（5GB）。然后登录七牛网站，按照官网说明创建空间，比如我创建的空间是为forevercoder-blog 。创建完成后会给你分配个七牛域名比如我的是：</p>\n<pre><code>7xppgb.com1.z0.glb.clouddn.com\n</code></pre><p>通过该URL就可以访问你上传的资源了，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://7xppgb.com1.z0.glb.clouddn.com/static/images/use-qiniu-store-image-for-hexo/qiniu.png</div></pre></td></tr></table></figure>\n<p>当然也可以设置自定义域名。</p>\n<a id=\"more\"></a>\n<h3 id=\"3-安装hexo七牛插件\"><a href=\"#3-安装hexo七牛插件\" class=\"headerlink\" title=\"3.安装hexo七牛插件\"></a>3.安装hexo七牛插件</h3><ol>\n<li><p>插件地址：<a href=\"https://github.com/gyk001/hexo-qiniu-sync\" target=\"_blank\" rel=\"external\">https://github.com/gyk001/hexo-qiniu-sync</a></p>\n</li>\n<li><p>安装</p>\n</li>\n</ol>\n<p>在你的hexo主目录下运行以下命令进行安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-qiniu-sync --save</div></pre></td></tr></table></figure>\n<p>添加插件配置信息到 <code>_config.yml</code> 文件中:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins:</div><div class=\"line\">  - hexo-qiniu-sync</div></pre></td></tr></table></figure>\n<p>让后根据官方的README,一步一步完成就OK了</p>\n<h3 id=\"4-使用qiniu插件\"><a href=\"#4-使用qiniu插件\" class=\"headerlink\" title=\"4. 使用qiniu插件\"></a>4. 使用qiniu插件</h3><p>配置完成后我们在hexo目录下执行</p>\n<pre><code>hexo qiniu sync\n</code></pre><p>这样就在localDir下生成相对应的文件夹,将图片资源放到images文件夹下，比我的路径是 use-qiniu-store-image-for-hexo/qiniu.png，让后就用下面的标记使用，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% qnimg use-qiniu-store-image-for-hexo/qiniu.png title:免费使用七牛 alt:图片说明 &apos;class:class1 class2&apos; %&#125;</div></pre></td></tr></table></figure>\n<p>最后在同步上传图片</p>\n<pre><code>hexo qiniu sync2\n</code></pre><p>然后 hexo g -d 就OK了，非常简单方便</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-为何使用七牛\"><a href=\"#1-为何使用七牛\" class=\"headerlink\" title=\"1.  为何使用七牛\"></a>1.  为何使用七牛</h3><p>Hexo文章中的图片，我们可以放到本地，然后一起部署到github中，这样完全没有问题。然而github pages空间毕竟有限（貌似只有300M）,另外图片的管理太混乱了，一些原创的图片可能被盗链。七牛作为国内顶尖的CDN云存储商，选择他有以下几个理由</p>\n<blockquote>\n<ul>\n<li>在国内很稳定，我们公司也是选择七牛来提供云存储的</li>\n<li>免费提供10G存储空间，和每月10G下载流量，完全够用</li>\n<li>hexo有七牛的插件，使用起来也是相当的方便</li>\n</ul>\n<p><img src=\"http://7xppgb.com1.z0.glb.clouddn.com/static/images/use-qiniu-store-image-for-hexo/qiniu.png\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"2-注册和安装七牛工具\"><a href=\"#2-注册和安装七牛工具\" class=\"headerlink\" title=\"2.注册和安装七牛工具\"></a>2.注册和安装七牛工具</h3><p>首先我们需要申请七牛账号，如果你也需要申请，请访问<a href=\"https://portal.qiniu.com/signup?code=3ld4kzjsl1qoi\" target=\"_blank\" rel=\"external\"><strong>这个链接</strong></a>，这样我可以获得更多的流量（5GB）。然后登录七牛网站，按照官网说明创建空间，比如我创建的空间是为forevercoder-blog 。创建完成后会给你分配个七牛域名比如我的是：</p>\n<pre><code>7xppgb.com1.z0.glb.clouddn.com\n</code></pre><p>通过该URL就可以访问你上传的资源了，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://7xppgb.com1.z0.glb.clouddn.com/static/images/use-qiniu-store-image-for-hexo/qiniu.png</div></pre></td></tr></table></figure>\n<p>当然也可以设置自定义域名。</p>","more":"<h3 id=\"3-安装hexo七牛插件\"><a href=\"#3-安装hexo七牛插件\" class=\"headerlink\" title=\"3.安装hexo七牛插件\"></a>3.安装hexo七牛插件</h3><ol>\n<li><p>插件地址：<a href=\"https://github.com/gyk001/hexo-qiniu-sync\" target=\"_blank\" rel=\"external\">https://github.com/gyk001/hexo-qiniu-sync</a></p>\n</li>\n<li><p>安装</p>\n</li>\n</ol>\n<p>在你的hexo主目录下运行以下命令进行安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-qiniu-sync --save</div></pre></td></tr></table></figure>\n<p>添加插件配置信息到 <code>_config.yml</code> 文件中:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins:</div><div class=\"line\">  - hexo-qiniu-sync</div></pre></td></tr></table></figure>\n<p>让后根据官方的README,一步一步完成就OK了</p>\n<h3 id=\"4-使用qiniu插件\"><a href=\"#4-使用qiniu插件\" class=\"headerlink\" title=\"4. 使用qiniu插件\"></a>4. 使用qiniu插件</h3><p>配置完成后我们在hexo目录下执行</p>\n<pre><code>hexo qiniu sync\n</code></pre><p>这样就在localDir下生成相对应的文件夹,将图片资源放到images文件夹下，比我的路径是 use-qiniu-store-image-for-hexo/qiniu.png，让后就用下面的标记使用，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% qnimg use-qiniu-store-image-for-hexo/qiniu.png title:免费使用七牛 alt:图片说明 &apos;class:class1 class2&apos; %&#125;</div></pre></td></tr></table></figure>\n<p>最后在同步上传图片</p>\n<pre><code>hexo qiniu sync2\n</code></pre><p>然后 hexo g -d 就OK了，非常简单方便</p>"},{"title":"搭建hexo博客（二）准备工作","date":"2015-12-20T12:03:01.000Z","comments":1,"_content":"## 安装homebrew\nhomebrew是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件， 只需要一个命令， 非常方便。打开终端输入以下命令即可完成安装：\n\n\n\truby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”\n\t\n## 安装nodejs\nhoewbrew安装成功后，我们就可以借助他来安装Nodejs了，输入以下命令：\n\t\t\n\tbrew install node\n\t\n## 安装hexo\n使用nodejs的npm命令来安装hexo\n\t\t\n\tnpm install -g hexo-cli\n\t\n<!--more-->\n## 初始化hexo\n\t\n\thexo init Blog\nBlog是工程存放的文件夹，名字可以随便取\n\n    cd Blog\n    npm install\n    \n## 安装git插件\n\n\tnpm install hexo-deployer-git --save\n\n## 注册GitHub\n  * 点这里注册 [GitHub](https://github.com/) \n  * 注册完成后 创建你的GitHub Pages 也就是我们博客的主页\n  * 如果你的用户名为abc,则需创建名称为abc.github.io的仓库\n  \n\n\n","source":"_posts/搭建hexo博客（二）准备工作.md","raw":"title: 搭建hexo博客（二）准备工作\ndate: 2015-12-20 20:03:01\ncategories:\n- hexo搭建个人博客\ntags:\n- hexo\ncomments:\n\n---\n## 安装homebrew\nhomebrew是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件， 只需要一个命令， 非常方便。打开终端输入以下命令即可完成安装：\n\n\n\truby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”\n\t\n## 安装nodejs\nhoewbrew安装成功后，我们就可以借助他来安装Nodejs了，输入以下命令：\n\t\t\n\tbrew install node\n\t\n## 安装hexo\n使用nodejs的npm命令来安装hexo\n\t\t\n\tnpm install -g hexo-cli\n\t\n<!--more-->\n## 初始化hexo\n\t\n\thexo init Blog\nBlog是工程存放的文件夹，名字可以随便取\n\n    cd Blog\n    npm install\n    \n## 安装git插件\n\n\tnpm install hexo-deployer-git --save\n\n## 注册GitHub\n  * 点这里注册 [GitHub](https://github.com/) \n  * 注册完成后 创建你的GitHub Pages 也就是我们博客的主页\n  * 如果你的用户名为abc,则需创建名称为abc.github.io的仓库\n  \n\n\n","slug":"搭建hexo博客（二）准备工作","published":1,"updated":"2015-12-20T12:38:12.000Z","layout":"post","photos":[],"link":"","_id":"cjryltlbj001kncaq6hbyt9em","content":"<h2 id=\"安装homebrew\"><a href=\"#安装homebrew\" class=\"headerlink\" title=\"安装homebrew\"></a>安装homebrew</h2><p>homebrew是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件， 只需要一个命令， 非常方便。打开终端输入以下命令即可完成安装：</p>\n<pre><code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”\n</code></pre><h2 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h2><p>hoewbrew安装成功后，我们就可以借助他来安装Nodejs了，输入以下命令：</p>\n<pre><code>brew install node\n</code></pre><h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>使用nodejs的npm命令来安装hexo</p>\n<pre><code>npm install -g hexo-cli\n</code></pre><a id=\"more\"></a>\n<h2 id=\"初始化hexo\"><a href=\"#初始化hexo\" class=\"headerlink\" title=\"初始化hexo\"></a>初始化hexo</h2><pre><code>hexo init Blog\n</code></pre><p>Blog是工程存放的文件夹，名字可以随便取</p>\n<pre><code>cd Blog\nnpm install\n</code></pre><h2 id=\"安装git插件\"><a href=\"#安装git插件\" class=\"headerlink\" title=\"安装git插件\"></a>安装git插件</h2><pre><code>npm install hexo-deployer-git --save\n</code></pre><h2 id=\"注册GitHub\"><a href=\"#注册GitHub\" class=\"headerlink\" title=\"注册GitHub\"></a>注册GitHub</h2><ul>\n<li>点这里注册 <a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">GitHub</a> </li>\n<li>注册完成后 创建你的GitHub Pages 也就是我们博客的主页</li>\n<li>如果你的用户名为abc,则需创建名称为abc.github.io的仓库</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"安装homebrew\"><a href=\"#安装homebrew\" class=\"headerlink\" title=\"安装homebrew\"></a>安装homebrew</h2><p>homebrew是Mac OSX上的软件包管理工具，能在Mac中方便的安装软件或者卸载软件， 只需要一个命令， 非常方便。打开终端输入以下命令即可完成安装：</p>\n<pre><code>ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)”\n</code></pre><h2 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h2><p>hoewbrew安装成功后，我们就可以借助他来安装Nodejs了，输入以下命令：</p>\n<pre><code>brew install node\n</code></pre><h2 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h2><p>使用nodejs的npm命令来安装hexo</p>\n<pre><code>npm install -g hexo-cli\n</code></pre>","more":"<h2 id=\"初始化hexo\"><a href=\"#初始化hexo\" class=\"headerlink\" title=\"初始化hexo\"></a>初始化hexo</h2><pre><code>hexo init Blog\n</code></pre><p>Blog是工程存放的文件夹，名字可以随便取</p>\n<pre><code>cd Blog\nnpm install\n</code></pre><h2 id=\"安装git插件\"><a href=\"#安装git插件\" class=\"headerlink\" title=\"安装git插件\"></a>安装git插件</h2><pre><code>npm install hexo-deployer-git --save\n</code></pre><h2 id=\"注册GitHub\"><a href=\"#注册GitHub\" class=\"headerlink\" title=\"注册GitHub\"></a>注册GitHub</h2><ul>\n<li>点这里注册 <a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">GitHub</a> </li>\n<li>注册完成后 创建你的GitHub Pages 也就是我们博客的主页</li>\n<li>如果你的用户名为abc,则需创建名称为abc.github.io的仓库</li>\n</ul>"},{"title":"深入理解 scrollTo()、scrollBy()、getScrollX()","date":"2015-12-24T01:35:59.000Z","_content":"\n## 一、废话先说\n   我们在开发Android自定义控件时，尤其是做一些滑动效果时，往往会使用 scrollTo()、scrollBy()、getScrollX() 这几个方法。对初学者来说不太好理解这几个方法，这篇博文就来彻底弄清这几个API的用法。\n\n## 二、测试界面\n 我们测试的界面中有三个Linearlayout如下图：黄色框所在的区域为屏幕显示区域\n \n![](http://img.blog.csdn.net/20150414083752720)\n\n运行时如下图：\n![这里写图片描述](http://img.blog.csdn.net/20150414084317419)\n单击按钮会执行相应的方法，并弹当前getScrollX()、getScrollY()的值 \n\n<!--more-->\n\n## 三、详细讲解 \n\n### 1、scrollTo()\n   View中的源码如下：\n```java\n    /**\n     * Set the scrolled position of your view. This will cause a call to\n     * {@link #onScrollChanged(int, int, int, int)} and the view will be\n     * invalidated.\n     * @param x the x position to scroll to\n     * @param y the y position to scroll to\n     */\n    public void scrollTo(int x, int y) {\n        if (mScrollX != x || mScrollY != y) {\n            int oldX = mScrollX;\n            int oldY = mScrollY;\n            mScrollX = x;\n            mScrollY = y;\n            invalidateParentCaches();\n            onScrollChanged(mScrollX, mScrollY, oldX, oldY);\n            if (!awakenScrollBars()) {\n                postInvalidateOnAnimation();\n            }\n        }\n    }\n```\n- scrollTo用来设置你的View要滚动的坐标 \n- mScrollX、mScrollY 表示当前View在水平和垂直方向上分别滑动了多少\n- scrollTo执行后会调用onScrollChanged()方法\n\n我们执行  **scrollTo(100,100)** 过程如下：\n![这里写图片描述](http://img.blog.csdn.net/20150414091643430)\n执行结果如下：**我们的屏幕向左上方滑动了**\n![这里写图片描述](http://img.blog.csdn.net/20150414091815236)\n\n再执行  **scrollTo(-100,-100)** 过程如下：\n![这里写图片描述](http://img.blog.csdn.net/20150414094119017)\n执行结果如下：**我们的屏幕向右下方滑动了**\n![这里写图片描述](http://img.blog.csdn.net/20150414093915469)\n\n是不是很好理解呢，总结下：\n- **x>0表示视图(View或ViewGroup)的内容从右向左滑动;反之，从左向右滑动**\n- **y>0表示视图(View或ViewGroup)的内容从下向上滑动;反之，从上向下滑动**\n\n### 2、scrollBy()\n View中的源码如下：\n```java\n    /**\n     * Move the scrolled position of your view. This will cause a call to\n     * {@link #onScrollChanged(int, int, int, int)} and the view will be\n     * invalidated.\n     * @param x the amount of pixels to scroll by horizontally\n     * @param y the amount of pixels to scroll by vertically\n     */\n    public void scrollBy(int x, int y) {\n        scrollTo(mScrollX + x, mScrollY + y);\n    }\n```\n只是简单调用了 srcollTo(),在原有 mScrollX 、mScrollY 的基础上增量滚动 x、y\n\n我们从刚才scrollTo(-100,-100)基础上scrollBy(50,50)，那么就相当于 scrollTo(50,50),很简单吧。\n![这里写图片描述](http://img.blog.csdn.net/20150414095633182)\n\n### 3、getScrollX()； getScrollY()\n View中的源码如下：\n```java\n/**\n     * Return the scrolled left position of this view. This is the left edge of\n     * the displayed part of your view. You do not need to draw any pixels\n     * farther left, since those are outside of the frame of your view on\n     * screen.\n     *\n     * @return The left edge of the displayed part of your view, in pixels.\n     */\n    public final int getScrollX() {\n        return mScrollX;\n    }\n\n    /**\n     * Return the scrolled top position of this view. This is the top edge of\n     * the displayed part of your view. You do not need to draw any pixels above\n     * it, since those are outside of the frame of your view on screen.\n     *\n     * @return The top edge of the displayed part of your view, in pixels.\n     */\n    public final int getScrollY() {\n        return mScrollY;\n    }\n```\ngetScrollX()、getScrollY()返回的就是scrollTo(),scrollBy()中的不断变化的偏移量，我的前面的 Toast也\n能体现出来。\n  \n","source":"_posts/深入理解-scrollTo-、scrollBy-、getScrollX.md","raw":"title: 深入理解 scrollTo()、scrollBy()、getScrollX()\ndate: 2015-12-24 09:35:59\ncategories: Android开发\ntags: android\n---\n\n## 一、废话先说\n   我们在开发Android自定义控件时，尤其是做一些滑动效果时，往往会使用 scrollTo()、scrollBy()、getScrollX() 这几个方法。对初学者来说不太好理解这几个方法，这篇博文就来彻底弄清这几个API的用法。\n\n## 二、测试界面\n 我们测试的界面中有三个Linearlayout如下图：黄色框所在的区域为屏幕显示区域\n \n![](http://img.blog.csdn.net/20150414083752720)\n\n运行时如下图：\n![这里写图片描述](http://img.blog.csdn.net/20150414084317419)\n单击按钮会执行相应的方法，并弹当前getScrollX()、getScrollY()的值 \n\n<!--more-->\n\n## 三、详细讲解 \n\n### 1、scrollTo()\n   View中的源码如下：\n```java\n    /**\n     * Set the scrolled position of your view. This will cause a call to\n     * {@link #onScrollChanged(int, int, int, int)} and the view will be\n     * invalidated.\n     * @param x the x position to scroll to\n     * @param y the y position to scroll to\n     */\n    public void scrollTo(int x, int y) {\n        if (mScrollX != x || mScrollY != y) {\n            int oldX = mScrollX;\n            int oldY = mScrollY;\n            mScrollX = x;\n            mScrollY = y;\n            invalidateParentCaches();\n            onScrollChanged(mScrollX, mScrollY, oldX, oldY);\n            if (!awakenScrollBars()) {\n                postInvalidateOnAnimation();\n            }\n        }\n    }\n```\n- scrollTo用来设置你的View要滚动的坐标 \n- mScrollX、mScrollY 表示当前View在水平和垂直方向上分别滑动了多少\n- scrollTo执行后会调用onScrollChanged()方法\n\n我们执行  **scrollTo(100,100)** 过程如下：\n![这里写图片描述](http://img.blog.csdn.net/20150414091643430)\n执行结果如下：**我们的屏幕向左上方滑动了**\n![这里写图片描述](http://img.blog.csdn.net/20150414091815236)\n\n再执行  **scrollTo(-100,-100)** 过程如下：\n![这里写图片描述](http://img.blog.csdn.net/20150414094119017)\n执行结果如下：**我们的屏幕向右下方滑动了**\n![这里写图片描述](http://img.blog.csdn.net/20150414093915469)\n\n是不是很好理解呢，总结下：\n- **x>0表示视图(View或ViewGroup)的内容从右向左滑动;反之，从左向右滑动**\n- **y>0表示视图(View或ViewGroup)的内容从下向上滑动;反之，从上向下滑动**\n\n### 2、scrollBy()\n View中的源码如下：\n```java\n    /**\n     * Move the scrolled position of your view. This will cause a call to\n     * {@link #onScrollChanged(int, int, int, int)} and the view will be\n     * invalidated.\n     * @param x the amount of pixels to scroll by horizontally\n     * @param y the amount of pixels to scroll by vertically\n     */\n    public void scrollBy(int x, int y) {\n        scrollTo(mScrollX + x, mScrollY + y);\n    }\n```\n只是简单调用了 srcollTo(),在原有 mScrollX 、mScrollY 的基础上增量滚动 x、y\n\n我们从刚才scrollTo(-100,-100)基础上scrollBy(50,50)，那么就相当于 scrollTo(50,50),很简单吧。\n![这里写图片描述](http://img.blog.csdn.net/20150414095633182)\n\n### 3、getScrollX()； getScrollY()\n View中的源码如下：\n```java\n/**\n     * Return the scrolled left position of this view. This is the left edge of\n     * the displayed part of your view. You do not need to draw any pixels\n     * farther left, since those are outside of the frame of your view on\n     * screen.\n     *\n     * @return The left edge of the displayed part of your view, in pixels.\n     */\n    public final int getScrollX() {\n        return mScrollX;\n    }\n\n    /**\n     * Return the scrolled top position of this view. This is the top edge of\n     * the displayed part of your view. You do not need to draw any pixels above\n     * it, since those are outside of the frame of your view on screen.\n     *\n     * @return The top edge of the displayed part of your view, in pixels.\n     */\n    public final int getScrollY() {\n        return mScrollY;\n    }\n```\ngetScrollX()、getScrollY()返回的就是scrollTo(),scrollBy()中的不断变化的偏移量，我的前面的 Toast也\n能体现出来。\n  \n","slug":"深入理解-scrollTo-、scrollBy-、getScrollX","published":1,"updated":"2015-12-24T01:54:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjryltlbk001nncaq6ir98ymi","content":"<h2 id=\"一、废话先说\"><a href=\"#一、废话先说\" class=\"headerlink\" title=\"一、废话先说\"></a>一、废话先说</h2><p>   我们在开发Android自定义控件时，尤其是做一些滑动效果时，往往会使用 scrollTo()、scrollBy()、getScrollX() 这几个方法。对初学者来说不太好理解这几个方法，这篇博文就来彻底弄清这几个API的用法。</p>\n<h2 id=\"二、测试界面\"><a href=\"#二、测试界面\" class=\"headerlink\" title=\"二、测试界面\"></a>二、测试界面</h2><p> 我们测试的界面中有三个Linearlayout如下图：黄色框所在的区域为屏幕显示区域</p>\n<p><img src=\"http://img.blog.csdn.net/20150414083752720\" alt=\"\"></p>\n<p>运行时如下图：<br><img src=\"http://img.blog.csdn.net/20150414084317419\" alt=\"这里写图片描述\"><br>单击按钮会执行相应的方法，并弹当前getScrollX()、getScrollY()的值 </p>\n<a id=\"more\"></a>\n<h2 id=\"三、详细讲解\"><a href=\"#三、详细讲解\" class=\"headerlink\" title=\"三、详细讲解\"></a>三、详细讲解</h2><h3 id=\"1、scrollTo\"><a href=\"#1、scrollTo\" class=\"headerlink\" title=\"1、scrollTo()\"></a>1、scrollTo()</h3><p>   View中的源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Set the scrolled position of your view. This will cause a call to</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onScrollChanged(int, int, int, int)&#125; and the view will be</div><div class=\"line\"> * invalidated.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> x the x position to scroll to</div><div class=\"line\"> * <span class=\"doctag\">@param</span> y the y position to scroll to</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollTo</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mScrollX != x || mScrollY != y) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> oldX = mScrollX;</div><div class=\"line\">        <span class=\"keyword\">int</span> oldY = mScrollY;</div><div class=\"line\">        mScrollX = x;</div><div class=\"line\">        mScrollY = y;</div><div class=\"line\">        invalidateParentCaches();</div><div class=\"line\">        onScrollChanged(mScrollX, mScrollY, oldX, oldY);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!awakenScrollBars()) &#123;</div><div class=\"line\">            postInvalidateOnAnimation();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>scrollTo用来设置你的View要滚动的坐标 </li>\n<li>mScrollX、mScrollY 表示当前View在水平和垂直方向上分别滑动了多少</li>\n<li>scrollTo执行后会调用onScrollChanged()方法</li>\n</ul>\n<p>我们执行  <strong>scrollTo(100,100)</strong> 过程如下：<br><img src=\"http://img.blog.csdn.net/20150414091643430\" alt=\"这里写图片描述\"><br>执行结果如下：<strong>我们的屏幕向左上方滑动了</strong><br><img src=\"http://img.blog.csdn.net/20150414091815236\" alt=\"这里写图片描述\"></p>\n<p>再执行  <strong>scrollTo(-100,-100)</strong> 过程如下：<br><img src=\"http://img.blog.csdn.net/20150414094119017\" alt=\"这里写图片描述\"><br>执行结果如下：<strong>我们的屏幕向右下方滑动了</strong><br><img src=\"http://img.blog.csdn.net/20150414093915469\" alt=\"这里写图片描述\"></p>\n<p>是不是很好理解呢，总结下：</p>\n<ul>\n<li><strong>x&gt;0表示视图(View或ViewGroup)的内容从右向左滑动;反之，从左向右滑动</strong></li>\n<li><strong>y&gt;0表示视图(View或ViewGroup)的内容从下向上滑动;反之，从上向下滑动</strong></li>\n</ul>\n<h3 id=\"2、scrollBy\"><a href=\"#2、scrollBy\" class=\"headerlink\" title=\"2、scrollBy()\"></a>2、scrollBy()</h3><p> View中的源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Move the scrolled position of your view. This will cause a call to</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onScrollChanged(int, int, int, int)&#125; and the view will be</div><div class=\"line\"> * invalidated.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> x the amount of pixels to scroll by horizontally</div><div class=\"line\"> * <span class=\"doctag\">@param</span> y the amount of pixels to scroll by vertically</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollBy</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">    scrollTo(mScrollX + x, mScrollY + y);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>只是简单调用了 srcollTo(),在原有 mScrollX 、mScrollY 的基础上增量滚动 x、y</p>\n<p>我们从刚才scrollTo(-100,-100)基础上scrollBy(50,50)，那么就相当于 scrollTo(50,50),很简单吧。<br><img src=\"http://img.blog.csdn.net/20150414095633182\" alt=\"这里写图片描述\"></p>\n<h3 id=\"3、getScrollX-；-getScrollY\"><a href=\"#3、getScrollX-；-getScrollY\" class=\"headerlink\" title=\"3、getScrollX()； getScrollY()\"></a>3、getScrollX()； getScrollY()</h3><p> View中的源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * Return the scrolled left position of this view. This is the left edge of</div><div class=\"line\">     * the displayed part of your view. You do not need to draw any pixels</div><div class=\"line\">     * farther left, since those are outside of the frame of your view on</div><div class=\"line\">     * screen.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span> The left edge of the displayed part of your view, in pixels.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getScrollX</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mScrollX;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Return the scrolled top position of this view. This is the top edge of</div><div class=\"line\">     * the displayed part of your view. You do not need to draw any pixels above</div><div class=\"line\">     * it, since those are outside of the frame of your view on screen.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span> The top edge of the displayed part of your view, in pixels.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getScrollY</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mScrollY;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>getScrollX()、getScrollY()返回的就是scrollTo(),scrollBy()中的不断变化的偏移量，我的前面的 Toast也<br>能体现出来。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、废话先说\"><a href=\"#一、废话先说\" class=\"headerlink\" title=\"一、废话先说\"></a>一、废话先说</h2><p>   我们在开发Android自定义控件时，尤其是做一些滑动效果时，往往会使用 scrollTo()、scrollBy()、getScrollX() 这几个方法。对初学者来说不太好理解这几个方法，这篇博文就来彻底弄清这几个API的用法。</p>\n<h2 id=\"二、测试界面\"><a href=\"#二、测试界面\" class=\"headerlink\" title=\"二、测试界面\"></a>二、测试界面</h2><p> 我们测试的界面中有三个Linearlayout如下图：黄色框所在的区域为屏幕显示区域</p>\n<p><img src=\"http://img.blog.csdn.net/20150414083752720\" alt=\"\"></p>\n<p>运行时如下图：<br><img src=\"http://img.blog.csdn.net/20150414084317419\" alt=\"这里写图片描述\"><br>单击按钮会执行相应的方法，并弹当前getScrollX()、getScrollY()的值 </p>","more":"<h2 id=\"三、详细讲解\"><a href=\"#三、详细讲解\" class=\"headerlink\" title=\"三、详细讲解\"></a>三、详细讲解</h2><h3 id=\"1、scrollTo\"><a href=\"#1、scrollTo\" class=\"headerlink\" title=\"1、scrollTo()\"></a>1、scrollTo()</h3><p>   View中的源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Set the scrolled position of your view. This will cause a call to</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onScrollChanged(int, int, int, int)&#125; and the view will be</div><div class=\"line\"> * invalidated.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> x the x position to scroll to</div><div class=\"line\"> * <span class=\"doctag\">@param</span> y the y position to scroll to</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollTo</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mScrollX != x || mScrollY != y) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> oldX = mScrollX;</div><div class=\"line\">        <span class=\"keyword\">int</span> oldY = mScrollY;</div><div class=\"line\">        mScrollX = x;</div><div class=\"line\">        mScrollY = y;</div><div class=\"line\">        invalidateParentCaches();</div><div class=\"line\">        onScrollChanged(mScrollX, mScrollY, oldX, oldY);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!awakenScrollBars()) &#123;</div><div class=\"line\">            postInvalidateOnAnimation();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>scrollTo用来设置你的View要滚动的坐标 </li>\n<li>mScrollX、mScrollY 表示当前View在水平和垂直方向上分别滑动了多少</li>\n<li>scrollTo执行后会调用onScrollChanged()方法</li>\n</ul>\n<p>我们执行  <strong>scrollTo(100,100)</strong> 过程如下：<br><img src=\"http://img.blog.csdn.net/20150414091643430\" alt=\"这里写图片描述\"><br>执行结果如下：<strong>我们的屏幕向左上方滑动了</strong><br><img src=\"http://img.blog.csdn.net/20150414091815236\" alt=\"这里写图片描述\"></p>\n<p>再执行  <strong>scrollTo(-100,-100)</strong> 过程如下：<br><img src=\"http://img.blog.csdn.net/20150414094119017\" alt=\"这里写图片描述\"><br>执行结果如下：<strong>我们的屏幕向右下方滑动了</strong><br><img src=\"http://img.blog.csdn.net/20150414093915469\" alt=\"这里写图片描述\"></p>\n<p>是不是很好理解呢，总结下：</p>\n<ul>\n<li><strong>x&gt;0表示视图(View或ViewGroup)的内容从右向左滑动;反之，从左向右滑动</strong></li>\n<li><strong>y&gt;0表示视图(View或ViewGroup)的内容从下向上滑动;反之，从上向下滑动</strong></li>\n</ul>\n<h3 id=\"2、scrollBy\"><a href=\"#2、scrollBy\" class=\"headerlink\" title=\"2、scrollBy()\"></a>2、scrollBy()</h3><p> View中的源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Move the scrolled position of your view. This will cause a call to</div><div class=\"line\"> * &#123;<span class=\"doctag\">@link</span> #onScrollChanged(int, int, int, int)&#125; and the view will be</div><div class=\"line\"> * invalidated.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> x the amount of pixels to scroll by horizontally</div><div class=\"line\"> * <span class=\"doctag\">@param</span> y the amount of pixels to scroll by vertically</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollBy</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">    scrollTo(mScrollX + x, mScrollY + y);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>只是简单调用了 srcollTo(),在原有 mScrollX 、mScrollY 的基础上增量滚动 x、y</p>\n<p>我们从刚才scrollTo(-100,-100)基础上scrollBy(50,50)，那么就相当于 scrollTo(50,50),很简单吧。<br><img src=\"http://img.blog.csdn.net/20150414095633182\" alt=\"这里写图片描述\"></p>\n<h3 id=\"3、getScrollX-；-getScrollY\"><a href=\"#3、getScrollX-；-getScrollY\" class=\"headerlink\" title=\"3、getScrollX()； getScrollY()\"></a>3、getScrollX()； getScrollY()</h3><p> View中的源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * Return the scrolled left position of this view. This is the left edge of</div><div class=\"line\">     * the displayed part of your view. You do not need to draw any pixels</div><div class=\"line\">     * farther left, since those are outside of the frame of your view on</div><div class=\"line\">     * screen.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span> The left edge of the displayed part of your view, in pixels.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getScrollX</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mScrollX;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Return the scrolled top position of this view. This is the top edge of</div><div class=\"line\">     * the displayed part of your view. You do not need to draw any pixels above</div><div class=\"line\">     * it, since those are outside of the frame of your view on screen.</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span> The top edge of the displayed part of your view, in pixels.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">getScrollY</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mScrollY;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>getScrollX()、getScrollY()返回的就是scrollTo(),scrollBy()中的不断变化的偏移量，我的前面的 Toast也<br>能体现出来。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjryltlas0003ncaqq5xuuyvs","category_id":"cjryltlax0006ncaq5c9zhx0a","_id":"cjryltlb3000fncaqfblukg5e"},{"post_id":"cjryltlaw0005ncaq7it9fhgw","category_id":"cjryltlb1000bncaqzs0nw1v0","_id":"cjryltlb6000mncaqyj4pb9tj"},{"post_id":"cjryltlaz0008ncaqpiww4t7c","category_id":"cjryltlb4000hncaq5tuwql2v","_id":"cjryltlb9000tncaqxc254q65"},{"post_id":"cjryltlb00009ncaqk24409ip","category_id":"cjryltlb7000nncaqgyz4kdr8","_id":"cjryltlbb0010ncaql2ru33co"},{"post_id":"cjryltlb1000ancaq7z31kfme","category_id":"cjryltlb7000nncaqgyz4kdr8","_id":"cjryltlbe0016ncaqx9w2c3dp"},{"post_id":"cjryltlb2000encaq4pqq7vov","category_id":"cjryltlb7000nncaqgyz4kdr8","_id":"cjryltlbg001cncaq42zirju8"},{"post_id":"cjryltlb5000jncaqivbnna9u","category_id":"cjryltlb7000nncaqgyz4kdr8","_id":"cjryltlbi001incaqw2xs1cpb"},{"post_id":"cjryltlb6000lncaqdduq5oog","category_id":"cjryltlb7000nncaqgyz4kdr8","_id":"cjryltlbk001oncaqf131xml2"},{"post_id":"cjryltlbk001nncaq6ir98ymi","category_id":"cjryltlb1000bncaqzs0nw1v0","_id":"cjryltlbl001sncaqzjgnlmsd"},{"post_id":"cjryltlb8000qncaqcpe2nlu8","category_id":"cjryltlbi001jncaqwvjd5tyu","_id":"cjryltlbm001vncaqzc6te4mk"},{"post_id":"cjryltlb9000sncaqxhnh38pf","category_id":"cjryltlbl001pncaqxglollls","_id":"cjryltlbm001xncaqnvf6gdgb"},{"post_id":"cjryltlba000xncaqc1ohm6u5","category_id":"cjryltlbl001pncaqxglollls","_id":"cjryltlbn0021ncaqvfd07zas"},{"post_id":"cjryltlbb000zncaqiwu4tued","category_id":"cjryltlbm001yncaqf4l2uxzx","_id":"cjryltlbo0025ncaqx64tvg08"},{"post_id":"cjryltlbc0013ncaqgqh0t11g","category_id":"cjryltlbm001yncaqf4l2uxzx","_id":"cjryltlbo0029ncaqgb2ku1hk"},{"post_id":"cjryltlbd0015ncaqvvjx4pm3","category_id":"cjryltlbm001yncaqf4l2uxzx","_id":"cjryltlbp002dncaqmcq2gvj0"},{"post_id":"cjryltlbe0019ncaqpn56w8lo","category_id":"cjryltlbo002ancaqpn9dyj72","_id":"cjryltlbq002hncaq70a28osz"},{"post_id":"cjryltlbf001bncaq5ds6ugb4","category_id":"cjryltlbp002encaqnfx02zwj","_id":"cjryltlbq002lncaqb0gl0lx3"},{"post_id":"cjryltlbi001hncaqh6383978","category_id":"cjryltlbq002incaqn19m6rfr","_id":"cjryltlbs002rncaq6lztb1c4"},{"post_id":"cjryltlbj001kncaq6hbyt9em","category_id":"cjryltlbq002incaqn19m6rfr","_id":"cjryltlbs002tncaq251ow2ns"},{"post_id":"cjryltlbh001fncaql0xq6c7s","category_id":"cjryltlbq002incaqn19m6rfr","_id":"cjryltlbt002uncaq795vsl69"},{"post_id":"cjryltlbh001fncaql0xq6c7s","category_id":"cjryltlbs002sncaqzntg9ciw","_id":"cjryltlbt002vncaqfz7wvyp4"}],"PostTag":[{"post_id":"cjryltlas0003ncaqq5xuuyvs","tag_id":"cjryltlaz0007ncaqhmkmde3i","_id":"cjryltlb2000dncaqy2887sro"},{"post_id":"cjryltlaw0005ncaq7it9fhgw","tag_id":"cjryltlb1000cncaqc2636lxz","_id":"cjryltlb6000kncaqhdvsy0e5"},{"post_id":"cjryltlb5000jncaqivbnna9u","tag_id":"cjryltlb5000incaq2bs5l68u","_id":"cjryltlb7000pncaq18w2qz7z"},{"post_id":"cjryltlaz0008ncaqpiww4t7c","tag_id":"cjryltlb5000incaq2bs5l68u","_id":"cjryltlb8000rncaq2jmetzqz"},{"post_id":"cjryltlb6000lncaqdduq5oog","tag_id":"cjryltlb5000incaq2bs5l68u","_id":"cjryltlb9000vncaqq2zoypg3"},{"post_id":"cjryltlb00009ncaqk24409ip","tag_id":"cjryltlb5000incaq2bs5l68u","_id":"cjryltlbb000yncaq9dlqcy6j"},{"post_id":"cjryltlb1000ancaq7z31kfme","tag_id":"cjryltlb5000incaq2bs5l68u","_id":"cjryltlbd0014ncaqi74yn80r"},{"post_id":"cjryltlb2000encaq4pqq7vov","tag_id":"cjryltlb5000incaq2bs5l68u","_id":"cjryltlbf001ancaqx1tazjjt"},{"post_id":"cjryltlb8000qncaqcpe2nlu8","tag_id":"cjryltlbe0017ncaqi2s3airm","_id":"cjryltlbi001gncaq43crsc1n"},{"post_id":"cjryltlb9000sncaqxhnh38pf","tag_id":"cjryltlbg001encaqivlygiq6","_id":"cjryltlbk001mncaqc5ufczar"},{"post_id":"cjryltlba000xncaqc1ohm6u5","tag_id":"cjryltlbg001encaqivlygiq6","_id":"cjryltlbl001rncaq0267qmwo"},{"post_id":"cjryltlbb000zncaqiwu4tued","tag_id":"cjryltlbl001qncaqylkypbhp","_id":"cjryltlbm001wncaqne071xth"},{"post_id":"cjryltlbc0013ncaqgqh0t11g","tag_id":"cjryltlbl001qncaqylkypbhp","_id":"cjryltlbn0020ncaqn2zhepc0"},{"post_id":"cjryltlbd0015ncaqvvjx4pm3","tag_id":"cjryltlbm001zncaqenn9v248","_id":"cjryltlbn0024ncaqzwst4wou"},{"post_id":"cjryltlbe0019ncaqpn56w8lo","tag_id":"cjryltlbn0023ncaqfxiy5csf","_id":"cjryltlbo0028ncaq29aqo662"},{"post_id":"cjryltlbf001bncaq5ds6ugb4","tag_id":"cjryltlbo0027ncaq4zegbkmb","_id":"cjryltlbp002cncaq4zgk6rvm"},{"post_id":"cjryltlbh001fncaql0xq6c7s","tag_id":"cjryltlbp002bncaqcktfwuia","_id":"cjryltlbq002gncaquplsvdiz"},{"post_id":"cjryltlbi001hncaqh6383978","tag_id":"cjryltlbp002bncaqcktfwuia","_id":"cjryltlbq002kncaqdwmyqy0h"},{"post_id":"cjryltlbj001kncaq6hbyt9em","tag_id":"cjryltlbp002bncaqcktfwuia","_id":"cjryltlbr002oncaqblpjigiw"},{"post_id":"cjryltlbk001nncaq6ir98ymi","tag_id":"cjryltlbr002nncaql9arad2i","_id":"cjryltlbs002qncaqp60ltls4"}],"Tag":[{"name":"ADB","_id":"cjryltlaz0007ncaqhmkmde3i"},{"name":"Android自定义控件","_id":"cjryltlb1000cncaqc2636lxz"},{"name":"Dagger2","_id":"cjryltlb5000incaq2bs5l68u"},{"name":"Mysql","_id":"cjryltlbe0017ncaqi2s3airm"},{"name":"react native","_id":"cjryltlbg001encaqivlygiq6"},{"name":"RxJava","_id":"cjryltlbl001qncaqylkypbhp"},{"name":"Rxjava","_id":"cjryltlbm001zncaqenn9v248"},{"name":"Vue","_id":"cjryltlbn0023ncaqfxiy5csf"},{"name":"javascript","_id":"cjryltlbo0027ncaq4zegbkmb"},{"name":"hexo","_id":"cjryltlbp002bncaqcktfwuia"},{"name":"android","_id":"cjryltlbr002nncaql9arad2i"}]}}